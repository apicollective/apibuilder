{
    "base_url": "http://localhost:9000",
    "name": "Api Doc",
    "description": "Host API documentation for REST services, and facilities design of resource first APIs.",
    "resources": {

        "users": {
            "description": "A user is a top level person interacting with the api doc server.",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this user." },
                { "name": "email", "type": "string" },
                { "name": "name", "type": "string" },
                { "name": "image_url", "type": "string", "required": false, "description": "Image avatar for this user" }
            ],

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all users. Results are always paginated. You must specify at least 1 parameter - either a guid, email or token.",
                    "parameters": [
                        { "name": "guid", "type": "string", "description": "User guid.", "required": false },
                        { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false },
                        { "name": "token", "type": "string", "description": "Find the user with this API token. Exact match", "required": false },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": ["user"] }
                    ]
                },

                {
                    "method": "POST",
                    "description": "Create a new user.",
                    "parameters": [
                        { "name": "email", "type": "string" },
                        { "name": "name", "type": "string", "required": false },
                        { "name": "image_url", "type": "string", "required": false }
                    ],
                    "responses": [
                        { "code": 200, "result": "user" }
                    ]
                }

            ]
        },

        "organizations": {
            "description": "An organization is used to group a set of services together.",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this organization." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the organization name." },
                { "name": "name", "type": "string", "description": "The name of this organization." }
            ],

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all organizations. Results are always paginated.",
                    "parameters": [
                        { "name": "guid", "type": "string", "required": false, "references": "organizations.guid" },
                        { "name": "user_guid", "type": "string", "required": false, "references": "users.guid" },
                        { "name": "key", "type": "string", "description": "Find organizations with this key. Case in-sensitive. Exact match", "required": false },
                        { "name": "name", "type": "string", "description": "Find organizations with this name. Case in-sensitive. Exact match", "required": false },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": ["organization"] }
                    ]
                },

                {
                    "method": "POST",
                    "description": "Create a new organization.",
                    "parameters": [
                        { "name": "name", "type": "string" }
                    ],
                    "responses": [
                        { "code": 200, "result": "organization" }
                    ]
                }

            ]
        },

        "memberships": {
            "description": "A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this membership." },
                { "name": "user_guid", "type": "string", "references": "users.guid" },
                { "name": "organization_guid", "type": "string", "references": "organizations.guid" },
                { "name": "role", "type": "string", "description": "The role this user plays for this organization. Typically member or admin.", "example": "member" }
            ],

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all memberships. Results are always paginated.",
                    "parameters": [
                        { "name": "organization_guid", "type": "string", "description": "Find memberships for this organization", "required": false, "references": "organizations.guid" },
                        { "name": "organization_key", "type": "string", "description": "Find memberships for this organization key", "required": false, "references": "organizations.key" },
                        { "name": "user_guid", "type": "string", "description": "Find memberships for this user", "required": false, "references": "users.guid" },
                        { "name": "role", "type": "string", "description": "Limit to memberships with this role", "required": false },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": ["membership"] }
                    ]
                }
            ]
        },

        "membership_requests": {
            "description": "A membership request represents a user requesting to join an organization with a specificed role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this membership request." },
                { "name": "user_guid", "type": "string", "references": "users.guid" },
                { "name": "organization_guid", "type": "string", "references": "organizations.guid" },
                { "name": "role", "type": "string", "description": "The requested role for membership to this organization. Typically member or admin.", "example": "member" }
            ],

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all pending membership requests. Results are always paginated.",
                    "parameters": [
                        { "name": "organization_guid", "type": "string", "description": "Find membership requests for this organization gyud", "required": false, "references": "organizations.guid" },
                        { "name": "organization_key", "type": "string", "description": "Find membership requests for this organization key", "required": false, "references": "organizations.key" },
                        { "name": "user_guid", "type": "string", "description": "Find membership requests initiated by this user", "required": false, "references": "users.guid" },
                        { "name": "role", "type": "string", "description": "Limit to membership requests with this role", "required": false },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": ["membership_request"] }
                    ]
                },

                {
                    "method": "POST",
                    "description": "Create a membership request.",
                    "parameters": [
                        { "name": "organization_guid", "type": "string", "description": "Find memberships for this organization" },
                        { "name": "user_guid", "type": "string", "description": "Find memberships for this user" },
                        { "name": "role", "type": "string", "description": "Limit to memberships with this role" }
                    ],
                    "responses": [
                        { "code": 200, "result": "membership_request" }
                    ]
                }

            ]
        },

        "membership_request_reviews": {
            "description": "A membership request review allows a user to either accept or decline a membership request.",
            "fields": [
                { "name": "membership_request_guid", "type": "string", "references": "membership_requests.guid" },
                { "name": "action", "type": "string", "description": "'accept' or 'decline'", "example": "accept" }
            ],

            "operations": [
                 {
                    "method": "POST",
                    "description": "Create a membership request.",
                    "parameters": [
                        { "name": "membership_request_guid", "type": "string" },
                        { "name": "action", "type": "string" }
                    ],
                    "responses": [
                        { "code": 201, "result": "membership_request_review" }
                    ]
                }
            ]
        },

        "services": {
            "path": "/:org",
            "description": "A service has a name and multiple versions of an API (Interface).",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this service." },
                { "name": "name", "type": "string", "description": "The unique name for this service." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the service name." },
                { "name": "description", "type": "string", "required": false }
            ],

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all services. Results are always paginated.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "name", "type": "string", "description": "Finds the service with this name. Exact match", "required": false },
                        { "name": "key", "type": "string", "description": "Finds the service with this key. Exact match", "required": false },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": ["service"] }
                    ]
                },

                {
                    "method": "DELETE",
                    "path": "/:service",
                    "description": "Deletes this service and all of its associated versions.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key.", "example": "apidoc" }
                    ],
                    "responses": [
                        { "code": 204 }
                    ]
                }

            ]
        },

        "versions": {
            "path": "/:org",
            "description": "Represents a unique version of the service.",
            "fields": [
                { "name": "guid", "type": "string", "description": "Internal unique identifier for this version." },
                { "name": "version", "type": "string", "description": "The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.", "example": "1.0.0" },
                { "name": "json", "type": "string", "description": "JSON description of the service." }
            ],
            "operations": [

                {
                    "method": "GET",
                    "path": "/:service",
                    "description": "Returns summary information about all of the versions for this service, ordered with most recent version first.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key", "example": "apidoc" },
                        { "name": "limit", "type": "integer", "default": 50, "description": "The number of records to return", "minimum": 0, "maximum": 50 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": [
                        { "code": 200, "result": "version" }
                    ]
                },

                {
                    "method": "GET",
                    "path": "/:service/latest",
                    "description": "Returns detailed information about the latest version of this service.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key", "example": "apidoc" }
                    ],
                    "responses": [
                        { "code": 200, "result": "version" },
                        { "code": 400, "description": "If version is not found" }
                    ]
                },

                {
                    "method": "GET",
                    "path": "/:service/:version",
                    "description": "Returns detailed information about this service version, including the full json description of the version.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key", "example": "apidoc" },
                        { "name": "version", "type": "string", "description": "The version number. You can specify latest to always get the latest version of this service.", "example": "1.0.0 or latest" }
                    ],
                    "responses": [
                        { "code": 200, "result": "version" }
                    ]
                },

                {
                    "method": "PUT",
                    "path": "/:service/:version",
                    "description": "Create a version of this service by PUTing the contents of an api.json file. The service interface is fully described by the file you post. Example: curl -X PUT -u 'token:' -d @api.json '/gilt/docs/apidoc/1.0.0'",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key", "example": "apidoc" },
                        { "name": "version", "type": "string", "description": "The version number. You can specify latest to always get the latest version of this service.", "example": "1.0.0 or latest" }
                    ],
                    "responses": [
                        { "code": 201, "result": "version" }
                    ]
                },

                {
                    "method": "DELETE",
                    "path": "/:service/:version",
                    "description": "Deletes a version of this service.",
                    "parameters": [
                        { "name": "org", "type": "string", "description": "Organization key." },
                        { "name": "service", "type": "string", "description": "The service key", "example": "apidoc" },
                        { "name": "version", "type": "string", "description": "The version number. You can specify latest to always get the latest version of this service.", "example": "1.0.0 or latest" }
                    ],
                    "responses": [
                        { "code": 204 }
                    ]
                }
            ]
        }
    }

}
