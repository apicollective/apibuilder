/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.24
 * apibuilder:0.12.38 https://app.apibuilder.io/apicollective/apibuilder-spec/0.12.24/play_2_4_client
 */
package io.apibuilder.spec.v0.models {

  sealed trait ResponseCode extends _root_.scala.Product with _root_.scala.Serializable

  case class Apidoc(
    version: String
  )

  /**
   * @param key Unique key identifying this application
   */
  case class Application(
    key: String
  )

  /**
   * Represents an additional attribute that is attached to one of the objects in
   * apibuilder. The main use case is to capture additional metadata that doesn't
   * necessarily define the API but aids in code generation. Examples would be hints
   * for certain code generators about classes to extend, interfaces to implement,
   * annotations to add, names to assign to certain methods, etc. The specific
   * attributes will be applicable only in the context of the specific code
   * generators usings them.
   */
  case class Attribute(
    name: String,
    value: _root_.play.api.libs.json.JsObject,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None
  )

  case class Body(
    `type`: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * Describes the primary contact for this service
   */
  case class Contact(
    name: _root_.scala.Option[String] = None,
    url: _root_.scala.Option[String] = None,
    email: _root_.scala.Option[String] = None
  )

  /**
   * Indicates that this particular element is considered deprecated in the API. See
   * the description for details
   */
  case class Deprecation(
    description: _root_.scala.Option[String] = None
  )

  case class Enum(
    name: String,
    plural: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    values: Seq[io.apibuilder.spec.v0.models.EnumValue],
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  case class EnumValue(
    name: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  case class Field(
    name: String,
    `type`: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    default: _root_.scala.Option[String] = None,
    required: Boolean,
    minimum: _root_.scala.Option[Long] = None,
    maximum: _root_.scala.Option[Long] = None,
    example: _root_.scala.Option[String] = None,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  case class Header(
    name: String,
    `type`: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    required: Boolean,
    default: _root_.scala.Option[String] = None,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * An import is used to declare a dependency on another application. This allows
   * you to reference the models and or enums from that application in your own app.
   * @param application
   * @param organization
   * @param uri Full URI to the service.json file of the service we are importing
   * @param version The version of the service that we are importing
   * @param enums Models made available by this import
   * @param models Models made available by this import
   * @param unions Unions made available by this import
   * @param namespace the fully qualified namespace that we have imported
   */
  case class Import(
    uri: String,
    namespace: String,
    organization: io.apibuilder.spec.v0.models.Organization,
    application: io.apibuilder.spec.v0.models.Application,
    version: String,
    enums: Seq[String] = Nil,
    unions: Seq[String] = Nil,
    models: Seq[String] = Nil
  )

  /**
   * General metadata about this service
   */
  case class Info(
    license: _root_.scala.Option[io.apibuilder.spec.v0.models.License] = None,
    contact: _root_.scala.Option[io.apibuilder.spec.v0.models.Contact] = None
  )

  /**
   * Describes the software license contact for this service
   */
  case class License(
    name: String,
    url: _root_.scala.Option[String] = None
  )

  case class Model(
    name: String,
    plural: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    fields: Seq[io.apibuilder.spec.v0.models.Field],
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * @param method
   * @param body
   * @param path The full path to this operation, relative to the service's base url.
   * @param description
   * @param deprecation
   * @param attributes
   * @param parameters
   * @param responses
   */
  case class Operation(
    method: io.apibuilder.spec.v0.models.Method,
    path: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    body: _root_.scala.Option[io.apibuilder.spec.v0.models.Body] = None,
    parameters: Seq[io.apibuilder.spec.v0.models.Parameter] = Nil,
    responses: Seq[io.apibuilder.spec.v0.models.Response] = Nil,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * @param key Unique key identifying the organization that owns this service
   */
  case class Organization(
    key: String
  )

  case class Parameter(
    name: String,
    `type`: String,
    location: io.apibuilder.spec.v0.models.ParameterLocation,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    required: Boolean,
    default: _root_.scala.Option[String] = None,
    minimum: _root_.scala.Option[Long] = None,
    maximum: _root_.scala.Option[Long] = None,
    example: _root_.scala.Option[String] = None
  )

  /**
   * @param `type` The type of this resource will map to a defined model, enum, or
   * union type
   * @param operations
   * @param path The path to this specific resource. This was added in 2016 to help
   * us differentiate between the resource path and the operation path which can be
   * helpful when, for example, generating method names for operations. This field is
   * optional as some of our input formats (e.g. swagger) do not explicitly
   * differentiate resoure paths.
   * @param plural
   * @param description
   * @param deprecation
   * @param attributes
   */
  case class Resource(
    `type`: String,
    plural: String,
    path: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    operations: Seq[io.apibuilder.spec.v0.models.Operation],
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  case class Response(
    code: io.apibuilder.spec.v0.models.ResponseCode,
    `type`: String,
    headers: _root_.scala.Option[Seq[io.apibuilder.spec.v0.models.Header]] = None,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None
  )

  /**
   * @param application
   * @param organization
   * @param name
   * @param description
   * @param info
   * @param attributes
   * @param version
   * @param baseUrl
   * @param enums
   * @param resources
   * @param models
   * @param headers
   * @param apidoc Documents that this is an apibuilder document, noting the specific
   * version used. Internally the version is then used for backwards compatibility
   * when applicable as new features are added to apibuilder. Note naming refers to
   * the original name of this project, 'apidoc', and is left here to avoid a
   * breaking change for preexisting services.
   * @param unions
   * @param namespace Fully qualified namespace for this service
   * @param imports
   */
  case class Service(
    apidoc: io.apibuilder.spec.v0.models.Apidoc,
    name: String,
    organization: io.apibuilder.spec.v0.models.Organization,
    application: io.apibuilder.spec.v0.models.Application,
    namespace: String,
    version: String,
    baseUrl: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    info: io.apibuilder.spec.v0.models.Info,
    headers: Seq[io.apibuilder.spec.v0.models.Header] = Nil,
    imports: Seq[io.apibuilder.spec.v0.models.Import] = Nil,
    enums: Seq[io.apibuilder.spec.v0.models.Enum] = Nil,
    unions: Seq[io.apibuilder.spec.v0.models.Union] = Nil,
    models: Seq[io.apibuilder.spec.v0.models.Model] = Nil,
    resources: Seq[io.apibuilder.spec.v0.models.Resource] = Nil,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * @param name
   * @param plural
   * @param description
   * @param deprecation
   * @param discriminator If a type discriminator is provided, serialization of these
   * union types will always contain a field named with the value of the
   * discriminator that will contain the name of the type. This provides a simpler
   * (for many use cases) JSON serialization/deserialization mechanism. When
   * specified, apibuilder itself will verify that none of the types in the union
   * type itself contain a field with the same name as the discriminator
   * @param attributes
   * @param types The names of the types that make up this union type
   */
  case class Union(
    name: String,
    plural: String,
    discriminator: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    types: Seq[io.apibuilder.spec.v0.models.UnionType],
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil
  )

  /**
   * Metadata about one of the types that is part of a union type
   * @param `type` The name of a type (a primitive, model name, or enum name) that
   * makes up this union type
   * @param description
   * @param deprecation
   * @param attributes
   * @param default If true, indicates that this type should be used as the default
   * when deserializing union types. This field is only used by union types that
   * require a discriminator and sets the default value for that disciminator during
   * deserialization.
   */
  case class UnionType(
    `type`: String,
    description: _root_.scala.Option[String] = None,
    deprecation: _root_.scala.Option[io.apibuilder.spec.v0.models.Deprecation] = None,
    attributes: Seq[io.apibuilder.spec.v0.models.Attribute] = Nil,
    default: _root_.scala.Option[Boolean] = None
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ResponseCode, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * @param description Information about the type that we received that is undefined
   * in this version of the client.
   */
  case class ResponseCodeUndefinedType(
    description: String
  ) extends ResponseCode


  /**
   * Wrapper class to support the union types containing the datatype[integer]
   */
  case class ResponseCodeInt(
    value: Int
  ) extends ResponseCode

  sealed trait Method extends _root_.scala.Product with _root_.scala.Serializable

  object Method {

    case object Get extends Method { override def toString = "GET" }
    case object Post extends Method { override def toString = "POST" }
    case object Put extends Method { override def toString = "PUT" }
    case object Patch extends Method { override def toString = "PATCH" }
    case object Delete extends Method { override def toString = "DELETE" }
    case object Head extends Method { override def toString = "HEAD" }
    case object Connect extends Method { override def toString = "CONNECT" }
    case object Options extends Method { override def toString = "OPTIONS" }
    case object Trace extends Method { override def toString = "TRACE" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Method

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Method] = scala.List(Get, Post, Put, Patch, Delete, Head, Connect, Options, Trace)

    private[this]
    val byName: Map[String, Method] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Method = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Method] = byName.get(value.toLowerCase)

  }

  sealed trait ParameterLocation extends _root_.scala.Product with _root_.scala.Serializable

  object ParameterLocation {

    case object Path extends ParameterLocation { override def toString = "Path" }
    case object Query extends ParameterLocation { override def toString = "Query" }
    case object Form extends ParameterLocation { override def toString = "Form" }
    case object Header extends ParameterLocation { override def toString = "Header" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ParameterLocation

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ParameterLocation] = scala.List(Path, Query, Form, Header)

    private[this]
    val byName: Map[String, ParameterLocation] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ParameterLocation = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ParameterLocation] = byName.get(value.toLowerCase)

  }

  sealed trait ResponseCodeOption extends ResponseCode

  object ResponseCodeOption {

    case object Default extends ResponseCodeOption { override def toString = "Default" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ResponseCodeOption

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[ResponseCodeOption] = scala.List(Default)

    private[this]
    val byName: Map[String, ResponseCodeOption] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ResponseCodeOption = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ResponseCodeOption] = byName.get(value.toLowerCase)

  }

}

package io.apibuilder.spec.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.apibuilder.spec.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApibuilderspecMethod = new play.api.libs.json.Reads[io.apibuilder.spec.v0.models.Method] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.spec.v0.models.Method] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.Method(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.Method(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderspecMethod(obj: io.apibuilder.spec.v0.models.Method) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMethod(obj: io.apibuilder.spec.v0.models.Method) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderspecMethod: play.api.libs.json.Writes[Method] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Method] {
        def writes(obj: io.apibuilder.spec.v0.models.Method) = {
          jsonWritesApibuilderspecMethod(obj)
        }
      }
    }

    implicit val jsonReadsApibuilderspecParameterLocation = new play.api.libs.json.Reads[io.apibuilder.spec.v0.models.ParameterLocation] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.spec.v0.models.ParameterLocation] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.ParameterLocation(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.ParameterLocation(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderspecParameterLocation(obj: io.apibuilder.spec.v0.models.ParameterLocation) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectParameterLocation(obj: io.apibuilder.spec.v0.models.ParameterLocation) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderspecParameterLocation: play.api.libs.json.Writes[ParameterLocation] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.ParameterLocation] {
        def writes(obj: io.apibuilder.spec.v0.models.ParameterLocation) = {
          jsonWritesApibuilderspecParameterLocation(obj)
        }
      }
    }

    implicit val jsonReadsApibuilderspecResponseCodeOption = new play.api.libs.json.Reads[io.apibuilder.spec.v0.models.ResponseCodeOption] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.spec.v0.models.ResponseCodeOption] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.ResponseCodeOption(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.ResponseCodeOption(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderspecResponseCodeOption(obj: io.apibuilder.spec.v0.models.ResponseCodeOption) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectResponseCodeOption(obj: io.apibuilder.spec.v0.models.ResponseCodeOption) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderspecResponseCodeOption: play.api.libs.json.Writes[ResponseCodeOption] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.ResponseCodeOption] {
        def writes(obj: io.apibuilder.spec.v0.models.ResponseCodeOption) = {
          jsonWritesApibuilderspecResponseCodeOption(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecApidoc: play.api.libs.json.Reads[Apidoc] = {
      (__ \ "version").read[String].map { x => new Apidoc(version = x) }
    }

    def jsObjectApidoc(obj: io.apibuilder.spec.v0.models.Apidoc): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesApibuilderspecApidoc: play.api.libs.json.Writes[Apidoc] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Apidoc] {
        def writes(obj: io.apibuilder.spec.v0.models.Apidoc) = {
          jsObjectApidoc(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecApplication: play.api.libs.json.Reads[Application] = {
      (__ \ "key").read[String].map { x => new Application(key = x) }
    }

    def jsObjectApplication(obj: io.apibuilder.spec.v0.models.Application): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesApibuilderspecApplication: play.api.libs.json.Writes[Application] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Application] {
        def writes(obj: io.apibuilder.spec.v0.models.Application) = {
          jsObjectApplication(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecAttribute: play.api.libs.json.Reads[Attribute] = {
      (
        (__ \ "name").read[String] and
        (__ \ "value").read[_root_.play.api.libs.json.JsObject] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation]
      )(Attribute.apply _)
    }

    def jsObjectAttribute(obj: io.apibuilder.spec.v0.models.Attribute): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "value" -> obj.value
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecAttribute: play.api.libs.json.Writes[Attribute] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Attribute] {
        def writes(obj: io.apibuilder.spec.v0.models.Attribute) = {
          jsObjectAttribute(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecBody: play.api.libs.json.Reads[Body] = {
      (
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Body.apply _)
    }

    def jsObjectBody(obj: io.apibuilder.spec.v0.models.Body): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecBody: play.api.libs.json.Writes[Body] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Body] {
        def writes(obj: io.apibuilder.spec.v0.models.Body) = {
          jsObjectBody(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecContact: play.api.libs.json.Reads[Contact] = {
      (
        (__ \ "name").readNullable[String] and
        (__ \ "url").readNullable[String] and
        (__ \ "email").readNullable[String]
      )(Contact.apply _)
    }

    def jsObjectContact(obj: io.apibuilder.spec.v0.models.Contact): play.api.libs.json.JsObject = {
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.url match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("url" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecContact: play.api.libs.json.Writes[Contact] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Contact] {
        def writes(obj: io.apibuilder.spec.v0.models.Contact) = {
          jsObjectContact(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecDeprecation: play.api.libs.json.Reads[Deprecation] = {
      (__ \ "description").readNullable[String].map { x => new Deprecation(description = x) }
    }

    def jsObjectDeprecation(obj: io.apibuilder.spec.v0.models.Deprecation): play.api.libs.json.JsObject = {
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecDeprecation: play.api.libs.json.Writes[Deprecation] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Deprecation] {
        def writes(obj: io.apibuilder.spec.v0.models.Deprecation) = {
          jsObjectDeprecation(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecEnum: play.api.libs.json.Reads[Enum] = {
      (
        (__ \ "name").read[String] and
        (__ \ "plural").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "values").read[Seq[io.apibuilder.spec.v0.models.EnumValue]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Enum.apply _)
    }

    def jsObjectEnum(obj: io.apibuilder.spec.v0.models.Enum): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "plural" -> play.api.libs.json.JsString(obj.plural),
        "values" -> play.api.libs.json.Json.toJson(obj.values),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecEnum: play.api.libs.json.Writes[Enum] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Enum] {
        def writes(obj: io.apibuilder.spec.v0.models.Enum) = {
          jsObjectEnum(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecEnumValue: play.api.libs.json.Reads[EnumValue] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(EnumValue.apply _)
    }

    def jsObjectEnumValue(obj: io.apibuilder.spec.v0.models.EnumValue): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecEnumValue: play.api.libs.json.Writes[EnumValue] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.EnumValue] {
        def writes(obj: io.apibuilder.spec.v0.models.EnumValue) = {
          jsObjectEnumValue(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecField: play.api.libs.json.Reads[Field] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "default").readNullable[String] and
        (__ \ "required").read[Boolean] and
        (__ \ "minimum").readNullable[Long] and
        (__ \ "maximum").readNullable[Long] and
        (__ \ "example").readNullable[String] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Field.apply _)
    }

    def jsObjectField(obj: io.apibuilder.spec.v0.models.Field): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "required" -> play.api.libs.json.JsBoolean(obj.required),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      }) ++
      (obj.default match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.minimum match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("minimum" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maximum match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maximum" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.example match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("example" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecField: play.api.libs.json.Writes[Field] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Field] {
        def writes(obj: io.apibuilder.spec.v0.models.Field) = {
          jsObjectField(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecHeader: play.api.libs.json.Reads[Header] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "required").read[Boolean] and
        (__ \ "default").readNullable[String] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Header.apply _)
    }

    def jsObjectHeader(obj: io.apibuilder.spec.v0.models.Header): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "required" -> play.api.libs.json.JsBoolean(obj.required),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      }) ++
      (obj.default match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecHeader: play.api.libs.json.Writes[Header] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Header] {
        def writes(obj: io.apibuilder.spec.v0.models.Header) = {
          jsObjectHeader(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecImport: play.api.libs.json.Reads[Import] = {
      (
        (__ \ "uri").read[String] and
        (__ \ "namespace").read[String] and
        (__ \ "organization").read[io.apibuilder.spec.v0.models.Organization] and
        (__ \ "application").read[io.apibuilder.spec.v0.models.Application] and
        (__ \ "version").read[String] and
        (__ \ "enums").read[Seq[String]] and
        (__ \ "unions").read[Seq[String]] and
        (__ \ "models").read[Seq[String]]
      )(Import.apply _)
    }

    def jsObjectImport(obj: io.apibuilder.spec.v0.models.Import): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "uri" -> play.api.libs.json.JsString(obj.uri),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "organization" -> jsObjectOrganization(obj.organization),
        "application" -> jsObjectApplication(obj.application),
        "version" -> play.api.libs.json.JsString(obj.version),
        "enums" -> play.api.libs.json.Json.toJson(obj.enums),
        "unions" -> play.api.libs.json.Json.toJson(obj.unions),
        "models" -> play.api.libs.json.Json.toJson(obj.models)
      )
    }

    implicit def jsonWritesApibuilderspecImport: play.api.libs.json.Writes[Import] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Import] {
        def writes(obj: io.apibuilder.spec.v0.models.Import) = {
          jsObjectImport(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecInfo: play.api.libs.json.Reads[Info] = {
      (
        (__ \ "license").readNullable[io.apibuilder.spec.v0.models.License] and
        (__ \ "contact").readNullable[io.apibuilder.spec.v0.models.Contact]
      )(Info.apply _)
    }

    def jsObjectInfo(obj: io.apibuilder.spec.v0.models.Info): play.api.libs.json.JsObject = {
      (obj.license match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("license" -> jsObjectLicense(x))
      }) ++
      (obj.contact match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("contact" -> jsObjectContact(x))
      })
    }

    implicit def jsonWritesApibuilderspecInfo: play.api.libs.json.Writes[Info] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Info] {
        def writes(obj: io.apibuilder.spec.v0.models.Info) = {
          jsObjectInfo(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecLicense: play.api.libs.json.Reads[License] = {
      (
        (__ \ "name").read[String] and
        (__ \ "url").readNullable[String]
      )(License.apply _)
    }

    def jsObjectLicense(obj: io.apibuilder.spec.v0.models.License): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.url match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("url" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecLicense: play.api.libs.json.Writes[License] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.License] {
        def writes(obj: io.apibuilder.spec.v0.models.License) = {
          jsObjectLicense(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecModel: play.api.libs.json.Reads[Model] = {
      (
        (__ \ "name").read[String] and
        (__ \ "plural").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "fields").read[Seq[io.apibuilder.spec.v0.models.Field]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Model.apply _)
    }

    def jsObjectModel(obj: io.apibuilder.spec.v0.models.Model): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "plural" -> play.api.libs.json.JsString(obj.plural),
        "fields" -> play.api.libs.json.Json.toJson(obj.fields),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecModel: play.api.libs.json.Writes[Model] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Model] {
        def writes(obj: io.apibuilder.spec.v0.models.Model) = {
          jsObjectModel(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecOperation: play.api.libs.json.Reads[Operation] = {
      (
        (__ \ "method").read[io.apibuilder.spec.v0.models.Method] and
        (__ \ "path").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "body").readNullable[io.apibuilder.spec.v0.models.Body] and
        (__ \ "parameters").read[Seq[io.apibuilder.spec.v0.models.Parameter]] and
        (__ \ "responses").read[Seq[io.apibuilder.spec.v0.models.Response]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Operation.apply _)
    }

    def jsObjectOperation(obj: io.apibuilder.spec.v0.models.Operation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "method" -> play.api.libs.json.JsString(obj.method.toString),
        "path" -> play.api.libs.json.JsString(obj.path),
        "parameters" -> play.api.libs.json.Json.toJson(obj.parameters),
        "responses" -> play.api.libs.json.Json.toJson(obj.responses),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      }) ++
      (obj.body match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("body" -> jsObjectBody(x))
      })
    }

    implicit def jsonWritesApibuilderspecOperation: play.api.libs.json.Writes[Operation] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Operation] {
        def writes(obj: io.apibuilder.spec.v0.models.Operation) = {
          jsObjectOperation(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecOrganization: play.api.libs.json.Reads[Organization] = {
      (__ \ "key").read[String].map { x => new Organization(key = x) }
    }

    def jsObjectOrganization(obj: io.apibuilder.spec.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesApibuilderspecOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Organization] {
        def writes(obj: io.apibuilder.spec.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecParameter: play.api.libs.json.Reads[Parameter] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "location").read[io.apibuilder.spec.v0.models.ParameterLocation] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "required").read[Boolean] and
        (__ \ "default").readNullable[String] and
        (__ \ "minimum").readNullable[Long] and
        (__ \ "maximum").readNullable[Long] and
        (__ \ "example").readNullable[String]
      )(Parameter.apply _)
    }

    def jsObjectParameter(obj: io.apibuilder.spec.v0.models.Parameter): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "location" -> play.api.libs.json.JsString(obj.location.toString),
        "required" -> play.api.libs.json.JsBoolean(obj.required)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      }) ++
      (obj.default match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.minimum match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("minimum" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.maximum match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maximum" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.example match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("example" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecParameter: play.api.libs.json.Writes[Parameter] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Parameter] {
        def writes(obj: io.apibuilder.spec.v0.models.Parameter) = {
          jsObjectParameter(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecResource: play.api.libs.json.Reads[Resource] = {
      (
        (__ \ "type").read[String] and
        (__ \ "plural").read[String] and
        (__ \ "path").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "operations").read[Seq[io.apibuilder.spec.v0.models.Operation]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Resource.apply _)
    }

    def jsObjectResource(obj: io.apibuilder.spec.v0.models.Resource): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "plural" -> play.api.libs.json.JsString(obj.plural),
        "operations" -> play.api.libs.json.Json.toJson(obj.operations),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.path match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("path" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecResource: play.api.libs.json.Writes[Resource] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Resource] {
        def writes(obj: io.apibuilder.spec.v0.models.Resource) = {
          jsObjectResource(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecResponse: play.api.libs.json.Reads[Response] = {
      (
        (__ \ "code").read[io.apibuilder.spec.v0.models.ResponseCode] and
        (__ \ "type").read[String] and
        (__ \ "headers").readNullable[Seq[io.apibuilder.spec.v0.models.Header]] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation]
      )(Response.apply _)
    }

    def jsObjectResponse(obj: io.apibuilder.spec.v0.models.Response): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> jsObjectResponseCode(obj.code),
        "type" -> play.api.libs.json.JsString(obj.`type`)
      ) ++ (obj.headers match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("headers" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecResponse: play.api.libs.json.Writes[Response] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Response] {
        def writes(obj: io.apibuilder.spec.v0.models.Response) = {
          jsObjectResponse(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecService: play.api.libs.json.Reads[Service] = {
      (
        (__ \ "apidoc").read[io.apibuilder.spec.v0.models.Apidoc] and
        (__ \ "name").read[String] and
        (__ \ "organization").read[io.apibuilder.spec.v0.models.Organization] and
        (__ \ "application").read[io.apibuilder.spec.v0.models.Application] and
        (__ \ "namespace").read[String] and
        (__ \ "version").read[String] and
        (__ \ "base_url").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "info").read[io.apibuilder.spec.v0.models.Info] and
        (__ \ "headers").read[Seq[io.apibuilder.spec.v0.models.Header]] and
        (__ \ "imports").read[Seq[io.apibuilder.spec.v0.models.Import]] and
        (__ \ "enums").read[Seq[io.apibuilder.spec.v0.models.Enum]] and
        (__ \ "unions").read[Seq[io.apibuilder.spec.v0.models.Union]] and
        (__ \ "models").read[Seq[io.apibuilder.spec.v0.models.Model]] and
        (__ \ "resources").read[Seq[io.apibuilder.spec.v0.models.Resource]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Service.apply _)
    }

    def jsObjectService(obj: io.apibuilder.spec.v0.models.Service): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "apidoc" -> jsObjectApidoc(obj.apidoc),
        "name" -> play.api.libs.json.JsString(obj.name),
        "organization" -> jsObjectOrganization(obj.organization),
        "application" -> jsObjectApplication(obj.application),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "version" -> play.api.libs.json.JsString(obj.version),
        "info" -> jsObjectInfo(obj.info),
        "headers" -> play.api.libs.json.Json.toJson(obj.headers),
        "imports" -> play.api.libs.json.Json.toJson(obj.imports),
        "enums" -> play.api.libs.json.Json.toJson(obj.enums),
        "unions" -> play.api.libs.json.Json.toJson(obj.unions),
        "models" -> play.api.libs.json.Json.toJson(obj.models),
        "resources" -> play.api.libs.json.Json.toJson(obj.resources),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.baseUrl match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("base_url" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderspecService: play.api.libs.json.Writes[Service] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Service] {
        def writes(obj: io.apibuilder.spec.v0.models.Service) = {
          jsObjectService(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecUnion: play.api.libs.json.Reads[Union] = {
      (
        (__ \ "name").read[String] and
        (__ \ "plural").read[String] and
        (__ \ "discriminator").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "types").read[Seq[io.apibuilder.spec.v0.models.UnionType]] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]]
      )(Union.apply _)
    }

    def jsObjectUnion(obj: io.apibuilder.spec.v0.models.Union): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "plural" -> play.api.libs.json.JsString(obj.plural),
        "types" -> play.api.libs.json.Json.toJson(obj.types),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.discriminator match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("discriminator" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      })
    }

    implicit def jsonWritesApibuilderspecUnion: play.api.libs.json.Writes[Union] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.Union] {
        def writes(obj: io.apibuilder.spec.v0.models.Union) = {
          jsObjectUnion(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecUnionType: play.api.libs.json.Reads[UnionType] = {
      (
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "deprecation").readNullable[io.apibuilder.spec.v0.models.Deprecation] and
        (__ \ "attributes").read[Seq[io.apibuilder.spec.v0.models.Attribute]] and
        (__ \ "default").readNullable[Boolean]
      )(UnionType.apply _)
    }

    def jsObjectUnionType(obj: io.apibuilder.spec.v0.models.UnionType): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.deprecation match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deprecation" -> jsObjectDeprecation(x))
      }) ++
      (obj.default match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("default" -> play.api.libs.json.JsBoolean(x))
      })
    }

    implicit def jsonWritesApibuilderspecUnionType: play.api.libs.json.Writes[UnionType] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.UnionType] {
        def writes(obj: io.apibuilder.spec.v0.models.UnionType) = {
          jsObjectUnionType(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderspecResponseCodeInt: play.api.libs.json.Reads[ResponseCodeInt] = {
      (__ \ "value").read[Int].map { x => new ResponseCodeInt(value = x) }
    }

    implicit def jsonReadsApibuilderspecResponseCode: play.api.libs.json.Reads[ResponseCode] = {
      (
        (__ \ "integer").read(jsonReadsApibuilderspecResponseCodeInt).asInstanceOf[play.api.libs.json.Reads[ResponseCode]]
        orElse
        (__ \ "response_code_option").read(jsonReadsApibuilderspecResponseCodeOption).asInstanceOf[play.api.libs.json.Reads[ResponseCode]]
        orElse
        play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(io.apibuilder.spec.v0.models.ResponseCodeUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[ResponseCode]]
      )
    }

    def jsObjectResponseCode(obj: io.apibuilder.spec.v0.models.ResponseCode): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.spec.v0.models.ResponseCodeInt => play.api.libs.json.Json.obj("integer" -> play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsNumber(x.value)))
        case x: io.apibuilder.spec.v0.models.ResponseCodeOption => play.api.libs.json.Json.obj("response_code_option" -> play.api.libs.json.JsString(x.toString))
        case x: io.apibuilder.spec.v0.models.ResponseCodeUndefinedType => sys.error(s"The type[io.apibuilder.spec.v0.models.ResponseCodeUndefinedType] should never be serialized")
      }
    }

    implicit def jsonWritesApibuilderspecResponseCode: play.api.libs.json.Writes[ResponseCode] = {
      new play.api.libs.json.Writes[io.apibuilder.spec.v0.models.ResponseCode] {
        def writes(obj: io.apibuilder.spec.v0.models.ResponseCode) = {
          jsObjectResponseCode(obj)
        }
      }
    }
  }
}

package io.apibuilder.spec.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.apibuilder.spec.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Method
    private[this] val enumMethodNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.spec.v0.models.Method.all.mkString(", ")}"

    implicit val pathBindableEnumMethod = new PathBindable.Parsing[io.apibuilder.spec.v0.models.Method] (
      Method.fromString(_).get, _.toString, enumMethodNotFound
    )

    implicit val queryStringBindableEnumMethod = new QueryStringBindable.Parsing[io.apibuilder.spec.v0.models.Method](
      Method.fromString(_).get, _.toString, enumMethodNotFound
    )

    // Enum: ParameterLocation
    private[this] val enumParameterLocationNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.spec.v0.models.ParameterLocation.all.mkString(", ")}"

    implicit val pathBindableEnumParameterLocation = new PathBindable.Parsing[io.apibuilder.spec.v0.models.ParameterLocation] (
      ParameterLocation.fromString(_).get, _.toString, enumParameterLocationNotFound
    )

    implicit val queryStringBindableEnumParameterLocation = new QueryStringBindable.Parsing[io.apibuilder.spec.v0.models.ParameterLocation](
      ParameterLocation.fromString(_).get, _.toString, enumParameterLocationNotFound
    )

    // Enum: ResponseCodeOption
    private[this] val enumResponseCodeOptionNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.spec.v0.models.ResponseCodeOption.all.mkString(", ")}"

    implicit val pathBindableEnumResponseCodeOption = new PathBindable.Parsing[io.apibuilder.spec.v0.models.ResponseCodeOption] (
      ResponseCodeOption.fromString(_).get, _.toString, enumResponseCodeOptionNotFound
    )

    implicit val queryStringBindableEnumResponseCodeOption = new QueryStringBindable.Parsing[io.apibuilder.spec.v0.models.ResponseCodeOption](
      ResponseCodeOption.fromString(_).get, _.toString, enumResponseCodeOptionNotFound
    )

  }

}


package io.apibuilder.spec.v0 {

  object Constants {

    val Namespace = "io.apibuilder.spec.v0"
    val UserAgent = "apibuilder:0.12.38 https://app.apibuilder.io/apicollective/apibuilder-spec/0.12.24/play_2_4_client"
    val Version = "0.12.24"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[io.apibuilder.spec.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.apibuilder.spec.v0.models.json._

    private[this] val logger = play.api.Logger("io.apibuilder.spec.v0.Client")

    logger.info(s"Initializing io.apibuilder.spec.v0.Client for url $baseUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.apibuilder.spec.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String

    }

  }



  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}