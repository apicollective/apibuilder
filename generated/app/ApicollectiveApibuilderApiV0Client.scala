/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.13.7
 * apibuilder:0.13.0 https://app.apibuilder.io/apicollective/apibuilder-api/0.13.7/play_2_4_client
 */
package io.apibuilder.api.v0.models {

  /**
   * Represents a single diff in an application
   */
  sealed trait Diff extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid type values for the type Diff
   */
  sealed trait DiffType extends _root_.scala.Product with _root_.scala.Serializable

  object DiffType {

    case object DiffBreaking extends DiffType { override def toString = "diff_breaking" }
    case object DiffNonBreaking extends DiffType { override def toString = "diff_non_breaking" }

    case class UNDEFINED(override val toString: String) extends DiffType

    val all: scala.List[DiffType] = scala.List(DiffBreaking, DiffNonBreaking)

    private[this] val byName: Map[String, DiffType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DiffType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DiffType] = byName.get(value.toLowerCase)

  }

  /**
   * Identifies the specific type of item that was indexed by search
   */
  sealed trait ItemDetail extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid type values for the type ItemDetail
   */
  sealed trait ItemDetailType extends _root_.scala.Product with _root_.scala.Serializable

  object ItemDetailType {

    /**
     * Represents that the item indexed was an application
     */
    case object ApplicationSummary extends ItemDetailType { override def toString = "application_summary" }

    case class UNDEFINED(override val toString: String) extends ItemDetailType

    val all: scala.List[ItemDetailType] = scala.List(ApplicationSummary)

    private[this] val byName: Map[String, ItemDetailType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ItemDetailType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ItemDetailType] = byName.get(value.toLowerCase)

  }

  /**
   * An application has a name and multiple versions of its API.
   * 
   * @param guid Internal unique identifier for this application.
   * @param name The unique name for this application.
   * @param key Used as a unique key in the URL path. Key is automatically derived from the
   *        application name.
   * @param visibility Controls who is able to view this application
   */
  case class Application(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.common.v0.models.Reference,
    name: String,
    key: String,
    visibility: io.apibuilder.api.v0.models.Visibility,
    description: _root_.scala.Option[String] = None,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param key Defaults to a key generated from the application name
   */
  case class ApplicationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    visibility: io.apibuilder.api.v0.models.Visibility
  )

  /**
   * @param guid Internal unique identifier for this application.
   * @param key Used as a unique key in the URL path. Key is automatically derived from the
   *        application name.
   */
  case class ApplicationMetadata(
    guid: _root_.java.util.UUID,
    key: String
  )

  /**
   * Describes the versions associated with a given application
   */
  case class ApplicationMetadataVersion(
    version: String
  )

  /**
   * Summary of an application sufficient for display and links
   */
  case class ApplicationSummary(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.common.v0.models.Reference,
    key: String
  ) extends ItemDetail

  /**
   * Attributes are globally unique key which allow users to specify additional
   * content to pass in to the code generators.
   * 
   * @param guid Internal unique identifier for this attribute.
   * @param name The name of the attribute. Globally unique and an 'identifier' (lower case, url
   *        safe, etc.)
   * @param description Optional description - a good description here will indicate which code
   *        generators it applies to and what effect it will have on those code generators.
   */
  case class Attribute(
    guid: _root_.java.util.UUID,
    name: String,
    description: _root_.scala.Option[String] = None,
    audit: io.apibuilder.common.v0.models.Audit
  )

  case class AttributeForm(
    name: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * @param guid Internal unique identifier for this attribute.
   * @param name The name of the attribute. Globally unique and an 'identifier' (lower case, url
   *        safe, etc.)
   */
  case class AttributeSummary(
    guid: _root_.java.util.UUID,
    name: String
  )

  /**
   * Attribute values can be set at different levels. Initially we support setting
   * organization wide attributes, but in the future plan to support setting
   * attribute values with each version of the application.
   * 
   * @param guid Internal unique identifier for this attribute value.
   */
  case class AttributeValue(
    guid: _root_.java.util.UUID,
    attribute: io.apibuilder.api.v0.models.AttributeSummary,
    value: String,
    audit: io.apibuilder.common.v0.models.Audit
  )

  case class AttributeValueForm(
    value: String
  )

  /**
   * Represents the result of a successful authorization
   */
  case class Authentication(
    user: io.apibuilder.api.v0.models.User,
    session: io.apibuilder.api.v0.models.Session
  )

  /**
   * Represents a single change from one version of a service to another
   * 
   * @param changedAt Records the timestamp of when the actual change occurred (vs. when we created
   *        the changed record)
   * @param changedBy Records who made the actual change
   */
  case class Change(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.common.v0.models.Reference,
    application: io.apibuilder.common.v0.models.Reference,
    fromVersion: io.apibuilder.api.v0.models.ChangeVersion,
    toVersion: io.apibuilder.api.v0.models.ChangeVersion,
    diff: io.apibuilder.api.v0.models.Diff,
    changedAt: _root_.org.joda.time.DateTime,
    changedBy: io.apibuilder.api.v0.models.UserSummary,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * Represents a simpler model of a version specifically for the use case of
   * displaying changes
   */
  case class ChangeVersion(
    guid: _root_.java.util.UUID,
    version: String
  )

  /**
   * Separate resource used only for the few actions that require the full token.
   * 
   * @param token The actual token. Guaranteed to be globally unique.
   */
  case class CleartextToken(
    token: String
  )

  /**
   * Generated source code.
   * 
   * @param source The actual source code.
   * @param files A collection of source files
   */
  case class Code(
    generator: io.apibuilder.api.v0.models.GeneratorWithService,
    @deprecated("Use files instead") source: String,
    files: Seq[io.apibuilder.generator.v0.models.File] = Nil
  )

  /**
   * Represents a single breaking diff of an application version. A breaking diff
   * indicates that it is possible for an existing client to now experience an error
   * or invalid data due to the diff.
   */
  case class DiffBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single NON breaking diff of an application version.
   */
  case class DiffNonBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single domain name (e.g. www.apibuilder.io). When a new user
   * registers and confirms their email, we automatically associate that user with a
   * member of the organization associated with their domain. For example, if you
   * confirm your account with an email address of example@somedomain.com, we will
   * automatically create a membership request on your behalf to join the
   * organization with domain somedomain.com.
   * 
   * @param name The domain name
   */
  case class Domain(
    name: String
  )

  /**
   * Data used to confirm an email address. The token is an internal unique
   * identifier used to lookup the specific email address and user account for which
   * we sent an email verification email.
   */
  case class EmailVerificationConfirmationForm(
    token: String
  )

  /**
   * @param code Machine readable code for this specific error message
   * @param message Description of the error
   */
  case class Error(
    code: String,
    message: String
  )

  case class GeneratorForm(
    serviceGuid: _root_.java.util.UUID,
    generator: io.apibuilder.generator.v0.models.Generator
  )

  /**
   * Defines a service that provides one or more code generators
   */
  case class GeneratorService(
    guid: _root_.java.util.UUID,
    uri: String,
    audit: io.apibuilder.common.v0.models.Audit
  )

  case class GeneratorServiceForm(
    uri: String
  )

  /**
   * Wraps a service and a generator providing easier access for applications.
   */
  case class GeneratorWithService(
    service: io.apibuilder.api.v0.models.GeneratorService,
    generator: io.apibuilder.generator.v0.models.Generator
  )

  /**
   * When searching for content, the results of the search will be a list of items.
   * Each item will have enough information to render for the user, including a type
   * and item_guid to enable creating the appropriate link.
   * 
   * @param guid Unique identifer for this item. By using a UUID, you can combine with the type
   *        to figure out the URI for the resource
   */
  case class Item(
    guid: _root_.java.util.UUID,
    detail: io.apibuilder.api.v0.models.ItemDetail,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A membership represents a user in a specific role to an organization.
   * Memberships cannot be created directly. Instead you first create a membership
   * request, then that request is either accepted or declined.
   * 
   * @param guid Internal unique identifier for this membership.
   * @param role The role this user plays for this organization. Typically member or admin.
   */
  case class Membership(
    guid: _root_.java.util.UUID,
    user: io.apibuilder.api.v0.models.User,
    organization: io.apibuilder.api.v0.models.Organization,
    role: String,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * A membership request represents a user requesting to join an organization with a
   * specific role (e.g. as a member or an admin). Membership requests can be
   * reviewed by any current admin of the organization who can either accept or
   * decline the request.
   * 
   * @param guid Internal unique identifier for this membership request.
   * @param role The requested role for membership to this organization. Typically member or
   *        admin.
   */
  case class MembershipRequest(
    guid: _root_.java.util.UUID,
    user: io.apibuilder.api.v0.models.User,
    organization: io.apibuilder.api.v0.models.Organization,
    role: String,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param orgKey The key of the organization to which we are moving this item
   */
  case class MoveForm(
    orgKey: String
  )

  /**
   * An organization is used to group a set of applications together.
   * 
   * @param guid Internal unique identifier for this organization.
   * @param key Used as a unique key in the URL path. Key is automatically derived from the
   *        organization name.
   * @param name The name of this organization.
   * @param namespace Global namespace for this organization.
   */
  case class Organization(
    guid: _root_.java.util.UUID,
    key: String,
    name: String,
    namespace: String,
    visibility: io.apibuilder.api.v0.models.Visibility,
    domains: Seq[io.apibuilder.api.v0.models.Domain] = Nil,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param key Defaults to a url friendy version of the name
   * @param namespace Global namespace for this organization.
   * @param visibility Public organizations will be listed in apibuilder directory. Organizations with
   *        visibility organization will only be visible to members of that org.
   */
  case class OrganizationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    namespace: String,
    visibility: io.apibuilder.api.v0.models.Visibility = io.apibuilder.api.v0.models.Visibility.Organization,
    domains: _root_.scala.Option[Seq[String]] = None
  )

  /**
   * Represents the original input used to create an application version
   */
  case class Original(
    `type`: io.apibuilder.api.v0.models.OriginalType,
    data: String
  )

  /**
   * @param `type` If not specified, we set the type by inspecting the data
   */
  case class OriginalForm(
    `type`: _root_.scala.Option[io.apibuilder.api.v0.models.OriginalType] = None,
    data: String
  )

  /**
   * Allows a user to change their password with authentication from a token.
   * 
   * @param token Unique one time use token to change a password
   */
  case class PasswordReset(
    token: String,
    password: String
  )

  /**
   * Create a password reset request - e.g. an email containing a one time URL to
   * change a password
   * 
   * @param email The email address for which we generate the password reset.
   */
  case class PasswordResetRequest(
    email: String
  )

  /**
   * Represents a user sessions (e.g. user logged into site)
   * 
   * @param id Cryptographically secure session id
   */
  case class Session(
    id: String,
    expiresAt: _root_.org.joda.time.DateTime
  )

  /**
   * Represents a user that is currently subscribed to a publication
   * 
   * @param guid Internal unique identifier for this subscription record
   */
  case class Subscription(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.api.v0.models.Organization,
    user: io.apibuilder.api.v0.models.User,
    publication: io.apibuilder.api.v0.models.Publication,
    audit: io.apibuilder.common.v0.models.Audit
  )

  case class SubscriptionForm(
    organizationKey: String,
    userGuid: _root_.java.util.UUID,
    publication: io.apibuilder.api.v0.models.Publication
  )

  /**
   * A token gives a user access to the API.
   * 
   * @param guid Internal unique identifier for this token.
   * @param user The user to which this token belongs.
   * @param maskedToken The masked from of the token.
   * @param description optional description to help the user manage the token.
   */
  case class Token(
    guid: _root_.java.util.UUID,
    user: io.apibuilder.api.v0.models.User,
    maskedToken: String,
    description: _root_.scala.Option[String] = None,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param userGuid The user for which we are creating the token.
   */
  case class TokenForm(
    userGuid: _root_.java.util.UUID,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A user is a top level person interacting with the api doc server.
   * 
   * @param guid Internal unique identifier for this user.
   * @param nickname Public unique identifier for this user.
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param nickname Defaults to a unique identifier based on email address
   */
  case class UserForm(
    email: String,
    password: String,
    nickname: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Summary of a user sufficient for display
   */
  case class UserSummary(
    guid: _root_.java.util.UUID,
    nickname: String
  )

  case class UserUpdateForm(
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Used only to validate json files - used as a resource where http status code
   * defines success
   * 
   * @param valid If true, the json schema is valid. If false, there is at least one validation
   *        error.
   * @param errors Contains any validation errors that result from parsing the json document. If
   *        empty, the document is valid.
   */
  case class Validation(
    valid: Boolean,
    errors: Seq[String] = Nil
  )

  /**
   * Represents a unique version of the application.
   * 
   * @param guid Internal unique identifier for this version.
   * @param version The tag for this version. Can be anything, but if semver style version number is
   *        used, we automatically correctly sort by version number to find latest.
   *        Otherwise latest version is considered to be the most recently created.
   * @param original The original uploaded file describing this version, if available
   * @param service spec/spec.json description of this API
   */
  case class Version(
    guid: _root_.java.util.UUID,
    organization: io.apibuilder.common.v0.models.Reference,
    application: io.apibuilder.common.v0.models.Reference,
    version: String,
    original: _root_.scala.Option[io.apibuilder.api.v0.models.Original] = None,
    service: io.apibuilder.spec.v0.models.Service,
    audit: io.apibuilder.common.v0.models.Audit
  )

  /**
   * @param visibility If provided, updates the visibility for all versions of this application
   */
  case class VersionForm(
    originalForm: io.apibuilder.api.v0.models.OriginalForm,
    visibility: _root_.scala.Option[io.apibuilder.api.v0.models.Visibility] = None
  )

  /**
   * Users can watch individual applications which enables features like receiving an
   * email notification when there is a new version of an application.
   * 
   * @param guid Internal unique identifier for this watch
   */
  case class Watch(
    guid: _root_.java.util.UUID,
    user: io.apibuilder.api.v0.models.User,
    organization: io.apibuilder.api.v0.models.Organization,
    application: io.apibuilder.api.v0.models.Application,
    audit: io.apibuilder.common.v0.models.Audit
  )

  case class WatchForm(
    userGuid: _root_.java.util.UUID,
    organizationKey: String,
    applicationKey: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Diff, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class DiffUndefinedType(
    description: String
  ) extends Diff

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemDetail, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class ItemDetailUndefinedType(
    description: String
  ) extends ItemDetail

  sealed trait OriginalType extends _root_.scala.Product with _root_.scala.Serializable

  object OriginalType {

    /**
     * The original is in the api.json format
     */
    case object ApiJson extends OriginalType { override def toString = "api_json" }
    /**
     * The original is in Avro Idl format
     */
    case object AvroIdl extends OriginalType { override def toString = "avro_idl" }
    /**
     * This is the canonical service spec for apibuilder itself. See
     * https://www.apibuilder.io/apicollective/apibuilder-spec/latest#model-service
     */
    case object ServiceJson extends OriginalType { override def toString = "service_json" }
    /**
     * The original in the Swagger JSON or YAML format
     */
    case object Swagger extends OriginalType { override def toString = "swagger" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends OriginalType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[OriginalType] = scala.List(ApiJson, AvroIdl, ServiceJson, Swagger)

    private[this]
    val byName: Map[String, OriginalType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OriginalType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OriginalType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing to an email alert whenever a new version of an application
   * is created.
   */
  sealed trait Publication extends _root_.scala.Product with _root_.scala.Serializable

  object Publication {

    /**
     * For organizations for which I am an administrator, email me whenever a user
     * applies to join the org.
     */
    case object MembershipRequestsCreate extends Publication { override def toString = "membership_requests.create" }
    /**
     * For organizations for which I am a member, email me whenever a user joins the
     * org.
     */
    case object MembershipsCreate extends Publication { override def toString = "memberships.create" }
    /**
     * For organizations for which I am a member, email me whenever an application is
     * created.
     */
    case object ApplicationsCreate extends Publication { override def toString = "applications.create" }
    /**
     * For applications that I watch, email me whenever a version is created.
     */
    case object VersionsCreate extends Publication { override def toString = "versions.create" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Publication] = scala.List(MembershipRequestsCreate, MembershipsCreate, ApplicationsCreate, VersionsCreate)

    private[this]
    val byName: Map[String, Publication] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  /**
   * Controls who is able to view this version
   */
  sealed trait Visibility extends _root_.scala.Product with _root_.scala.Serializable

  object Visibility {

    /**
     * Only the creator can view this application
     */
    case object User extends Visibility { override def toString = "user" }
    /**
     * Any member of the organization can view this application
     */
    case object Organization extends Visibility { override def toString = "organization" }
    /**
     * Anybody, including non logged in users, can view this application
     */
    case object Public extends Visibility { override def toString = "public" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Visibility] = scala.List(User, Organization, Public)

    private[this]
    val byName: Map[String, Visibility] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.apibuilder.api.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.apibuilder.api.v0.models.json._
    import io.apibuilder.common.v0.models.json._
    import io.apibuilder.generator.v0.models.json._
    import io.apibuilder.spec.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApibuilderapiOriginalType = new play.api.libs.json.Reads[io.apibuilder.api.v0.models.OriginalType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.api.v0.models.OriginalType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.OriginalType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.OriginalType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderapiOriginalType(obj: io.apibuilder.api.v0.models.OriginalType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOriginalType(obj: io.apibuilder.api.v0.models.OriginalType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderapiOriginalType: play.api.libs.json.Writes[OriginalType] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.OriginalType] {
        def writes(obj: io.apibuilder.api.v0.models.OriginalType) = {
          jsonWritesApibuilderapiOriginalType(obj)
        }
      }
    }

    implicit val jsonReadsApibuilderapiPublication = new play.api.libs.json.Reads[io.apibuilder.api.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.api.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.Publication(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderapiPublication(obj: io.apibuilder.api.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: io.apibuilder.api.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderapiPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Publication] {
        def writes(obj: io.apibuilder.api.v0.models.Publication) = {
          jsonWritesApibuilderapiPublication(obj)
        }
      }
    }

    implicit val jsonReadsApibuilderapiVisibility = new play.api.libs.json.Reads[io.apibuilder.api.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.apibuilder.api.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApibuilderapiVisibility(obj: io.apibuilder.api.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.apibuilder.api.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApibuilderapiVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Visibility] {
        def writes(obj: io.apibuilder.api.v0.models.Visibility) = {
          jsonWritesApibuilderapiVisibility(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiApplication: play.api.libs.json.Reads[Application] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "name").read[String] and
        (__ \ "key").read[String] and
        (__ \ "visibility").read[io.apibuilder.api.v0.models.Visibility] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Application.apply _)
    }

    def jsObjectApplication(obj: io.apibuilder.api.v0.models.Application): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "key" -> play.api.libs.json.JsString(obj.key),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiApplication: play.api.libs.json.Writes[Application] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Application] {
        def writes(obj: io.apibuilder.api.v0.models.Application) = {
          jsObjectApplication(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiApplicationForm: play.api.libs.json.Reads[ApplicationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "visibility").read[io.apibuilder.api.v0.models.Visibility]
      )(ApplicationForm.apply _)
    }

    def jsObjectApplicationForm(obj: io.apibuilder.api.v0.models.ApplicationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiApplicationForm: play.api.libs.json.Writes[ApplicationForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.ApplicationForm] {
        def writes(obj: io.apibuilder.api.v0.models.ApplicationForm) = {
          jsObjectApplicationForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiApplicationMetadata: play.api.libs.json.Reads[ApplicationMetadata] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String]
      )(ApplicationMetadata.apply _)
    }

    def jsObjectApplicationMetadata(obj: io.apibuilder.api.v0.models.ApplicationMetadata): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonWritesApibuilderapiApplicationMetadata: play.api.libs.json.Writes[ApplicationMetadata] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.ApplicationMetadata] {
        def writes(obj: io.apibuilder.api.v0.models.ApplicationMetadata) = {
          jsObjectApplicationMetadata(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiApplicationMetadataVersion: play.api.libs.json.Reads[ApplicationMetadataVersion] = {
      (__ \ "version").read[String].map { x => new ApplicationMetadataVersion(version = x) }
    }

    def jsObjectApplicationMetadataVersion(obj: io.apibuilder.api.v0.models.ApplicationMetadataVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesApibuilderapiApplicationMetadataVersion: play.api.libs.json.Writes[ApplicationMetadataVersion] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.ApplicationMetadataVersion] {
        def writes(obj: io.apibuilder.api.v0.models.ApplicationMetadataVersion) = {
          jsObjectApplicationMetadataVersion(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiApplicationSummary: play.api.libs.json.Reads[ApplicationSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "key").read[String]
      )(ApplicationSummary.apply _)
    }

    def jsObjectApplicationSummary(obj: io.apibuilder.api.v0.models.ApplicationSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonReadsApibuilderapiAttribute: play.api.libs.json.Reads[Attribute] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Attribute.apply _)
    }

    def jsObjectAttribute(obj: io.apibuilder.api.v0.models.Attribute): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiAttribute: play.api.libs.json.Writes[Attribute] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Attribute] {
        def writes(obj: io.apibuilder.api.v0.models.Attribute) = {
          jsObjectAttribute(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiAttributeForm: play.api.libs.json.Reads[AttributeForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String]
      )(AttributeForm.apply _)
    }

    def jsObjectAttributeForm(obj: io.apibuilder.api.v0.models.AttributeForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiAttributeForm: play.api.libs.json.Writes[AttributeForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.AttributeForm] {
        def writes(obj: io.apibuilder.api.v0.models.AttributeForm) = {
          jsObjectAttributeForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiAttributeSummary: play.api.libs.json.Reads[AttributeSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "name").read[String]
      )(AttributeSummary.apply _)
    }

    def jsObjectAttributeSummary(obj: io.apibuilder.api.v0.models.AttributeSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApibuilderapiAttributeSummary: play.api.libs.json.Writes[AttributeSummary] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.AttributeSummary] {
        def writes(obj: io.apibuilder.api.v0.models.AttributeSummary) = {
          jsObjectAttributeSummary(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiAttributeValue: play.api.libs.json.Reads[AttributeValue] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "attribute").read[io.apibuilder.api.v0.models.AttributeSummary] and
        (__ \ "value").read[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(AttributeValue.apply _)
    }

    def jsObjectAttributeValue(obj: io.apibuilder.api.v0.models.AttributeValue): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "attribute" -> jsObjectAttributeSummary(obj.attribute),
        "value" -> play.api.libs.json.JsString(obj.value),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiAttributeValue: play.api.libs.json.Writes[AttributeValue] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.AttributeValue] {
        def writes(obj: io.apibuilder.api.v0.models.AttributeValue) = {
          jsObjectAttributeValue(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiAttributeValueForm: play.api.libs.json.Reads[AttributeValueForm] = {
      (__ \ "value").read[String].map { x => new AttributeValueForm(value = x) }
    }

    def jsObjectAttributeValueForm(obj: io.apibuilder.api.v0.models.AttributeValueForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesApibuilderapiAttributeValueForm: play.api.libs.json.Writes[AttributeValueForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.AttributeValueForm] {
        def writes(obj: io.apibuilder.api.v0.models.AttributeValueForm) = {
          jsObjectAttributeValueForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiAuthentication: play.api.libs.json.Reads[Authentication] = {
      (
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "session").read[io.apibuilder.api.v0.models.Session]
      )(Authentication.apply _)
    }

    def jsObjectAuthentication(obj: io.apibuilder.api.v0.models.Authentication): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user" -> jsObjectUser(obj.user),
        "session" -> jsObjectSession(obj.session)
      )
    }

    implicit def jsonWritesApibuilderapiAuthentication: play.api.libs.json.Writes[Authentication] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Authentication] {
        def writes(obj: io.apibuilder.api.v0.models.Authentication) = {
          jsObjectAuthentication(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiChange: play.api.libs.json.Reads[Change] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "application").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "from_version").read[io.apibuilder.api.v0.models.ChangeVersion] and
        (__ \ "to_version").read[io.apibuilder.api.v0.models.ChangeVersion] and
        (__ \ "diff").read[io.apibuilder.api.v0.models.Diff] and
        (__ \ "changed_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "changed_by").read[io.apibuilder.api.v0.models.UserSummary] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Change.apply _)
    }

    def jsObjectChange(obj: io.apibuilder.api.v0.models.Change): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.application),
        "from_version" -> jsObjectChangeVersion(obj.fromVersion),
        "to_version" -> jsObjectChangeVersion(obj.toVersion),
        "diff" -> jsObjectDiff(obj.diff),
        "changed_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.changedAt)),
        "changed_by" -> jsObjectUserSummary(obj.changedBy),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiChange: play.api.libs.json.Writes[Change] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Change] {
        def writes(obj: io.apibuilder.api.v0.models.Change) = {
          jsObjectChange(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiChangeVersion: play.api.libs.json.Reads[ChangeVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "version").read[String]
      )(ChangeVersion.apply _)
    }

    def jsObjectChangeVersion(obj: io.apibuilder.api.v0.models.ChangeVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesApibuilderapiChangeVersion: play.api.libs.json.Writes[ChangeVersion] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.ChangeVersion] {
        def writes(obj: io.apibuilder.api.v0.models.ChangeVersion) = {
          jsObjectChangeVersion(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiCleartextToken: play.api.libs.json.Reads[CleartextToken] = {
      (__ \ "token").read[String].map { x => new CleartextToken(token = x) }
    }

    def jsObjectCleartextToken(obj: io.apibuilder.api.v0.models.CleartextToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApibuilderapiCleartextToken: play.api.libs.json.Writes[CleartextToken] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.CleartextToken] {
        def writes(obj: io.apibuilder.api.v0.models.CleartextToken) = {
          jsObjectCleartextToken(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiCode: play.api.libs.json.Reads[Code] = {
      (
        (__ \ "generator").read[io.apibuilder.api.v0.models.GeneratorWithService] and
        (__ \ "source").read[String] and
        (__ \ "files").read[Seq[io.apibuilder.generator.v0.models.File]]
      )(Code.apply _)
    }

    def jsObjectCode(obj: io.apibuilder.api.v0.models.Code): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "generator" -> jsObjectGeneratorWithService(obj.generator),
        "source" -> play.api.libs.json.JsString(obj.source),
        "files" -> play.api.libs.json.Json.toJson(obj.files)
      )
    }

    implicit def jsonWritesApibuilderapiCode: play.api.libs.json.Writes[Code] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Code] {
        def writes(obj: io.apibuilder.api.v0.models.Code) = {
          jsObjectCode(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiDiffBreaking: play.api.libs.json.Reads[DiffBreaking] = {
      (__ \ "description").read[String].map { x => new DiffBreaking(description = x) }
    }

    def jsObjectDiffBreaking(obj: io.apibuilder.api.v0.models.DiffBreaking): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApibuilderapiDiffNonBreaking: play.api.libs.json.Reads[DiffNonBreaking] = {
      (__ \ "description").read[String].map { x => new DiffNonBreaking(description = x) }
    }

    def jsObjectDiffNonBreaking(obj: io.apibuilder.api.v0.models.DiffNonBreaking): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApibuilderapiDomain: play.api.libs.json.Reads[Domain] = {
      (__ \ "name").read[String].map { x => new Domain(name = x) }
    }

    def jsObjectDomain(obj: io.apibuilder.api.v0.models.Domain): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApibuilderapiDomain: play.api.libs.json.Writes[Domain] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Domain] {
        def writes(obj: io.apibuilder.api.v0.models.Domain) = {
          jsObjectDomain(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiEmailVerificationConfirmationForm: play.api.libs.json.Reads[EmailVerificationConfirmationForm] = {
      (__ \ "token").read[String].map { x => new EmailVerificationConfirmationForm(token = x) }
    }

    def jsObjectEmailVerificationConfirmationForm(obj: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApibuilderapiEmailVerificationConfirmationForm: play.api.libs.json.Writes[EmailVerificationConfirmationForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.EmailVerificationConfirmationForm] {
        def writes(obj: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm) = {
          jsObjectEmailVerificationConfirmationForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: io.apibuilder.api.v0.models.Error): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesApibuilderapiError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Error] {
        def writes(obj: io.apibuilder.api.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiGeneratorForm: play.api.libs.json.Reads[GeneratorForm] = {
      (
        (__ \ "service_guid").read[_root_.java.util.UUID] and
        (__ \ "generator").read[io.apibuilder.generator.v0.models.Generator]
      )(GeneratorForm.apply _)
    }

    def jsObjectGeneratorForm(obj: io.apibuilder.api.v0.models.GeneratorForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "service_guid" -> play.api.libs.json.JsString(obj.serviceGuid.toString),
        "generator" -> io.apibuilder.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApibuilderapiGeneratorForm: play.api.libs.json.Writes[GeneratorForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.GeneratorForm] {
        def writes(obj: io.apibuilder.api.v0.models.GeneratorForm) = {
          jsObjectGeneratorForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiGeneratorService: play.api.libs.json.Reads[GeneratorService] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "uri").read[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(GeneratorService.apply _)
    }

    def jsObjectGeneratorService(obj: io.apibuilder.api.v0.models.GeneratorService): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiGeneratorService: play.api.libs.json.Writes[GeneratorService] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.GeneratorService] {
        def writes(obj: io.apibuilder.api.v0.models.GeneratorService) = {
          jsObjectGeneratorService(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiGeneratorServiceForm: play.api.libs.json.Reads[GeneratorServiceForm] = {
      (__ \ "uri").read[String].map { x => new GeneratorServiceForm(uri = x) }
    }

    def jsObjectGeneratorServiceForm(obj: io.apibuilder.api.v0.models.GeneratorServiceForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesApibuilderapiGeneratorServiceForm: play.api.libs.json.Writes[GeneratorServiceForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.GeneratorServiceForm] {
        def writes(obj: io.apibuilder.api.v0.models.GeneratorServiceForm) = {
          jsObjectGeneratorServiceForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiGeneratorWithService: play.api.libs.json.Reads[GeneratorWithService] = {
      (
        (__ \ "service").read[io.apibuilder.api.v0.models.GeneratorService] and
        (__ \ "generator").read[io.apibuilder.generator.v0.models.Generator]
      )(GeneratorWithService.apply _)
    }

    def jsObjectGeneratorWithService(obj: io.apibuilder.api.v0.models.GeneratorWithService): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "service" -> jsObjectGeneratorService(obj.service),
        "generator" -> io.apibuilder.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApibuilderapiGeneratorWithService: play.api.libs.json.Writes[GeneratorWithService] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.GeneratorWithService] {
        def writes(obj: io.apibuilder.api.v0.models.GeneratorWithService) = {
          jsObjectGeneratorWithService(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "detail").read[io.apibuilder.api.v0.models.ItemDetail] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    def jsObjectItem(obj: io.apibuilder.api.v0.models.Item): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "detail" -> jsObjectItemDetail(obj.detail),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Item] {
        def writes(obj: io.apibuilder.api.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "organization").read[io.apibuilder.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.apibuilder.api.v0.models.Membership): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Membership] {
        def writes(obj: io.apibuilder.api.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiMembershipRequest: play.api.libs.json.Reads[MembershipRequest] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "organization").read[io.apibuilder.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(MembershipRequest.apply _)
    }

    def jsObjectMembershipRequest(obj: io.apibuilder.api.v0.models.MembershipRequest): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiMembershipRequest: play.api.libs.json.Writes[MembershipRequest] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.MembershipRequest] {
        def writes(obj: io.apibuilder.api.v0.models.MembershipRequest) = {
          jsObjectMembershipRequest(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiMoveForm: play.api.libs.json.Reads[MoveForm] = {
      (__ \ "org_key").read[String].map { x => new MoveForm(orgKey = x) }
    }

    def jsObjectMoveForm(obj: io.apibuilder.api.v0.models.MoveForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "org_key" -> play.api.libs.json.JsString(obj.orgKey)
      )
    }

    implicit def jsonWritesApibuilderapiMoveForm: play.api.libs.json.Writes[MoveForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.MoveForm] {
        def writes(obj: io.apibuilder.api.v0.models.MoveForm) = {
          jsObjectMoveForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[io.apibuilder.api.v0.models.Visibility] and
        (__ \ "domains").read[Seq[io.apibuilder.api.v0.models.Domain]] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.apibuilder.api.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "domains" -> play.api.libs.json.Json.toJson(obj.domains),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Organization] {
        def writes(obj: io.apibuilder.api.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[io.apibuilder.api.v0.models.Visibility] and
        (__ \ "domains").readNullable[Seq[String]]
      )(OrganizationForm.apply _)
    }

    def jsObjectOrganizationForm(obj: io.apibuilder.api.v0.models.OrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.domains match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("domains" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApibuilderapiOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.OrganizationForm] {
        def writes(obj: io.apibuilder.api.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiOriginal: play.api.libs.json.Reads[Original] = {
      (
        (__ \ "type").read[io.apibuilder.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(Original.apply _)
    }

    def jsObjectOriginal(obj: io.apibuilder.api.v0.models.Original): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "data" -> play.api.libs.json.JsString(obj.data)
      )
    }

    implicit def jsonWritesApibuilderapiOriginal: play.api.libs.json.Writes[Original] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Original] {
        def writes(obj: io.apibuilder.api.v0.models.Original) = {
          jsObjectOriginal(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiOriginalForm: play.api.libs.json.Reads[OriginalForm] = {
      (
        (__ \ "type").readNullable[io.apibuilder.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(OriginalForm.apply _)
    }

    def jsObjectOriginalForm(obj: io.apibuilder.api.v0.models.OriginalForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "data" -> play.api.libs.json.JsString(obj.data)
      ) ++ (obj.`type` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("type" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesApibuilderapiOriginalForm: play.api.libs.json.Writes[OriginalForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.OriginalForm] {
        def writes(obj: io.apibuilder.api.v0.models.OriginalForm) = {
          jsObjectOriginalForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiPasswordReset: play.api.libs.json.Reads[PasswordReset] = {
      (
        (__ \ "token").read[String] and
        (__ \ "password").read[String]
      )(PasswordReset.apply _)
    }

    def jsObjectPasswordReset(obj: io.apibuilder.api.v0.models.PasswordReset): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token),
        "password" -> play.api.libs.json.JsString(obj.password)
      )
    }

    implicit def jsonWritesApibuilderapiPasswordReset: play.api.libs.json.Writes[PasswordReset] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.PasswordReset] {
        def writes(obj: io.apibuilder.api.v0.models.PasswordReset) = {
          jsObjectPasswordReset(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiPasswordResetRequest: play.api.libs.json.Reads[PasswordResetRequest] = {
      (__ \ "email").read[String].map { x => new PasswordResetRequest(email = x) }
    }

    def jsObjectPasswordResetRequest(obj: io.apibuilder.api.v0.models.PasswordResetRequest): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonWritesApibuilderapiPasswordResetRequest: play.api.libs.json.Writes[PasswordResetRequest] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.PasswordResetRequest] {
        def writes(obj: io.apibuilder.api.v0.models.PasswordResetRequest) = {
          jsObjectPasswordResetRequest(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiSession: play.api.libs.json.Reads[Session] = {
      (
        (__ \ "id").read[String] and
        (__ \ "expires_at").read[_root_.org.joda.time.DateTime]
      )(Session.apply _)
    }

    def jsObjectSession(obj: io.apibuilder.api.v0.models.Session): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "expires_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiresAt))
      )
    }

    implicit def jsonWritesApibuilderapiSession: play.api.libs.json.Writes[Session] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Session] {
        def writes(obj: io.apibuilder.api.v0.models.Session) = {
          jsObjectSession(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.api.v0.models.Organization] and
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "publication").read[io.apibuilder.api.v0.models.Publication] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Subscription.apply _)
    }

    def jsObjectSubscription(obj: io.apibuilder.api.v0.models.Subscription): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> jsObjectOrganization(obj.organization),
        "user" -> jsObjectUser(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiSubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Subscription] {
        def writes(obj: io.apibuilder.api.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "organization_key").read[String] and
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "publication").read[io.apibuilder.api.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    def jsObjectSubscriptionForm(obj: io.apibuilder.api.v0.models.SubscriptionForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesApibuilderapiSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.SubscriptionForm] {
        def writes(obj: io.apibuilder.api.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "masked_token").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Token.apply _)
    }

    def jsObjectToken(obj: io.apibuilder.api.v0.models.Token): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "masked_token" -> play.api.libs.json.JsString(obj.maskedToken),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Token] {
        def writes(obj: io.apibuilder.api.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "description").readNullable[String]
      )(TokenForm.apply _)
    }

    def jsObjectTokenForm(obj: io.apibuilder.api.v0.models.TokenForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.TokenForm] {
        def writes(obj: io.apibuilder.api.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(User.apply _)
    }

    def jsObjectUser(obj: io.apibuilder.api.v0.models.User): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.User] {
        def writes(obj: io.apibuilder.api.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "password").read[String] and
        (__ \ "nickname").readNullable[String] and
        (__ \ "name").readNullable[String]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: io.apibuilder.api.v0.models.UserForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "password" -> play.api.libs.json.JsString(obj.password)
      ) ++ (obj.nickname match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("nickname" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.UserForm] {
        def writes(obj: io.apibuilder.api.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "nickname").read[String]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: io.apibuilder.api.v0.models.UserSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      )
    }

    implicit def jsonWritesApibuilderapiUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.UserSummary] {
        def writes(obj: io.apibuilder.api.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiUserUpdateForm: play.api.libs.json.Reads[UserUpdateForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String]
      )(UserUpdateForm.apply _)
    }

    def jsObjectUserUpdateForm(obj: io.apibuilder.api.v0.models.UserUpdateForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesApibuilderapiUserUpdateForm: play.api.libs.json.Writes[UserUpdateForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.UserUpdateForm] {
        def writes(obj: io.apibuilder.api.v0.models.UserUpdateForm) = {
          jsObjectUserUpdateForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiValidation: play.api.libs.json.Reads[Validation] = {
      (
        (__ \ "valid").read[Boolean] and
        (__ \ "errors").read[Seq[String]]
      )(Validation.apply _)
    }

    def jsObjectValidation(obj: io.apibuilder.api.v0.models.Validation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "valid" -> play.api.libs.json.JsBoolean(obj.valid),
        "errors" -> play.api.libs.json.Json.toJson(obj.errors)
      )
    }

    implicit def jsonWritesApibuilderapiValidation: play.api.libs.json.Writes[Validation] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Validation] {
        def writes(obj: io.apibuilder.api.v0.models.Validation) = {
          jsObjectValidation(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiVersion: play.api.libs.json.Reads[Version] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "application").read[io.apibuilder.common.v0.models.Reference] and
        (__ \ "version").read[String] and
        (__ \ "original").readNullable[io.apibuilder.api.v0.models.Original] and
        (__ \ "service").read[io.apibuilder.spec.v0.models.Service] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Version.apply _)
    }

    def jsObjectVersion(obj: io.apibuilder.api.v0.models.Version): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> io.apibuilder.common.v0.models.json.jsObjectReference(obj.application),
        "version" -> play.api.libs.json.JsString(obj.version),
        "service" -> io.apibuilder.spec.v0.models.json.jsObjectService(obj.service),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.original match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("original" -> jsObjectOriginal(x))
      })
    }

    implicit def jsonWritesApibuilderapiVersion: play.api.libs.json.Writes[Version] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Version] {
        def writes(obj: io.apibuilder.api.v0.models.Version) = {
          jsObjectVersion(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiVersionForm: play.api.libs.json.Reads[VersionForm] = {
      (
        (__ \ "original_form").read[io.apibuilder.api.v0.models.OriginalForm] and
        (__ \ "visibility").readNullable[io.apibuilder.api.v0.models.Visibility]
      )(VersionForm.apply _)
    }

    def jsObjectVersionForm(obj: io.apibuilder.api.v0.models.VersionForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "original_form" -> jsObjectOriginalForm(obj.originalForm)
      ) ++ (obj.visibility match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("visibility" -> play.api.libs.json.JsString(x.toString))
      })
    }

    implicit def jsonWritesApibuilderapiVersionForm: play.api.libs.json.Writes[VersionForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.VersionForm] {
        def writes(obj: io.apibuilder.api.v0.models.VersionForm) = {
          jsObjectVersionForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiWatch: play.api.libs.json.Reads[Watch] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[io.apibuilder.api.v0.models.User] and
        (__ \ "organization").read[io.apibuilder.api.v0.models.Organization] and
        (__ \ "application").read[io.apibuilder.api.v0.models.Application] and
        (__ \ "audit").read[io.apibuilder.common.v0.models.Audit]
      )(Watch.apply _)
    }

    def jsObjectWatch(obj: io.apibuilder.api.v0.models.Watch): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "application" -> jsObjectApplication(obj.application),
        "audit" -> io.apibuilder.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApibuilderapiWatch: play.api.libs.json.Writes[Watch] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Watch] {
        def writes(obj: io.apibuilder.api.v0.models.Watch) = {
          jsObjectWatch(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiWatchForm: play.api.libs.json.Reads[WatchForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "organization_key").read[String] and
        (__ \ "application_key").read[String]
      )(WatchForm.apply _)
    }

    def jsObjectWatchForm(obj: io.apibuilder.api.v0.models.WatchForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "application_key" -> play.api.libs.json.JsString(obj.applicationKey)
      )
    }

    implicit def jsonWritesApibuilderapiWatchForm: play.api.libs.json.Writes[WatchForm] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.WatchForm] {
        def writes(obj: io.apibuilder.api.v0.models.WatchForm) = {
          jsObjectWatchForm(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiDiff: play.api.libs.json.Reads[Diff] = new play.api.libs.json.Reads[Diff] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Diff] = {
        (js \ "type").asOpt[String].getOrElse { sys.error("Union[Diff] requires a discriminator named 'type' - this field was not found in the Json Value") } match {
          case "diff_breaking" => js.validate[io.apibuilder.api.v0.models.DiffBreaking]
          case "diff_non_breaking" => js.validate[io.apibuilder.api.v0.models.DiffNonBreaking]
          case other => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.DiffUndefinedType(other))
        }
      }
    }

    def jsObjectDiff(obj: io.apibuilder.api.v0.models.Diff): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.api.v0.models.DiffBreaking => jsObjectDiffBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_breaking")
        case x: io.apibuilder.api.v0.models.DiffNonBreaking => jsObjectDiffNonBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_non_breaking")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApibuilderapiDiff: play.api.libs.json.Writes[Diff] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.Diff] {
        def writes(obj: io.apibuilder.api.v0.models.Diff) = {
          jsObjectDiff(obj)
        }
      }
    }

    implicit def jsonReadsApibuilderapiItemDetail: play.api.libs.json.Reads[ItemDetail] = new play.api.libs.json.Reads[ItemDetail] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemDetail] = {
        (js \ "type").asOpt[String].getOrElse { sys.error("Union[ItemDetail] requires a discriminator named 'type' - this field was not found in the Json Value") } match {
          case "application_summary" => js.validate[io.apibuilder.api.v0.models.ApplicationSummary]
          case other => play.api.libs.json.JsSuccess(io.apibuilder.api.v0.models.ItemDetailUndefinedType(other))
        }
      }
    }

    def jsObjectItemDetail(obj: io.apibuilder.api.v0.models.ItemDetail): play.api.libs.json.JsObject = {
      obj match {
        case x: io.apibuilder.api.v0.models.ApplicationSummary => jsObjectApplicationSummary(x) ++ play.api.libs.json.Json.obj("type" -> "application_summary")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApibuilderapiItemDetail: play.api.libs.json.Writes[ItemDetail] = {
      new play.api.libs.json.Writes[io.apibuilder.api.v0.models.ItemDetail] {
        def writes(obj: io.apibuilder.api.v0.models.ItemDetail) = {
          jsObjectItemDetail(obj)
        }
      }
    }
  }
}

package io.apibuilder.api.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.apibuilder.api.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: OriginalType
    private[this] val enumOriginalTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.api.v0.models.OriginalType.all.mkString(", ")}"

    implicit val pathBindableEnumOriginalType = new PathBindable.Parsing[io.apibuilder.api.v0.models.OriginalType] (
      OriginalType.fromString(_).get, _.toString, enumOriginalTypeNotFound
    )

    implicit val queryStringBindableEnumOriginalType = new QueryStringBindable.Parsing[io.apibuilder.api.v0.models.OriginalType](
      OriginalType.fromString(_).get, _.toString, enumOriginalTypeNotFound
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.api.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[io.apibuilder.api.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[io.apibuilder.api.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.apibuilder.api.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[io.apibuilder.api.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[io.apibuilder.api.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package io.apibuilder.api.v0 {

  object Constants {

    val BaseUrl = "https://api.apibuilder.io"
    val Namespace = "io.apibuilder.api.v0"
    val UserAgent = "apibuilder:0.13.0 https://app.apibuilder.io/apicollective/apibuilder-api/0.13.7/play_2_4_client"
    val Version = "0.13.7"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "https://api.apibuilder.io",
    auth: scala.Option[io.apibuilder.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.apibuilder.api.v0.models.json._
    import io.apibuilder.common.v0.models.json._
    import io.apibuilder.generator.v0.models.json._
    import io.apibuilder.spec.v0.models.json._

    private[this] val logger = play.api.Logger("io.apibuilder.api.v0.Client")

    logger.info(s"Initializing io.apibuilder.api.v0.Client for url $baseUrl")

    def applications: Applications = Applications

    def attributes: Attributes = Attributes

    def authentications: Authentications = Authentications

    def changes: Changes = Changes

    def code: Code = Code

    def domains: Domains = Domains

    def emailVerificationConfirmationForms: EmailVerificationConfirmationForms = EmailVerificationConfirmationForms

    def generatorServices: GeneratorServices = GeneratorServices

    def generatorWithServices: GeneratorWithServices = GeneratorWithServices

    def healthchecks: Healthchecks = Healthchecks

    def items: Items = Items

    def membershipRequests: MembershipRequests = MembershipRequests

    def memberships: Memberships = Memberships

    def organizations: Organizations = Organizations

    def passwordResetRequests: PasswordResetRequests = PasswordResetRequests

    def passwordResets: PasswordResets = PasswordResets

    def subscriptions: Subscriptions = Subscriptions

    def tokens: Tokens = Tokens

    def users: Users = Users

    def validations: Validations = Validations

    def versions: Versions = Versions

    def watches: Watches = Watches

    object Applications extends Applications {
      override def getMetadataAndVersionsByApplicationKey(
        orgKey: String,
        applicationKey: String,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.ApplicationMetadataVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/metadata/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.ApplicationMetadataVersion]", r, _.validate[Seq[io.apibuilder.api.v0.models.ApplicationMetadataVersion]])
          case r if r.status == 401 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getMetadataAndVersionsAndLatestTxtByApplicationKey(
        orgKey: String,
        applicationKey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/metadata/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/versions/latest.txt", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("String", r, _.validate[String])
          case r if r.status == 401 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def get(
        orgKey: String,
        name: _root_.scala.Option[String] = None,
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        key: _root_.scala.Option[String] = None,
        hasVersion: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Application]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          guid.map("guid" -> _.toString),
          key.map("key" -> _),
          hasVersion.map("has_version" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Application]", r, _.validate[Seq[io.apibuilder.api.v0.models.Application]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        orgKey: String,
        applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Application", r, _.validate[io.apibuilder.api.v0.models.Application])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByApplicationKey(
        orgKey: String,
        applicationKey: String,
        applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Application", r, _.validate[io.apibuilder.api.v0.models.Application])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByApplicationKey(
        orgKey: String,
        applicationKey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def postMoveByApplicationKey(
        orgKey: String,
        applicationKey: String,
        moveForm: io.apibuilder.api.v0.models.MoveForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(moveForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/move", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Application", r, _.validate[io.apibuilder.api.v0.models.Application])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Attributes extends Attributes {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Attribute]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/attributes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Attribute]", r, _.validate[Seq[io.apibuilder.api.v0.models.Attribute]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByName(
        name: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Attribute] = {
        _executeRequest("GET", s"/attributes/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Attribute", r, _.validate[io.apibuilder.api.v0.models.Attribute])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        attributeForm: io.apibuilder.api.v0.models.AttributeForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Attribute] = {
        val payload = play.api.libs.json.Json.toJson(attributeForm)

        _executeRequest("POST", s"/attributes", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Attribute", r, _.validate[io.apibuilder.api.v0.models.Attribute])
          case r if r.status == 401 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 409")
        }
      }

      override def deleteByName(
        name: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/attributes/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Authentications extends Authentications {
      override def getSessionById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication] = {
        _executeRequest("GET", s"/authentications/session/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Authentication", r, _.validate[io.apibuilder.api.v0.models.Authentication])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object Changes extends Changes {
      override def get(
        orgKey: _root_.scala.Option[String] = None,
        applicationKey: _root_.scala.Option[String] = None,
        from: _root_.scala.Option[String] = None,
        to: _root_.scala.Option[String] = None,
        `type`: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Change]] = {
        val queryParameters = Seq(
          orgKey.map("org_key" -> _),
          applicationKey.map("application_key" -> _),
          from.map("from" -> _),
          to.map("to" -> _),
          `type`.map("type" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/changes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Change]", r, _.validate[Seq[io.apibuilder.api.v0.models.Change]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Code extends Code {
      override def get(
        orgKey: String,
        applicationKey: String,
        version: String,
        generatorKey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Code] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(generatorKey, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Code", r, _.validate[io.apibuilder.api.v0.models.Code])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 409")
        }
      }
    }

    object Domains extends Domains {
      override def post(
        orgKey: String,
        domain: io.apibuilder.api.v0.models.Domain,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Domain] = {
        val payload = play.api.libs.json.Json.toJson(domain)

        _executeRequest("POST", s"/domains/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Domain", r, _.validate[io.apibuilder.api.v0.models.Domain])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByName(
        orgKey: String,
        name: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/domains/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object EmailVerificationConfirmationForms extends EmailVerificationConfirmationForms {
      override def post(
        emailVerificationConfirmationForm: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(emailVerificationConfirmationForm)

        _executeRequest("POST", s"/email_verification_confirmations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object GeneratorServices extends GeneratorServices {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        uri: _root_.scala.Option[String] = None,
        generatorKey: _root_.scala.Option[String] = None,
        limit: Long = 100,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.GeneratorService]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          uri.map("uri" -> _),
          generatorKey.map("generator_key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/generator_services", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.GeneratorService]", r, _.validate[Seq[io.apibuilder.api.v0.models.GeneratorService]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorService] = {
        _executeRequest("GET", s"/generator_services/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.GeneratorService", r, _.validate[io.apibuilder.api.v0.models.GeneratorService])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        generatorServiceForm: io.apibuilder.api.v0.models.GeneratorServiceForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorService] = {
        val payload = play.api.libs.json.Json.toJson(generatorServiceForm)

        _executeRequest("POST", s"/generator_services", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.GeneratorService", r, _.validate[io.apibuilder.api.v0.models.GeneratorService])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/generator_services/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 403 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 403, 404")
        }
      }
    }

    object GeneratorWithServices extends GeneratorWithServices {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        serviceGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        serviceUri: _root_.scala.Option[String] = None,
        attributeName: _root_.scala.Option[String] = None,
        key: _root_.scala.Option[String] = None,
        limit: Long = 100,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.GeneratorWithService]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          serviceGuid.map("service_guid" -> _.toString),
          serviceUri.map("service_uri" -> _),
          attributeName.map("attribute_name" -> _),
          key.map("key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/generators", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.GeneratorWithService]", r, _.validate[Seq[io.apibuilder.api.v0.models.GeneratorWithService]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByKey(
        key: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorWithService] = {
        _executeRequest("GET", s"/generators/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.GeneratorWithService", r, _.validate[io.apibuilder.api.v0.models.GeneratorWithService])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.generator.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.generator.v0.models.Healthcheck", r, _.validate[io.apibuilder.generator.v0.models.Healthcheck])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getMigrate(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, String]] = {
        _executeRequest("GET", s"/_internal_/migrate", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Map[String, String]", r, _.validate[Map[String, String]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Items extends Items {
      override def get(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/items", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Item]", r, _.validate[Seq[io.apibuilder.api.v0.models.Item]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Item] = {
        _executeRequest("GET", s"/items/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Item", r, _.validate[io.apibuilder.api.v0.models.Item])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object MembershipRequests extends MembershipRequests {
      override def get(
        orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        orgKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.MembershipRequest]] = {
        val queryParameters = Seq(
          orgGuid.map("org_guid" -> _.toString),
          orgKey.map("org_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/membership_requests", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.MembershipRequest]", r, _.validate[Seq[io.apibuilder.api.v0.models.MembershipRequest]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        orgGuid: _root_.java.util.UUID,
        userGuid: _root_.java.util.UUID,
        role: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.MembershipRequest] = {
        val payload = play.api.libs.json.Json.obj(
          "org_guid" -> play.api.libs.json.Json.toJson(orgGuid),
          "user_guid" -> play.api.libs.json.Json.toJson(userGuid),
          "role" -> play.api.libs.json.Json.toJson(role)
        )

        _executeRequest("POST", s"/membership_requests", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.MembershipRequest", r, _.validate[io.apibuilder.api.v0.models.MembershipRequest])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postAcceptByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/membership_requests/${guid}/accept", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }

      override def postDeclineByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/membership_requests/${guid}/decline", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        orgKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Membership]] = {
        val queryParameters = Seq(
          orgGuid.map("org_guid" -> _.toString),
          orgKey.map("org_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Membership]", r, _.validate[Seq[io.apibuilder.api.v0.models.Membership]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Membership", r, _.validate[io.apibuilder.api.v0.models.Membership])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        key: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        namespace: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          key.map("key" -> _),
          name.map("name" -> _),
          namespace.map("namespace" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Organization]", r, _.validate[Seq[io.apibuilder.api.v0.models.Organization]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByKey(
        key: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Organization", r, _.validate[io.apibuilder.api.v0.models.Organization])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Organization", r, _.validate[io.apibuilder.api.v0.models.Organization])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByKey(
        key: String,
        organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Organization", r, _.validate[io.apibuilder.api.v0.models.Organization])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByKey(
        key: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def getAttributesByKey(
        key: String,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.AttributeValue]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}/attributes", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.AttributeValue]", r, _.validate[Seq[io.apibuilder.api.v0.models.AttributeValue]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getAttributesByKeyAndName(
        key: String,
        name: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.AttributeValue] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}/attributes/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.AttributeValue", r, _.validate[io.apibuilder.api.v0.models.AttributeValue])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def putAttributesByKeyAndName(
        key: String,
        name: String,
        attributeValueForm: io.apibuilder.api.v0.models.AttributeValueForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.AttributeValue] = {
        val payload = play.api.libs.json.Json.toJson(attributeValueForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}/attributes/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.AttributeValue", r, _.validate[io.apibuilder.api.v0.models.AttributeValue])
          case r if r.status == 201 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.AttributeValue", r, _.validate[io.apibuilder.api.v0.models.AttributeValue])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 404, 409")
        }
      }

      override def deleteAttributesByKeyAndName(
        key: String,
        name: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}/attributes/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object PasswordResetRequests extends PasswordResetRequests {
      override def post(
        passwordResetRequest: io.apibuilder.api.v0.models.PasswordResetRequest,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(passwordResetRequest)

        _executeRequest("POST", s"/password_reset_requests", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object PasswordResets extends PasswordResets {
      override def post(
        passwordReset: io.apibuilder.api.v0.models.PasswordReset,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication] = {
        val payload = play.api.libs.json.Json.toJson(passwordReset)

        _executeRequest("POST", s"/password_resets", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Authentication", r, _.validate[io.apibuilder.api.v0.models.Authentication])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        publication: _root_.scala.Option[io.apibuilder.api.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Subscription]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          organizationKey.map("organization_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Subscription]", r, _.validate[Seq[io.apibuilder.api.v0.models.Subscription]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Subscription", r, _.validate[io.apibuilder.api.v0.models.Subscription])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        subscriptionForm: io.apibuilder.api.v0.models.SubscriptionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        _executeRequest("POST", s"/subscriptions", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Subscription", r, _.validate[io.apibuilder.api.v0.models.Subscription])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/subscriptions/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Tokens extends Tokens {
      override def getUsersByUserGuid(
        userGuid: _root_.java.util.UUID,
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Token]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/tokens/users/${userGuid}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Token]", r, _.validate[Seq[io.apibuilder.api.v0.models.Token]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getCleartextByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.CleartextToken] = {
        _executeRequest("GET", s"/tokens/${guid}/cleartext", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.CleartextToken", r, _.validate[io.apibuilder.api.v0.models.CleartextToken])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        tokenForm: io.apibuilder.api.v0.models.TokenForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Token] = {
        val payload = play.api.libs.json.Json.toJson(tokenForm)

        _executeRequest("POST", s"/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Token", r, _.validate[io.apibuilder.api.v0.models.Token])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Users extends Users {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        email: _root_.scala.Option[String] = None,
        nickname: _root_.scala.Option[String] = None,
        token: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          email.map("email" -> _),
          nickname.map("nickname" -> _),
          token.map("token" -> _)
        ).flatten

        _executeRequest("GET", s"/users", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.User]", r, _.validate[Seq[io.apibuilder.api.v0.models.User]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User] = {
        _executeRequest("GET", s"/users/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.User", r, _.validate[io.apibuilder.api.v0.models.User])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postAuthenticate(
        email: String,
        password: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication] = {
        val payload = play.api.libs.json.Json.obj(
          "email" -> play.api.libs.json.Json.toJson(email),
          "password" -> play.api.libs.json.Json.toJson(password)
        )

        _executeRequest("POST", s"/users/authenticate", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Authentication", r, _.validate[io.apibuilder.api.v0.models.Authentication])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postAuthenticateGithub(
        token: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication] = {
        val payload = play.api.libs.json.Json.obj(
          "token" -> play.api.libs.json.Json.toJson(token)
        )

        _executeRequest("POST", s"/users/authenticate_github", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Authentication", r, _.validate[io.apibuilder.api.v0.models.Authentication])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def post(
        userForm: io.apibuilder.api.v0.models.UserForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.User", r, _.validate[io.apibuilder.api.v0.models.User])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByGuid(
        guid: _root_.java.util.UUID,
        userUpdateForm: io.apibuilder.api.v0.models.UserUpdateForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userUpdateForm)

        _executeRequest("PUT", s"/users/${guid}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.User", r, _.validate[io.apibuilder.api.v0.models.User])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Validations extends Validations {
      override def post(
        value: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Validation] = {
        val payload = play.api.libs.json.Json.toJson(value)

        _executeRequest("POST", s"/validations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Validation", r, _.validate[io.apibuilder.api.v0.models.Validation])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Versions extends Versions {
      override def getByApplicationKey(
        orgKey: String,
        applicationKey: String,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Version]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Version]", r, _.validate[Seq[io.apibuilder.api.v0.models.Version]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Version", r, _.validate[io.apibuilder.api.v0.models.Version])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postByVersion(
        orgKey: String,
        version: String,
        versionForm: io.apibuilder.api.v0.models.VersionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version] = {
        val payload = play.api.libs.json.Json.toJson(versionForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Version", r, _.validate[io.apibuilder.api.v0.models.Version])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String,
        versionForm: io.apibuilder.api.v0.models.VersionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version] = {
        val payload = play.api.libs.json.Json.toJson(versionForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Version", r, _.validate[io.apibuilder.api.v0.models.Version])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def getExampleByApplicationKeyAndVersionAndTypeName(
        orgKey: String,
        applicationKey: String,
        version: String,
        typeName: String,
        optionalFields: _root_.scala.Option[Boolean] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[_root_.play.api.libs.json.JsObject] = {
        val queryParameters = Seq(
          optionalFields.map("optional_fields" -> _.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}/example/${play.utils.UriEncoding.encodePathSegment(typeName, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("_root_.play.api.libs.json.JsObject", r, _.validate[_root_.play.api.libs.json.JsObject])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object Watches extends Watches {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: _root_.scala.Option[String] = None,
        applicationKey: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Watch]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          organizationKey.map("organization_key" -> _),
          applicationKey.map("application_key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/watches", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Watch]", r, _.validate[Seq[io.apibuilder.api.v0.models.Watch]])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Watch] = {
        _executeRequest("GET", s"/watches/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Watch", r, _.validate[io.apibuilder.api.v0.models.Watch])
          case r if r.status == 404 => throw io.apibuilder.api.v0.errors.UnitResponse(r.status)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getCheck(
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: String,
        applicationKey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean] = {
        val queryParameters = Seq(
          userGuid.map("user_guid" -> _.toString),
          Some("organization_key" -> organizationKey),
          Some("application_key" -> applicationKey)
        ).flatten

        _executeRequest("GET", s"/watches/check", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.apibuilder.api.v0.Client.parseJson("Boolean", r, _.validate[Boolean])
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        watchForm: io.apibuilder.api.v0.models.WatchForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Watch] = {
        val payload = play.api.libs.json.Json.toJson(watchForm)

        _executeRequest("POST", s"/watches", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.apibuilder.api.v0.Client.parseJson("io.apibuilder.api.v0.models.Watch", r, _.validate[io.apibuilder.api.v0.models.Watch])
          case r if r.status == 409 => throw io.apibuilder.api.v0.errors.ErrorsResponse(r)
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/watches/${guid}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.apibuilder.api.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def applications: io.apibuilder.api.v0.Applications
      def attributes: io.apibuilder.api.v0.Attributes
      def authentications: io.apibuilder.api.v0.Authentications
      def changes: io.apibuilder.api.v0.Changes
      def code: io.apibuilder.api.v0.Code
      def domains: io.apibuilder.api.v0.Domains
      def emailVerificationConfirmationForms: io.apibuilder.api.v0.EmailVerificationConfirmationForms
      def generatorServices: io.apibuilder.api.v0.GeneratorServices
      def generatorWithServices: io.apibuilder.api.v0.GeneratorWithServices
      def healthchecks: io.apibuilder.api.v0.Healthchecks
      def items: io.apibuilder.api.v0.Items
      def membershipRequests: io.apibuilder.api.v0.MembershipRequests
      def memberships: io.apibuilder.api.v0.Memberships
      def organizations: io.apibuilder.api.v0.Organizations
      def passwordResetRequests: io.apibuilder.api.v0.PasswordResetRequests
      def passwordResets: io.apibuilder.api.v0.PasswordResets
      def subscriptions: io.apibuilder.api.v0.Subscriptions
      def tokens: io.apibuilder.api.v0.Tokens
      def users: io.apibuilder.api.v0.Users
      def validations: io.apibuilder.api.v0.Validations
      def versions: io.apibuilder.api.v0.Versions
      def watches: io.apibuilder.api.v0.Watches
    }

  }

  trait Applications {
    /**
     * Returns the versions assocoated with the specified application. The latest
     * version is the first result returned.
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getMetadataAndVersionsByApplicationKey(
      orgKey: String,
      applicationKey: String,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.ApplicationMetadataVersion]]

    /**
     * Returns the latest version number as a string
     */
    def getMetadataAndVersionsAndLatestTxtByApplicationKey(
      orgKey: String,
      applicationKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[String]

    /**
     * Search all applications. Results are always paginated.
     * 
     * @param orgKey The organization key for which to search applications
     * @param name The name of an application. Case in-sensitive. Exact match
     * @param guid The guid of an application. Exact match
     * @param key The key of an application. Case in-sensitive. Exact match
     * @param hasVersion If true, we return applications that have at least one version. If false, we
     *        return applications that have no versions in the system
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgKey: String,
      name: _root_.scala.Option[String] = None,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      hasVersion: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Application]]

    /**
     * Create an application.
     */
    def post(
      orgKey: String,
      applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application]

    /**
     * Updates an application.
     */
    def putByApplicationKey(
      orgKey: String,
      applicationKey: String,
      applicationForm: io.apibuilder.api.v0.models.ApplicationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application]

    /**
     * Deletes a specific application and its associated versions.
     */
    def deleteByApplicationKey(
      orgKey: String,
      applicationKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Moves application to a new organization.
     */
    def postMoveByApplicationKey(
      orgKey: String,
      applicationKey: String,
      moveForm: io.apibuilder.api.v0.models.MoveForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Application]
  }

  trait Attributes {
    /**
     * Search all attributes. Results are always paginated.
     * 
     * @param guid Find the watch with this guid.
     * @param name Find attributes with this name. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Attribute]]

    /**
     * Returns the attribute with this name.
     */
    def getByName(
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Attribute]

    /**
     * Create a new attribute.
     */
    def post(
      attributeForm: io.apibuilder.api.v0.models.AttributeForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Attribute]

    /**
     * Deletes the attribute with this name. Only the user who created an attribute can
     * delete it.
     */
    def deleteByName(
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Authentications {
    def getSessionById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication]
  }

  trait Changes {
    /**
     * @param orgKey Filter changes to those made for the organization with this key.
     * @param applicationKey Filter changes to those made for the application with this key.
     * @param from Filter changes to those made from this version.
     * @param to Filter changes to those made to this version.
     * @param type The type of diff to return.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      from: _root_.scala.Option[String] = None,
      to: _root_.scala.Option[String] = None,
      `type`: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Change]]
  }

  trait Code {
    /**
     * Generate code for a specific version of an application.
     * 
     * @param orgKey The organization key for which to generate code
     * @param applicationKey The application key for which to generate code
     * @param version The version of this application. Can be 'latest'
     * @param generatorKey The key of the generator to invoke
     */
    def get(
      orgKey: String,
      applicationKey: String,
      version: String,
      generatorKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Code]
  }

  trait Domains {
    /**
     * Add a domain to this organization
     */
    def post(
      orgKey: String,
      domain: io.apibuilder.api.v0.models.Domain,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Domain]

    /**
     * Remove this domain from this organization
     */
    def deleteByName(
      orgKey: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait EmailVerificationConfirmationForms {
    /**
     * Validate an email address using a token.
     */
    def post(
      emailVerificationConfirmationForm: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait GeneratorServices {
    /**
     * List all generator services
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      uri: _root_.scala.Option[String] = None,
      generatorKey: _root_.scala.Option[String] = None,
      limit: Long = 100,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.GeneratorService]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorService]

    def post(
      generatorServiceForm: io.apibuilder.api.v0.models.GeneratorServiceForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorService]

    /**
     * Deletes a generator service.
     */
    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait GeneratorWithServices {
    /**
     * List all available generators
     * 
     * @param guid Filter to generator with this guid
     * @param serviceGuid Filter to generator from this service
     * @param serviceUri Filter to generator from this service URI
     * @param attributeName Filter to generators that use this attribute
     * @param key Filter to generator with this key
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceUri: _root_.scala.Option[String] = None,
      attributeName: _root_.scala.Option[String] = None,
      key: _root_.scala.Option[String] = None,
      limit: Long = 100,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.GeneratorWithService]]

    def getByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.GeneratorWithService]
  }

  trait Healthchecks {
    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.generator.v0.models.Healthcheck]

    def getMigrate(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, String]]
  }

  trait Items {
    /**
     * @param q The search query. At the moment, we do case insensitive exact match search.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Item]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Item]
  }

  trait MembershipRequests {
    /**
     * Search all membership requests. Results are always paginated.
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.MembershipRequest]]

    /**
     * Create a membership request
     */
    def post(
      orgGuid: _root_.java.util.UUID,
      userGuid: _root_.java.util.UUID,
      role: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.MembershipRequest]

    /**
     * Accepts this membership request. User will become a member of the specified
     * organization.
     */
    def postAcceptByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Declines this membership request. User will NOT become a member of the specified
     * organization.
     */
    def postDeclineByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Memberships {
    /**
     * Search all memberships. Results are always paginated.
     * 
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Membership]]

    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Membership]

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Organizations {
    /**
     * Search all organizations. Results are always paginated.
     * 
     * @param guid Finds the organization with this guid, if any
     * @param userGuid If specified, restricts to organizations that this user is specifically a member
     *        of (e.g. will exclude public organizations with which the user does not have a
     *        direct membership).
     * @param key Find organizations with this key. Case in-sensitive. Exact match
     * @param name Find organizations with this name. Case in-sensitive. Exact match
     * @param namespace Find organizations with this namespace. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      namespace: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Organization]]

    /**
     * Returns the organization with this key.
     */
    def getByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization]

    /**
     * Update an organization.
     */
    def putByKey(
      key: String,
      organizationForm: io.apibuilder.api.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Organization]

    /**
     * Deletes an organization and all of its associated applications.
     */
    def deleteByKey(
      key: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Returns all attribute values for this organization. Results are always
     * paginated.
     * 
     * @param name Find the values for the attribute with this name.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getAttributesByKey(
      key: String,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.AttributeValue]]

    /**
     * Returns the attribute value with this name.
     */
    def getAttributesByKeyAndName(
      key: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.AttributeValue]

    /**
     * Create or update a new attribute value.
     */
    def putAttributesByKeyAndName(
      key: String,
      name: String,
      attributeValueForm: io.apibuilder.api.v0.models.AttributeValueForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.AttributeValue]

    /**
     * Deletes the attribute value with the specified name. Only the user who created
     * an attribute value can delete it.
     */
    def deleteAttributesByKeyAndName(
      key: String,
      name: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait PasswordResetRequests {
    /**
     * Create a new password reset. This will send the user an email with a link to
     * reset their password.
     */
    def post(
      passwordResetRequest: io.apibuilder.api.v0.models.PasswordResetRequest,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait PasswordResets {
    /**
     * Change the password for this token. If the token is invalid, has been used, or
     * otherwise no longer can be applied, errors will be returned as 409s. A 204
     * represents that the user has successfully changed their password.
     */
    def post(
      passwordReset: io.apibuilder.api.v0.models.PasswordReset,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     * 
     * @param guid Find the subscription with this guid.
     * @param organizationKey Find subscriptions for this organization.
     * @param userGuid Find subscriptions for this user.
     * @param publication Find subscriptions for this publication.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      publication: _root_.scala.Option[io.apibuilder.api.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Subscription]

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: io.apibuilder.api.v0.models.SubscriptionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Subscription]

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tokens {
    /**
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getUsersByUserGuid(
      userGuid: _root_.java.util.UUID,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Token]]

    /**
     * Used to fetch the clear text token.
     */
    def getCleartextByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.CleartextToken]

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: io.apibuilder.api.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Token]

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a
     * guid, email or token - and will receive back either 0 or 1 users.
     * 
     * @param guid Find user with this guid. Exact match
     * @param email Find user with this email address. Case in-sensitive. Exact match
     * @param nickname Find user with the specified nickname. For users that register via GitHub, this
     *        will be their GitHub username. Case in-sensitive. Exact match
     * @param token Find the user with this API token. Exact match
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      email: _root_.scala.Option[String] = None,
      nickname: _root_.scala.Option[String] = None,
      token: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.User]]

    /**
     * Returns information about the user with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User]

    /**
     * Used to authenticate a user with an email address and password. Successful
     * authentication returns an instance of the user model. Failed authorizations of
     * any kind are returned as a generic error with code user_authorization_failed.
     */
    def postAuthenticate(
      email: String,
      password: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication]

    /**
     * Used to authenticate a user using a github access token. This is equivalent to
     * running the following command to get the user info: curl -H 'Authorization:
     * Bearer code' https://api.github.com/user
     * 
     * @param token The GitHub assigned oauth token
     */
    def postAuthenticateGithub(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Authentication]

    /**
     * Create a new user.
     */
    def post(
      userForm: io.apibuilder.api.v0.models.UserForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User]

    /**
     * Updates information about the user with the specified guid.
     */
    def putByGuid(
      guid: _root_.java.util.UUID,
      userUpdateForm: io.apibuilder.api.v0.models.UserUpdateForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.User]
  }

  trait Validations {
    def post(
      value: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Validation]
  }

  trait Versions {
    /**
     * Search all versions of this application. Results are always paginated.
     * 
     * @param orgKey The organization key for which to search versions
     * @param applicationKey The application key for which to search versions
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def getByApplicationKey(
      orgKey: String,
      applicationKey: String,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Version]]

    /**
     * Retrieve a specific version of an application.
     * 
     * @param version The version of tthis application to download, or the keyword latest to get the
     *        latest version
     */
    def getByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version]

    /**
     * Create a new version for an application
     */
    def postByVersion(
      orgKey: String,
      version: String,
      versionForm: io.apibuilder.api.v0.models.VersionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version]

    /**
     * Upsert a version of an application
     */
    def putByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      versionForm: io.apibuilder.api.v0.models.VersionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Version]

    /**
     * Deletes a specific version.
     */
    def deleteByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Generates an example JSON document of the type with the specified name.
     * 
     * @param version The version of tthis application to download, or the keyword latest to get the
     *        latest version
     * @param typeName The name of the type (e.g. model name) for which you would like to generate a
     *        sample json document
     * @param optionalFields If true, we generate sample data for all optional fields. Otherwise the
     *        generated sample will contain only required fields, where applicable
     */
    def getExampleByApplicationKeyAndVersionAndTypeName(
      orgKey: String,
      applicationKey: String,
      version: String,
      typeName: String,
      optionalFields: _root_.scala.Option[Boolean] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[_root_.play.api.libs.json.JsObject]
  }

  trait Watches {
    /**
     * Search attributes. Always paginated.
     * 
     * @param guid Find the watch with this guid.
     * @param userGuid Find attributes for this user.
     * @param organizationKey Find attributes for this organization.
     * @param applicationKey Find attributes for this application.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.apibuilder.api.v0.models.Watch]]

    /**
     * Returns information about a specific watch.
     */
    def getByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Watch]

    /**
     * Quick check if a user is watching a specific application.
     * 
     * @param userGuid The user for which we are checking. API returns false if the user guid is not
     *        provided
     */
    def getCheck(
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: String,
      applicationKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean]

    /**
     * Create a new watch.
     */
    def post(
      watchForm: io.apibuilder.api.v0.models.WatchForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.apibuilder.api.v0.models.Watch]

    def deleteByGuid(
      guid: _root_.java.util.UUID,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.apibuilder.api.v0.models.json._
    import io.apibuilder.common.v0.models.json._
    import io.apibuilder.generator.v0.models.json._
    import io.apibuilder.spec.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.apibuilder.api.v0.Client.parseJson("Seq[io.apibuilder.api.v0.models.Error]", response, _.validate[Seq[io.apibuilder.api.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}