/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.11.6
 * apidoc:0.11.5 http://www.apidoc.me/bryzek/apidoc-api/0.11.6/play_2_4_client
 */
package com.bryzek.apidoc.api.v0.models {

  /**
   * Represents a single diff in an application
   */
  sealed trait Diff

  /**
   * Identifies the specific type of item that was indexed by search
   */
  sealed trait ItemDetail

  /**
   * An application has a name and multiple versions of its API.
   */
  case class Application(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    name: String,
    key: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility,
    description: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class ApplicationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility
  )

  /**
   * Summary of an application sufficient for display and links
   */
  case class ApplicationSummary(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    key: String
  ) extends ItemDetail

  /**
   * Represents a single change from one version of a service to another
   */
  case class Change(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    application: com.bryzek.apidoc.common.v0.models.Reference,
    fromVersion: com.bryzek.apidoc.api.v0.models.ChangeVersion,
    toVersion: com.bryzek.apidoc.api.v0.models.ChangeVersion,
    diff: com.bryzek.apidoc.api.v0.models.Diff,
    changedAt: _root_.org.joda.time.DateTime,
    changedBy: com.bryzek.apidoc.api.v0.models.UserSummary,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  /**
   * Represents a simpler model of a version specifically for the use case of
   * displaying changes
   */
  case class ChangeVersion(
    guid: _root_.java.util.UUID,
    version: String
  )

  /**
   * Separate resource used only for the few actions that require the full token.
   */
  case class CleartextToken(
    token: String
  )

  /**
   * Generated source code.
   */
  case class Code(
    generator: com.bryzek.apidoc.api.v0.models.GeneratorWithService,
    source: String,
    files: Seq[com.bryzek.apidoc.generator.v0.models.File] = Nil
  )

  /**
   * Represents a single breaking diff of an application version. A breaking diff
   * indicates that it is possible for an existing client to now experience an error
   * or invalid data due to the diff.
   */
  case class DiffBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single NON breaking diff of an application version.
   */
  case class DiffNonBreaking(
    description: String
  ) extends Diff

  /**
   * Represents a single domain name (e.g. www.apidoc.me). When a new user registers
   * and confirms their email, we automatically associate that user with a member of
   * the organization associated with their domain. For example, if you confirm your
   * account with an email address of foo@bryzek.com, we will automatically create a
   * membership request on your behalf to join the organization with domain
   * bryzek.com.
   */
  case class Domain(
    name: String
  )

  /**
   * Data used to confirm an email address. The token is an internal unique
   * identifier used to lookup the specific email address and user account for which
   * we sent an email verification email.
   */
  case class EmailVerificationConfirmationForm(
    token: String
  )

  case class Error(
    code: String,
    message: String
  )

  case class GeneratorForm(
    serviceGuid: _root_.java.util.UUID,
    generator: com.bryzek.apidoc.generator.v0.models.Generator
  )

  /**
   * Defines a service that provides one or more code generators
   */
  case class GeneratorService(
    guid: _root_.java.util.UUID,
    uri: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class GeneratorServiceForm(
    uri: String
  )

  /**
   * Wraps a service and a generator providing easier access for applications.
   */
  case class GeneratorWithService(
    service: com.bryzek.apidoc.api.v0.models.GeneratorService,
    generator: com.bryzek.apidoc.generator.v0.models.Generator
  )

  /**
   * When searching for content, the results of the search will be a list of items.
   * Each item will have enough information to render for the user, including a type
   * and item_guid to enable creating the appropriate link.
   */
  case class Item(
    guid: _root_.java.util.UUID,
    detail: com.bryzek.apidoc.api.v0.models.ItemDetail,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A membership represents a user in a specific role to an organization.
   * Memberships cannot be created directly. Instead you first create a membership
   * request, then that request is either accepted or declined.
   */
  case class Membership(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    role: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  /**
   * A membership request represents a user requesting to join an organization with a
   * specific role (e.g. as a member or an admin). Membership requests can be
   * reviewed by any current admin of the organization who can either accept or
   * decline the request.
   */
  case class MembershipRequest(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    role: String,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class MoveForm(
    orgKey: String
  )

  /**
   * An organization is used to group a set of applications together.
   */
  case class Organization(
    guid: _root_.java.util.UUID,
    key: String,
    name: String,
    namespace: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility,
    domains: Seq[com.bryzek.apidoc.api.v0.models.Domain] = Nil,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class OrganizationForm(
    name: String,
    key: _root_.scala.Option[String] = None,
    namespace: String,
    visibility: com.bryzek.apidoc.api.v0.models.Visibility = com.bryzek.apidoc.api.v0.models.Visibility("organization"),
    domains: _root_.scala.Option[Seq[String]] = None
  )

  /**
   * Represents the original input used to create an application version
   */
  case class Original(
    `type`: com.bryzek.apidoc.api.v0.models.OriginalType,
    data: String
  )

  case class OriginalForm(
    `type`: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.OriginalType] = None,
    data: String
  )

  /**
   * Allows a user to change their password with authentication from a token.
   */
  case class PasswordReset(
    token: String,
    password: String
  )

  /**
   * Create a password reset request - e.g. an email containing a one time URL to
   * change a password
   */
  case class PasswordResetRequest(
    email: String
  )

  /**
   * On a successful password reset, return some metadata about the user modified.
   */
  case class PasswordResetSuccess(
    userGuid: _root_.java.util.UUID
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    user: com.bryzek.apidoc.api.v0.models.User,
    publication: com.bryzek.apidoc.api.v0.models.Publication,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class SubscriptionForm(
    organizationKey: String,
    userGuid: _root_.java.util.UUID,
    publication: com.bryzek.apidoc.api.v0.models.Publication
  )

  /**
   * A token gives a user access to the API.
   */
  case class Token(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    maskedToken: String,
    description: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class TokenForm(
    userGuid: _root_.java.util.UUID,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A user is a top level person interacting with the api doc server.
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class UserForm(
    email: String,
    password: String,
    nickname: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Summary of a user sufficient for display
   */
  case class UserSummary(
    guid: _root_.java.util.UUID,
    nickname: String
  )

  case class UserUpdateForm(
    email: String,
    nickname: String,
    name: _root_.scala.Option[String] = None
  )

  /**
   * Used only to validate json files - used as a resource where http status code
   * defines success
   */
  case class Validation(
    valid: Boolean,
    errors: Seq[String] = Nil
  )

  /**
   * Represents a unique version of the application.
   */
  case class Version(
    guid: _root_.java.util.UUID,
    organization: com.bryzek.apidoc.common.v0.models.Reference,
    application: com.bryzek.apidoc.common.v0.models.Reference,
    version: String,
    original: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Original] = None,
    service: com.bryzek.apidoc.spec.v0.models.Service,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class VersionForm(
    originalForm: com.bryzek.apidoc.api.v0.models.OriginalForm,
    visibility: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Visibility] = None
  )

  /**
   * Users can watch individual applications which enables features like receiving an
   * email notification when there is a new version of an application.
   */
  case class Watch(
    guid: _root_.java.util.UUID,
    user: com.bryzek.apidoc.api.v0.models.User,
    organization: com.bryzek.apidoc.api.v0.models.Organization,
    application: com.bryzek.apidoc.api.v0.models.Application,
    audit: com.bryzek.apidoc.common.v0.models.Audit
  )

  case class WatchForm(
    userGuid: _root_.java.util.UUID,
    organizationKey: String,
    applicationKey: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Diff, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class DiffUndefinedType(
    description: String
  ) extends Diff

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemDetail, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   */
  case class ItemDetailUndefinedType(
    description: String
  ) extends ItemDetail

  sealed trait OriginalType

  object OriginalType {

    /**
     * The original is in the api.json format
     */
    case object ApiJson extends OriginalType { override def toString = "api_json" }
    /**
     * The original in the swagger.json format
     */
    case object SwaggerJson extends OriginalType { override def toString = "swagger_json" }
    /**
     * The original is in Avro Idl format
     */
    case object AvroIdl extends OriginalType { override def toString = "avro_idl" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends OriginalType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(ApiJson, SwaggerJson, AvroIdl)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): OriginalType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[OriginalType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing to an email alert whenever a new version of an application
   * is created.
   */
  sealed trait Publication

  object Publication {

    /**
     * For organizations for which I am an administrator, email me whenever a user
     * applies to join the org.
     */
    case object MembershipRequestsCreate extends Publication { override def toString = "membership_requests.create" }
    /**
     * For organizations for which I am a member, email me whenever a user joins the
     * org.
     */
    case object MembershipsCreate extends Publication { override def toString = "memberships.create" }
    /**
     * For organizations for which I am a member, email me whenever an application is
     * created.
     */
    case object ApplicationsCreate extends Publication { override def toString = "applications.create" }
    /**
     * For applications that I watch, email me whenever a version is created.
     */
    case object VersionsCreate extends Publication { override def toString = "versions.create" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(MembershipRequestsCreate, MembershipsCreate, ApplicationsCreate, VersionsCreate)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  /**
   * Controls who is able to view this version
   */
  sealed trait Visibility

  object Visibility {

    /**
     * Only the creator can view this application
     */
    case object User extends Visibility { override def toString = "user" }
    /**
     * Any member of the organization can view this application
     */
    case object Organization extends Visibility { override def toString = "organization" }
    /**
     * Anybody, including non logged in users, can view this application
     */
    case object Public extends Visibility { override def toString = "public" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(User, Organization, Public)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package com.bryzek.apidoc.api.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.bryzek.apidoc.api.v0.models.json._
    import com.bryzek.apidoc.common.v0.models.json._
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsApidocapiOriginalType = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.OriginalType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.OriginalType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.OriginalType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.OriginalType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiOriginalType(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectOriginalType(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiOriginalType: play.api.libs.json.Writes[OriginalType] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OriginalType] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OriginalType) = {
          jsonWritesApidocapiOriginalType(obj)
        }
      }
    }

    implicit val jsonReadsApidocapiPublication = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Publication(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiPublication(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Publication] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Publication) = {
          jsonWritesApidocapiPublication(obj)
        }
      }
    }

    implicit val jsonReadsApidocapiVisibility = new play.api.libs.json.Reads[com.bryzek.apidoc.api.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.bryzek.apidoc.api.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesApidocapiVisibility(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesApidocapiVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Visibility] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Visibility) = {
          jsonWritesApidocapiVisibility(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplication: play.api.libs.json.Reads[Application] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "name").read[String] and
        (__ \ "key").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Application.apply _)
    }

    def jsObjectApplication(obj: com.bryzek.apidoc.api.v0.models.Application) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "key" -> play.api.libs.json.JsString(obj.key),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiApplication: play.api.libs.json.Writes[Application] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Application] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Application) = {
          jsObjectApplication(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplicationForm: play.api.libs.json.Reads[ApplicationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility]
      )(ApplicationForm.apply _)
    }

    def jsObjectApplicationForm(obj: com.bryzek.apidoc.api.v0.models.ApplicationForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiApplicationForm: play.api.libs.json.Writes[ApplicationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ApplicationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ApplicationForm) = {
          jsObjectApplicationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiApplicationSummary: play.api.libs.json.Reads[ApplicationSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "key").read[String]
      )(ApplicationSummary.apply _)
    }

    def jsObjectApplicationSummary(obj: com.bryzek.apidoc.api.v0.models.ApplicationSummary) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key)
      )
    }

    implicit def jsonReadsApidocapiChange: play.api.libs.json.Reads[Change] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "application").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "from_version").read[com.bryzek.apidoc.api.v0.models.ChangeVersion] and
        (__ \ "to_version").read[com.bryzek.apidoc.api.v0.models.ChangeVersion] and
        (__ \ "diff").read[com.bryzek.apidoc.api.v0.models.Diff] and
        (__ \ "changed_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "changed_by").read[com.bryzek.apidoc.api.v0.models.UserSummary] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Change.apply _)
    }

    def jsObjectChange(obj: com.bryzek.apidoc.api.v0.models.Change) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.application),
        "from_version" -> jsObjectChangeVersion(obj.fromVersion),
        "to_version" -> jsObjectChangeVersion(obj.toVersion),
        "diff" -> jsObjectDiff(obj.diff),
        "changed_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.changedAt)),
        "changed_by" -> jsObjectUserSummary(obj.changedBy),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiChange: play.api.libs.json.Writes[Change] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Change] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Change) = {
          jsObjectChange(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiChangeVersion: play.api.libs.json.Reads[ChangeVersion] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "version").read[String]
      )(ChangeVersion.apply _)
    }

    def jsObjectChangeVersion(obj: com.bryzek.apidoc.api.v0.models.ChangeVersion) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesApidocapiChangeVersion: play.api.libs.json.Writes[ChangeVersion] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ChangeVersion] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ChangeVersion) = {
          jsObjectChangeVersion(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiCleartextToken: play.api.libs.json.Reads[CleartextToken] = {
      (__ \ "token").read[String].map { x => new CleartextToken(token = x) }
    }

    def jsObjectCleartextToken(obj: com.bryzek.apidoc.api.v0.models.CleartextToken) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApidocapiCleartextToken: play.api.libs.json.Writes[CleartextToken] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.CleartextToken] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.CleartextToken) = {
          jsObjectCleartextToken(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiCode: play.api.libs.json.Reads[Code] = {
      (
        (__ \ "generator").read[com.bryzek.apidoc.api.v0.models.GeneratorWithService] and
        (__ \ "source").read[String] and
        (__ \ "files").read[Seq[com.bryzek.apidoc.generator.v0.models.File]]
      )(Code.apply _)
    }

    def jsObjectCode(obj: com.bryzek.apidoc.api.v0.models.Code) = {
      play.api.libs.json.Json.obj(
        "generator" -> jsObjectGeneratorWithService(obj.generator),
        "source" -> play.api.libs.json.JsString(obj.source),
        "files" -> play.api.libs.json.Json.toJson(obj.files)
      )
    }

    implicit def jsonWritesApidocapiCode: play.api.libs.json.Writes[Code] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Code] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Code) = {
          jsObjectCode(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiDiffBreaking: play.api.libs.json.Reads[DiffBreaking] = {
      (__ \ "description").read[String].map { x => new DiffBreaking(description = x) }
    }

    def jsObjectDiffBreaking(obj: com.bryzek.apidoc.api.v0.models.DiffBreaking) = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApidocapiDiffNonBreaking: play.api.libs.json.Reads[DiffNonBreaking] = {
      (__ \ "description").read[String].map { x => new DiffNonBreaking(description = x) }
    }

    def jsObjectDiffNonBreaking(obj: com.bryzek.apidoc.api.v0.models.DiffNonBreaking) = {
      play.api.libs.json.Json.obj(
        "description" -> play.api.libs.json.JsString(obj.description)
      )
    }

    implicit def jsonReadsApidocapiDomain: play.api.libs.json.Reads[Domain] = {
      (__ \ "name").read[String].map { x => new Domain(name = x) }
    }

    def jsObjectDomain(obj: com.bryzek.apidoc.api.v0.models.Domain) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesApidocapiDomain: play.api.libs.json.Writes[Domain] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Domain] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Domain) = {
          jsObjectDomain(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiEmailVerificationConfirmationForm: play.api.libs.json.Reads[EmailVerificationConfirmationForm] = {
      (__ \ "token").read[String].map { x => new EmailVerificationConfirmationForm(token = x) }
    }

    def jsObjectEmailVerificationConfirmationForm(obj: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesApidocapiEmailVerificationConfirmationForm: play.api.libs.json.Writes[EmailVerificationConfirmationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm) = {
          jsObjectEmailVerificationConfirmationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    def jsObjectError(obj: com.bryzek.apidoc.api.v0.models.Error) = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesApidocapiError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Error] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorForm: play.api.libs.json.Reads[GeneratorForm] = {
      (
        (__ \ "service_guid").read[_root_.java.util.UUID] and
        (__ \ "generator").read[com.bryzek.apidoc.generator.v0.models.Generator]
      )(GeneratorForm.apply _)
    }

    def jsObjectGeneratorForm(obj: com.bryzek.apidoc.api.v0.models.GeneratorForm) = {
      play.api.libs.json.Json.obj(
        "service_guid" -> play.api.libs.json.JsString(obj.serviceGuid.toString),
        "generator" -> com.bryzek.apidoc.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApidocapiGeneratorForm: play.api.libs.json.Writes[GeneratorForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorForm) = {
          jsObjectGeneratorForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorService: play.api.libs.json.Reads[GeneratorService] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "uri").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(GeneratorService.apply _)
    }

    def jsObjectGeneratorService(obj: com.bryzek.apidoc.api.v0.models.GeneratorService) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiGeneratorService: play.api.libs.json.Writes[GeneratorService] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorService] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorService) = {
          jsObjectGeneratorService(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorServiceForm: play.api.libs.json.Reads[GeneratorServiceForm] = {
      (__ \ "uri").read[String].map { x => new GeneratorServiceForm(uri = x) }
    }

    def jsObjectGeneratorServiceForm(obj: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm) = {
      play.api.libs.json.Json.obj(
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesApidocapiGeneratorServiceForm: play.api.libs.json.Writes[GeneratorServiceForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorServiceForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm) = {
          jsObjectGeneratorServiceForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiGeneratorWithService: play.api.libs.json.Reads[GeneratorWithService] = {
      (
        (__ \ "service").read[com.bryzek.apidoc.api.v0.models.GeneratorService] and
        (__ \ "generator").read[com.bryzek.apidoc.generator.v0.models.Generator]
      )(GeneratorWithService.apply _)
    }

    def jsObjectGeneratorWithService(obj: com.bryzek.apidoc.api.v0.models.GeneratorWithService) = {
      play.api.libs.json.Json.obj(
        "service" -> jsObjectGeneratorService(obj.service),
        "generator" -> com.bryzek.apidoc.generator.v0.models.json.jsObjectGenerator(obj.generator)
      )
    }

    implicit def jsonWritesApidocapiGeneratorWithService: play.api.libs.json.Writes[GeneratorWithService] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.GeneratorWithService] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.GeneratorWithService) = {
          jsObjectGeneratorWithService(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "detail").read[com.bryzek.apidoc.api.v0.models.ItemDetail] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    def jsObjectItem(obj: com.bryzek.apidoc.api.v0.models.Item) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "detail" -> jsObjectItemDetail(obj.detail),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Item] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: com.bryzek.apidoc.api.v0.models.Membership) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Membership] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMembershipRequest: play.api.libs.json.Reads[MembershipRequest] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "role").read[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(MembershipRequest.apply _)
    }

    def jsObjectMembershipRequest(obj: com.bryzek.apidoc.api.v0.models.MembershipRequest) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiMembershipRequest: play.api.libs.json.Writes[MembershipRequest] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.MembershipRequest] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.MembershipRequest) = {
          jsObjectMembershipRequest(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiMoveForm: play.api.libs.json.Reads[MoveForm] = {
      (__ \ "org_key").read[String].map { x => new MoveForm(orgKey = x) }
    }

    def jsObjectMoveForm(obj: com.bryzek.apidoc.api.v0.models.MoveForm) = {
      play.api.libs.json.Json.obj(
        "org_key" -> play.api.libs.json.JsString(obj.orgKey)
      )
    }

    implicit def jsonWritesApidocapiMoveForm: play.api.libs.json.Writes[MoveForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.MoveForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.MoveForm) = {
          jsObjectMoveForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "domains").read[Seq[com.bryzek.apidoc.api.v0.models.Domain]] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: com.bryzek.apidoc.api.v0.models.Organization) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "key" -> play.api.libs.json.JsString(obj.key),
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "domains" -> play.api.libs.json.Json.toJson(obj.domains),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Organization] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String] and
        (__ \ "namespace").read[String] and
        (__ \ "visibility").read[com.bryzek.apidoc.api.v0.models.Visibility] and
        (__ \ "domains").readNullable[Seq[String]]
      )(OrganizationForm.apply _)
    }

    def jsObjectOrganizationForm(obj: com.bryzek.apidoc.api.v0.models.OrganizationForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "namespace" -> play.api.libs.json.JsString(obj.namespace),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString)
      ) ++ (obj.key match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("key" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.domains match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("domains" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OrganizationForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOriginal: play.api.libs.json.Reads[Original] = {
      (
        (__ \ "type").read[com.bryzek.apidoc.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(Original.apply _)
    }

    def jsObjectOriginal(obj: com.bryzek.apidoc.api.v0.models.Original) = {
      play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "data" -> play.api.libs.json.JsString(obj.data)
      )
    }

    implicit def jsonWritesApidocapiOriginal: play.api.libs.json.Writes[Original] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Original] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Original) = {
          jsObjectOriginal(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiOriginalForm: play.api.libs.json.Reads[OriginalForm] = {
      (
        (__ \ "type").readNullable[com.bryzek.apidoc.api.v0.models.OriginalType] and
        (__ \ "data").read[String]
      )(OriginalForm.apply _)
    }

    def jsObjectOriginalForm(obj: com.bryzek.apidoc.api.v0.models.OriginalForm) = {
      play.api.libs.json.Json.obj(
        "data" -> play.api.libs.json.JsString(obj.data)
      ) ++ (obj.`type` match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("type" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiOriginalForm: play.api.libs.json.Writes[OriginalForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.OriginalForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.OriginalForm) = {
          jsObjectOriginalForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordReset: play.api.libs.json.Reads[PasswordReset] = {
      (
        (__ \ "token").read[String] and
        (__ \ "password").read[String]
      )(PasswordReset.apply _)
    }

    def jsObjectPasswordReset(obj: com.bryzek.apidoc.api.v0.models.PasswordReset) = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token),
        "password" -> play.api.libs.json.JsString(obj.password)
      )
    }

    implicit def jsonWritesApidocapiPasswordReset: play.api.libs.json.Writes[PasswordReset] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordReset] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordReset) = {
          jsObjectPasswordReset(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordResetRequest: play.api.libs.json.Reads[PasswordResetRequest] = {
      (__ \ "email").read[String].map { x => new PasswordResetRequest(email = x) }
    }

    def jsObjectPasswordResetRequest(obj: com.bryzek.apidoc.api.v0.models.PasswordResetRequest) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonWritesApidocapiPasswordResetRequest: play.api.libs.json.Writes[PasswordResetRequest] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordResetRequest] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordResetRequest) = {
          jsObjectPasswordResetRequest(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiPasswordResetSuccess: play.api.libs.json.Reads[PasswordResetSuccess] = {
      (__ \ "user_guid").read[_root_.java.util.UUID].map { x => new PasswordResetSuccess(userGuid = x) }
    }

    def jsObjectPasswordResetSuccess(obj: com.bryzek.apidoc.api.v0.models.PasswordResetSuccess) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString)
      )
    }

    implicit def jsonWritesApidocapiPasswordResetSuccess: play.api.libs.json.Writes[PasswordResetSuccess] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.PasswordResetSuccess] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.PasswordResetSuccess) = {
          jsObjectPasswordResetSuccess(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "publication").read[com.bryzek.apidoc.api.v0.models.Publication] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Subscription.apply _)
    }

    def jsObjectSubscription(obj: com.bryzek.apidoc.api.v0.models.Subscription) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> jsObjectOrganization(obj.organization),
        "user" -> jsObjectUser(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiSubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Subscription] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "organization_key").read[String] and
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "publication").read[com.bryzek.apidoc.api.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    def jsObjectSubscriptionForm(obj: com.bryzek.apidoc.api.v0.models.SubscriptionForm) = {
      play.api.libs.json.Json.obj(
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesApidocapiSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.SubscriptionForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "masked_token").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Token.apply _)
    }

    def jsObjectToken(obj: com.bryzek.apidoc.api.v0.models.Token) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "masked_token" -> play.api.libs.json.JsString(obj.maskedToken),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Token] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "description").readNullable[String]
      )(TokenForm.apply _)
    }

    def jsObjectTokenForm(obj: com.bryzek.apidoc.api.v0.models.TokenForm) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.TokenForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(User.apply _)
    }

    def jsObjectUser(obj: com.bryzek.apidoc.api.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.User] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "password").read[String] and
        (__ \ "nickname").readNullable[String] and
        (__ \ "name").readNullable[String]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: com.bryzek.apidoc.api.v0.models.UserForm) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "password" -> play.api.libs.json.JsString(obj.password)
      ) ++ (obj.nickname match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("nickname" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "nickname").read[String]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: com.bryzek.apidoc.api.v0.models.UserSummary) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      )
    }

    implicit def jsonWritesApidocapiUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserSummary] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiUserUpdateForm: play.api.libs.json.Reads[UserUpdateForm] = {
      (
        (__ \ "email").read[String] and
        (__ \ "nickname").read[String] and
        (__ \ "name").readNullable[String]
      )(UserUpdateForm.apply _)
    }

    def jsObjectUserUpdateForm(obj: com.bryzek.apidoc.api.v0.models.UserUpdateForm) = {
      play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.JsString(obj.email),
        "nickname" -> play.api.libs.json.JsString(obj.nickname)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiUserUpdateForm: play.api.libs.json.Writes[UserUpdateForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.UserUpdateForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.UserUpdateForm) = {
          jsObjectUserUpdateForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiValidation: play.api.libs.json.Reads[Validation] = {
      (
        (__ \ "valid").read[Boolean] and
        (__ \ "errors").read[Seq[String]]
      )(Validation.apply _)
    }

    def jsObjectValidation(obj: com.bryzek.apidoc.api.v0.models.Validation) = {
      play.api.libs.json.Json.obj(
        "valid" -> play.api.libs.json.JsBoolean(obj.valid),
        "errors" -> play.api.libs.json.Json.toJson(obj.errors)
      )
    }

    implicit def jsonWritesApidocapiValidation: play.api.libs.json.Writes[Validation] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Validation] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Validation) = {
          jsObjectValidation(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiVersion: play.api.libs.json.Reads[Version] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "organization").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "application").read[com.bryzek.apidoc.common.v0.models.Reference] and
        (__ \ "version").read[String] and
        (__ \ "original").readNullable[com.bryzek.apidoc.api.v0.models.Original] and
        (__ \ "service").read[com.bryzek.apidoc.spec.v0.models.Service] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Version.apply _)
    }

    def jsObjectVersion(obj: com.bryzek.apidoc.api.v0.models.Version) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "organization" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.organization),
        "application" -> com.bryzek.apidoc.common.v0.models.json.jsObjectReference(obj.application),
        "version" -> play.api.libs.json.JsString(obj.version),
        "service" -> com.bryzek.apidoc.spec.v0.models.json.jsObjectService(obj.service),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      ) ++ (obj.original match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("original" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiVersion: play.api.libs.json.Writes[Version] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Version] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Version) = {
          jsObjectVersion(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiVersionForm: play.api.libs.json.Reads[VersionForm] = {
      (
        (__ \ "original_form").read[com.bryzek.apidoc.api.v0.models.OriginalForm] and
        (__ \ "visibility").readNullable[com.bryzek.apidoc.api.v0.models.Visibility]
      )(VersionForm.apply _)
    }

    def jsObjectVersionForm(obj: com.bryzek.apidoc.api.v0.models.VersionForm) = {
      play.api.libs.json.Json.obj(
        "original_form" -> jsObjectOriginalForm(obj.originalForm)
      ) ++ (obj.visibility match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("visibility" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesApidocapiVersionForm: play.api.libs.json.Writes[VersionForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.VersionForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.VersionForm) = {
          jsObjectVersionForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiWatch: play.api.libs.json.Reads[Watch] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user").read[com.bryzek.apidoc.api.v0.models.User] and
        (__ \ "organization").read[com.bryzek.apidoc.api.v0.models.Organization] and
        (__ \ "application").read[com.bryzek.apidoc.api.v0.models.Application] and
        (__ \ "audit").read[com.bryzek.apidoc.common.v0.models.Audit]
      )(Watch.apply _)
    }

    def jsObjectWatch(obj: com.bryzek.apidoc.api.v0.models.Watch) = {
      play.api.libs.json.Json.obj(
        "guid" -> play.api.libs.json.JsString(obj.guid.toString),
        "user" -> jsObjectUser(obj.user),
        "organization" -> jsObjectOrganization(obj.organization),
        "application" -> jsObjectApplication(obj.application),
        "audit" -> com.bryzek.apidoc.common.v0.models.json.jsObjectAudit(obj.audit)
      )
    }

    implicit def jsonWritesApidocapiWatch: play.api.libs.json.Writes[Watch] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Watch] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Watch) = {
          jsObjectWatch(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiWatchForm: play.api.libs.json.Reads[WatchForm] = {
      (
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "organization_key").read[String] and
        (__ \ "application_key").read[String]
      )(WatchForm.apply _)
    }

    def jsObjectWatchForm(obj: com.bryzek.apidoc.api.v0.models.WatchForm) = {
      play.api.libs.json.Json.obj(
        "user_guid" -> play.api.libs.json.JsString(obj.userGuid.toString),
        "organization_key" -> play.api.libs.json.JsString(obj.organizationKey),
        "application_key" -> play.api.libs.json.JsString(obj.applicationKey)
      )
    }

    implicit def jsonWritesApidocapiWatchForm: play.api.libs.json.Writes[WatchForm] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.WatchForm] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.WatchForm) = {
          jsObjectWatchForm(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiDiff: play.api.libs.json.Reads[Diff] = new play.api.libs.json.Reads[Diff] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Diff] = {
        (js \ "type").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "diff_breaking" => js.validate[com.bryzek.apidoc.api.v0.models.DiffBreaking]
              case "diff_non_breaking" => js.validate[com.bryzek.apidoc.api.v0.models.DiffNonBreaking]
              case other => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.DiffUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectDiff(obj: com.bryzek.apidoc.api.v0.models.Diff) = {
      obj match {
        case x: com.bryzek.apidoc.api.v0.models.DiffBreaking => jsObjectDiffBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_breaking")
        case x: com.bryzek.apidoc.api.v0.models.DiffNonBreaking => jsObjectDiffNonBreaking(x) ++ play.api.libs.json.Json.obj("type" -> "diff_non_breaking")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocapiDiff: play.api.libs.json.Writes[Diff] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.Diff] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.Diff) = {
          jsObjectDiff(obj)
        }
      }
    }

    implicit def jsonReadsApidocapiItemDetail: play.api.libs.json.Reads[ItemDetail] = new play.api.libs.json.Reads[ItemDetail] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemDetail] = {
        (js \ "type").validate[String] match {
          case play.api.libs.json.JsError(msg) => play.api.libs.json.JsError(msg)
          case play.api.libs.json.JsSuccess(discriminator, _) => {
            discriminator match {
              case "application_summary" => js.validate[com.bryzek.apidoc.api.v0.models.ApplicationSummary]
              case other => play.api.libs.json.JsSuccess(com.bryzek.apidoc.api.v0.models.ItemDetailUndefinedType(other))
            }
          }
        }
      }
    }

    def jsObjectItemDetail(obj: com.bryzek.apidoc.api.v0.models.ItemDetail) = {
      obj match {
        case x: com.bryzek.apidoc.api.v0.models.ApplicationSummary => jsObjectApplicationSummary(x) ++ play.api.libs.json.Json.obj("type" -> "application_summary")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesApidocapiItemDetail: play.api.libs.json.Writes[ItemDetail] = {
      new play.api.libs.json.Writes[com.bryzek.apidoc.api.v0.models.ItemDetail] {
        def writes(obj: com.bryzek.apidoc.api.v0.models.ItemDetail) = {
          jsObjectItemDetail(obj)
        }
      }
    }
  }
}

package com.bryzek.apidoc.api.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.bryzek.apidoc.api.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: OriginalType
    private[this] val enumOriginalTypeNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.apidoc.api.v0.models.OriginalType.all.mkString(", ")}"

    implicit val pathBindableEnumOriginalType = new PathBindable.Parsing[com.bryzek.apidoc.api.v0.models.OriginalType] (
      OriginalType.fromString(_).get, _.toString, enumOriginalTypeNotFound
    )

    implicit val queryStringBindableEnumOriginalType = new QueryStringBindable.Parsing[com.bryzek.apidoc.api.v0.models.OriginalType](
      OriginalType.fromString(_).get, _.toString, enumOriginalTypeNotFound
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.apidoc.api.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[com.bryzek.apidoc.api.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[com.bryzek.apidoc.api.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: Exception) => s"Unrecognized $key, should be one of ${com.bryzek.apidoc.api.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[com.bryzek.apidoc.api.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[com.bryzek.apidoc.api.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package com.bryzek.apidoc.api.v0 {

  object Constants {

    val Namespace = "com.bryzek.apidoc.api.v0"
    val UserAgent = "apidoc:0.11.5 http://www.apidoc.me/bryzek/apidoc-api/0.11.6/play_2_4_client"
    val Version = "0.11.6"
    val VersionMajor = 0

  }

  class Client(
    apiUrl: String,
    auth: scala.Option[com.bryzek.apidoc.api.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) {
    import com.bryzek.apidoc.api.v0.models.json._
    import com.bryzek.apidoc.common.v0.models.json._
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    private[this] val logger = play.api.Logger("com.bryzek.apidoc.api.v0.Client")

    logger.info(s"Initializing com.bryzek.apidoc.api.v0.Client for url $apiUrl")

    def applications: Applications = Applications

    def changes: Changes = Changes

    def code: Code = Code

    def domains: Domains = Domains

    def emailVerificationConfirmationForms: EmailVerificationConfirmationForms = EmailVerificationConfirmationForms

    def generatorServices: GeneratorServices = GeneratorServices

    def generatorWithServices: GeneratorWithServices = GeneratorWithServices

    def healthchecks: Healthchecks = Healthchecks

    def items: Items = Items

    def membershipRequests: MembershipRequests = MembershipRequests

    def memberships: Memberships = Memberships

    def organizations: Organizations = Organizations

    def passwordResetRequests: PasswordResetRequests = PasswordResetRequests

    def passwordResets: PasswordResets = PasswordResets

    def subscriptions: Subscriptions = Subscriptions

    def tokens: Tokens = Tokens

    def users: Users = Users

    def validations: Validations = Validations

    def versions: Versions = Versions

    def watches: Watches = Watches

    object Applications extends Applications {
      override def get(
        orgKey: String,
        name: _root_.scala.Option[String] = None,
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        key: _root_.scala.Option[String] = None,
        hasVersion: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Application]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          guid.map("guid" -> _.toString),
          key.map("key" -> _),
          hasVersion.map("has_version" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Application]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Application]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        orgKey: String,
        applicationForm: com.bryzek.apidoc.api.v0.models.ApplicationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Application", r, _.validate[com.bryzek.apidoc.api.v0.models.Application])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByApplicationKey(
        orgKey: String,
        applicationKey: String,
        applicationForm: com.bryzek.apidoc.api.v0.models.ApplicationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(applicationForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Application", r, _.validate[com.bryzek.apidoc.api.v0.models.Application])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByApplicationKey(
        orgKey: String,
        applicationKey: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }

      override def postMoveByApplicationKey(
        orgKey: String,
        applicationKey: String,
        moveForm: com.bryzek.apidoc.api.v0.models.MoveForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application] = {
        val payload = play.api.libs.json.Json.toJson(moveForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/move", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Application", r, _.validate[com.bryzek.apidoc.api.v0.models.Application])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Changes extends Changes {
      override def get(
        orgKey: _root_.scala.Option[String] = None,
        applicationKey: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Change]] = {
        val queryParameters = Seq(
          orgKey.map("org_key" -> _),
          applicationKey.map("application_key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/changes", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Change]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Change]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Code extends Code {
      override def get(
        orgKey: String,
        applicationKey: String,
        version: String,
        generatorKey: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Code] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(generatorKey, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Code", r, _.validate[com.bryzek.apidoc.api.v0.models.Code])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Domains extends Domains {
      override def post(
        orgKey: String,
        domain: com.bryzek.apidoc.api.v0.models.Domain
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Domain] = {
        val payload = play.api.libs.json.Json.toJson(domain)

        _executeRequest("POST", s"/domains/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Domain", r, _.validate[com.bryzek.apidoc.api.v0.models.Domain])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByName(
        orgKey: String,
        name: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/domains/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(name, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object EmailVerificationConfirmationForms extends EmailVerificationConfirmationForms {
      override def post(
        emailVerificationConfirmationForm: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(emailVerificationConfirmationForm)

        _executeRequest("POST", s"/email_verification_confirmations", body = Some(payload)).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object GeneratorServices extends GeneratorServices {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        uri: _root_.scala.Option[String] = None,
        generatorKey: _root_.scala.Option[String] = None,
        limit: Long = 100,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.GeneratorService]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          uri.map("uri" -> _),
          generatorKey.map("generator_key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/generator_services", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.GeneratorService]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.GeneratorService]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorService] = {
        _executeRequest("GET", s"/generator_services/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.GeneratorService", r, _.validate[com.bryzek.apidoc.api.v0.models.GeneratorService])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        generatorServiceForm: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorService] = {
        val payload = play.api.libs.json.Json.toJson(generatorServiceForm)

        _executeRequest("POST", s"/generator_services", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.GeneratorService", r, _.validate[com.bryzek.apidoc.api.v0.models.GeneratorService])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/generator_services/${guid}").map {
          case r if r.status == 204 => ()
          case r if r.status == 403 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 403, 404")
        }
      }
    }

    object GeneratorWithServices extends GeneratorWithServices {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        serviceGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        serviceUri: _root_.scala.Option[String] = None,
        key: _root_.scala.Option[String] = None,
        limit: Long = 100,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.GeneratorWithService]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          serviceGuid.map("service_guid" -> _.toString),
          serviceUri.map("service_uri" -> _),
          key.map("key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/generators", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.GeneratorWithService]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.GeneratorWithService]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByKey(
        key: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorWithService] = {
        _executeRequest("GET", s"/generators/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.GeneratorWithService", r, _.validate[com.bryzek.apidoc.api.v0.models.GeneratorWithService])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.generator.v0.models.Healthcheck", r, _.validate[com.bryzek.apidoc.generator.v0.models.Healthcheck])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getMigrate()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, String]] = {
        _executeRequest("GET", s"/_internal_/migrate").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Map[String, String]", r, _.validate[Map[String, String]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Items extends Items {
      override def get(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/items", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Item]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Item]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Item] = {
        _executeRequest("GET", s"/items/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Item", r, _.validate[com.bryzek.apidoc.api.v0.models.Item])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }
    }

    object MembershipRequests extends MembershipRequests {
      override def get(
        orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        orgKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.MembershipRequest]] = {
        val queryParameters = Seq(
          orgGuid.map("org_guid" -> _.toString),
          orgKey.map("org_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/membership_requests", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.MembershipRequest]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.MembershipRequest]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        orgGuid: _root_.java.util.UUID,
        userGuid: _root_.java.util.UUID,
        role: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.MembershipRequest] = {
        val payload = play.api.libs.json.Json.obj(
          "org_guid" -> play.api.libs.json.Json.toJson(orgGuid),
          "user_guid" -> play.api.libs.json.Json.toJson(userGuid),
          "role" -> play.api.libs.json.Json.toJson(role)
        )

        _executeRequest("POST", s"/membership_requests", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.MembershipRequest", r, _.validate[com.bryzek.apidoc.api.v0.models.MembershipRequest])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def postAcceptByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/membership_requests/${guid}/accept").map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }

      override def postDeclineByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/membership_requests/${guid}/decline").map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        orgKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        role: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Membership]] = {
        val queryParameters = Seq(
          orgGuid.map("org_guid" -> _.toString),
          orgKey.map("org_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          role.map("role" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Membership]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Membership]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Membership", r, _.validate[com.bryzek.apidoc.api.v0.models.Membership])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${guid}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        key: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        namespace: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Organization]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          key.map("key" -> _),
          name.map("name" -> _),
          namespace.map("namespace" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Organization]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Organization]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByKey(
        key: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.api.v0.models.Organization])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        organizationForm: com.bryzek.apidoc.api.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.api.v0.models.Organization])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByKey(
        key: String,
        organizationForm: com.bryzek.apidoc.api.v0.models.OrganizationForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Organization", r, _.validate[com.bryzek.apidoc.api.v0.models.Organization])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByKey(
        key: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(key, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object PasswordResetRequests extends PasswordResetRequests {
      override def post(
        passwordResetRequest: com.bryzek.apidoc.api.v0.models.PasswordResetRequest
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(passwordResetRequest)

        _executeRequest("POST", s"/password_reset_requests", body = Some(payload)).map {
          case r if r.status == 204 => ()
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 409")
        }
      }
    }

    object PasswordResets extends PasswordResets {
      override def post(
        passwordReset: com.bryzek.apidoc.api.v0.models.PasswordReset
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.PasswordResetSuccess] = {
        val payload = play.api.libs.json.Json.toJson(passwordReset)

        _executeRequest("POST", s"/password_resets", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.PasswordResetSuccess", r, _.validate[com.bryzek.apidoc.api.v0.models.PasswordResetSuccess])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: _root_.scala.Option[String] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        publication: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Subscription]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          organizationKey.map("organization_key" -> _),
          userGuid.map("user_guid" -> _.toString),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Subscription]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Subscription]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Subscription", r, _.validate[com.bryzek.apidoc.api.v0.models.Subscription])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        subscriptionForm: com.bryzek.apidoc.api.v0.models.SubscriptionForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        _executeRequest("POST", s"/subscriptions", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Subscription", r, _.validate[com.bryzek.apidoc.api.v0.models.Subscription])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/subscriptions/${guid}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Tokens extends Tokens {
      override def getUsersByUserGuid(
        userGuid: _root_.java.util.UUID,
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Token]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/tokens/users/${userGuid}", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Token]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Token]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getCleartextByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.CleartextToken] = {
        _executeRequest("GET", s"/tokens/${guid}/cleartext").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.CleartextToken", r, _.validate[com.bryzek.apidoc.api.v0.models.CleartextToken])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def post(
        tokenForm: com.bryzek.apidoc.api.v0.models.TokenForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Token] = {
        val payload = play.api.libs.json.Json.toJson(tokenForm)

        _executeRequest("POST", s"/tokens", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Token", r, _.validate[com.bryzek.apidoc.api.v0.models.Token])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${guid}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Users extends Users {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        email: _root_.scala.Option[String] = None,
        token: _root_.scala.Option[String] = None
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.User]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          email.map("email" -> _),
          token.map("token" -> _)
        ).flatten

        _executeRequest("GET", s"/users", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.User]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.User]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User] = {
        _executeRequest("GET", s"/users/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.User", r, _.validate[com.bryzek.apidoc.api.v0.models.User])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postAuthenticate(
        email: String,
        password: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.obj(
          "email" -> play.api.libs.json.Json.toJson(email),
          "password" -> play.api.libs.json.Json.toJson(password)
        )

        _executeRequest("POST", s"/users/authenticate", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.User", r, _.validate[com.bryzek.apidoc.api.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def post(
        userForm: com.bryzek.apidoc.api.v0.models.UserForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/users", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.User", r, _.validate[com.bryzek.apidoc.api.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByGuid(
        guid: _root_.java.util.UUID,
        userUpdateForm: com.bryzek.apidoc.api.v0.models.UserUpdateForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userUpdateForm)

        _executeRequest("PUT", s"/users/${guid}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.User", r, _.validate[com.bryzek.apidoc.api.v0.models.User])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }
    }

    object Validations extends Validations {
      override def post(
        value: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Validation] = {
        val payload = play.api.libs.json.Json.toJson(value)

        _executeRequest("POST", s"/validations", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Validation", r, _.validate[com.bryzek.apidoc.api.v0.models.Validation])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object Versions extends Versions {
      override def getByApplicationKey(
        orgKey: String,
        applicationKey: String,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Version]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Version]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Version]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version] = {
        _executeRequest("GET", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Version", r, _.validate[com.bryzek.apidoc.api.v0.models.Version])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postByVersion(
        orgKey: String,
        version: String,
        versionForm: com.bryzek.apidoc.api.v0.models.VersionForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version] = {
        val payload = play.api.libs.json.Json.toJson(versionForm)

        _executeRequest("POST", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Version", r, _.validate[com.bryzek.apidoc.api.v0.models.Version])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def putByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String,
        versionForm: com.bryzek.apidoc.api.v0.models.VersionForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version] = {
        val payload = play.api.libs.json.Json.toJson(versionForm)

        _executeRequest("PUT", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}", body = Some(payload)).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Version", r, _.validate[com.bryzek.apidoc.api.v0.models.Version])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 409")
        }
      }

      override def deleteByApplicationKeyAndVersion(
        orgKey: String,
        applicationKey: String,
        version: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/${play.utils.UriEncoding.encodePathSegment(orgKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(applicationKey, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(version, "UTF-8")}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Watches extends Watches {
      override def get(
        guid: _root_.scala.Option[_root_.java.util.UUID] = None,
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: _root_.scala.Option[String] = None,
        applicationKey: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Watch]] = {
        val queryParameters = Seq(
          guid.map("guid" -> _.toString),
          userGuid.map("user_guid" -> _.toString),
          organizationKey.map("organization_key" -> _),
          applicationKey.map("application_key" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/watches", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Watch]", r, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Watch]])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Watch] = {
        _executeRequest("GET", s"/watches/${guid}").map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Watch", r, _.validate[com.bryzek.apidoc.api.v0.models.Watch])
          case r if r.status == 404 => throw new com.bryzek.apidoc.api.v0.errors.UnitResponse(r.status)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def getCheck(
        userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
        organizationKey: String,
        applicationKey: String
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean] = {
        val queryParameters = Seq(
          userGuid.map("user_guid" -> _.toString),
          Some("organization_key" -> organizationKey),
          Some("application_key" -> applicationKey)
        ).flatten

        _executeRequest("GET", s"/watches/check", queryParameters = queryParameters).map {
          case r if r.status == 200 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Boolean", r, _.validate[Boolean])
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def post(
        watchForm: com.bryzek.apidoc.api.v0.models.WatchForm
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Watch] = {
        val payload = play.api.libs.json.Json.toJson(watchForm)

        _executeRequest("POST", s"/watches", body = Some(payload)).map {
          case r if r.status == 201 => _root_.com.bryzek.apidoc.api.v0.Client.parseJson("com.bryzek.apidoc.api.v0.models.Watch", r, _.validate[com.bryzek.apidoc.api.v0.models.Watch])
          case r if r.status == 409 => throw new com.bryzek.apidoc.api.v0.errors.ErrorsResponse(r)
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 409")
        }
      }

      override def deleteByGuid(
        guid: _root_.java.util.UUID
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/watches/${guid}").map {
          case r if r.status == 204 => ()
          case r => throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*).withHeaders("Content-Type" -> "application/json; charset=UTF-8")).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.bryzek.apidoc.api.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  trait Applications {
    /**
     * Search all applications. Results are always paginated.
     */
    def get(
      orgKey: String,
      name: _root_.scala.Option[String] = None,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      hasVersion: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Application]]

    /**
     * Create an application.
     */
    def post(
      orgKey: String,
      applicationForm: com.bryzek.apidoc.api.v0.models.ApplicationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application]

    /**
     * Updates an application.
     */
    def putByApplicationKey(
      orgKey: String,
      applicationKey: String,
      applicationForm: com.bryzek.apidoc.api.v0.models.ApplicationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application]

    /**
     * Deletes a specific application and its associated versions.
     */
    def deleteByApplicationKey(
      orgKey: String,
      applicationKey: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Moves application to a new organization.
     */
    def postMoveByApplicationKey(
      orgKey: String,
      applicationKey: String,
      moveForm: com.bryzek.apidoc.api.v0.models.MoveForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Application]
  }

  trait Changes {
    def get(
      orgKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Change]]
  }

  trait Code {
    /**
     * Generate code for a specific version of an application.
     */
    def get(
      orgKey: String,
      applicationKey: String,
      version: String,
      generatorKey: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Code]
  }

  trait Domains {
    /**
     * Add a domain to this organization
     */
    def post(
      orgKey: String,
      domain: com.bryzek.apidoc.api.v0.models.Domain
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Domain]

    /**
     * Remove this domain from this organization
     */
    def deleteByName(
      orgKey: String,
      name: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait EmailVerificationConfirmationForms {
    /**
     * Validate an email address using a token.
     */
    def post(
      emailVerificationConfirmationForm: com.bryzek.apidoc.api.v0.models.EmailVerificationConfirmationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait GeneratorServices {
    /**
     * List all generator services
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      uri: _root_.scala.Option[String] = None,
      generatorKey: _root_.scala.Option[String] = None,
      limit: Long = 100,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.GeneratorService]]

    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorService]

    def post(
      generatorServiceForm: com.bryzek.apidoc.api.v0.models.GeneratorServiceForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorService]

    /**
     * Deletes a generator service.
     */
    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait GeneratorWithServices {
    /**
     * List all available generators
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      serviceUri: _root_.scala.Option[String] = None,
      key: _root_.scala.Option[String] = None,
      limit: Long = 100,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.GeneratorWithService]]

    def getByKey(
      key: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.GeneratorWithService]
  }

  trait Healthchecks {
    def getHealthcheck()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.generator.v0.models.Healthcheck]

    def getMigrate()(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Map[String, String]]
  }

  trait Items {
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Item]]

    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Item]
  }

  trait MembershipRequests {
    /**
     * Search all membership requests. Results are always paginated.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.MembershipRequest]]

    /**
     * Create a membership request
     */
    def post(
      orgGuid: _root_.java.util.UUID,
      userGuid: _root_.java.util.UUID,
      role: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.MembershipRequest]

    /**
     * Accepts this membership request. User will become a member of the specified
     * organization.
     */
    def postAcceptByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Declines this membership request. User will NOT become a member of the specified
     * organization.
     */
    def postDeclineByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Memberships {
    /**
     * Search all memberships. Results are always paginated.
     */
    def get(
      orgGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      orgKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      role: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Membership]]

    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Membership]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Organizations {
    /**
     * Search all organizations. Results are always paginated.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      key: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      namespace: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Organization]]

    /**
     * Returns the organization with this key.
     */
    def getByKey(
      key: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: com.bryzek.apidoc.api.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization]

    /**
     * Update an organization.
     */
    def putByKey(
      key: String,
      organizationForm: com.bryzek.apidoc.api.v0.models.OrganizationForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Organization]

    /**
     * Deletes an organization and all of its associated applications.
     */
    def deleteByKey(
      key: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait PasswordResetRequests {
    /**
     * Create a new password reset. This will send the user an email with a link to
     * reset their password.
     */
    def post(
      passwordResetRequest: com.bryzek.apidoc.api.v0.models.PasswordResetRequest
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait PasswordResets {
    /**
     * Change the password for this token. If the token is invalid, has been used, or
     * otherwise no longer can be applied, errors will be returned as 409s. A 204
     * represents that the user has successfully changed their password.
     */
    def post(
      passwordReset: com.bryzek.apidoc.api.v0.models.PasswordReset
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.PasswordResetSuccess]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      publication: _root_.scala.Option[com.bryzek.apidoc.api.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Subscription]

    /**
     * Create a new subscription.
     */
    def post(
      subscriptionForm: com.bryzek.apidoc.api.v0.models.SubscriptionForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Subscription]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tokens {
    def getUsersByUserGuid(
      userGuid: _root_.java.util.UUID,
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Token]]

    /**
     * Used to fetch the clear text token.
     */
    def getCleartextByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.CleartextToken]

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: com.bryzek.apidoc.api.v0.models.TokenForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Token]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a
     * guid, email or token - and will receive back either 0 or 1 users.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      email: _root_.scala.Option[String] = None,
      token: _root_.scala.Option[String] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.User]]

    /**
     * Returns information about the user with this guid.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User]

    /**
     * Used to authenticate a user with an email address and password. Successful
     * authentication returns an instance of the user model. Failed authorizations of
     * any kind are returned as a generic error with code user_authorization_failed.
     */
    def postAuthenticate(
      email: String,
      password: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User]

    /**
     * Create a new user.
     */
    def post(
      userForm: com.bryzek.apidoc.api.v0.models.UserForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User]

    /**
     * Updates information about the user with the specified guid.
     */
    def putByGuid(
      guid: _root_.java.util.UUID,
      userUpdateForm: com.bryzek.apidoc.api.v0.models.UserUpdateForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.User]
  }

  trait Validations {
    def post(
      value: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Validation]
  }

  trait Versions {
    /**
     * Search all versions of this application. Results are always paginated.
     */
    def getByApplicationKey(
      orgKey: String,
      applicationKey: String,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Version]]

    /**
     * Retrieve a specific version of an application.
     */
    def getByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version]

    /**
     * Create a new version for an application
     */
    def postByVersion(
      orgKey: String,
      version: String,
      versionForm: com.bryzek.apidoc.api.v0.models.VersionForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version]

    /**
     * Upsert a version of an application
     */
    def putByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String,
      versionForm: com.bryzek.apidoc.api.v0.models.VersionForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Version]

    /**
     * Deletes a specific version.
     */
    def deleteByApplicationKeyAndVersion(
      orgKey: String,
      applicationKey: String,
      version: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Watches {
    /**
     * Search watches. Always paginated.
     */
    def get(
      guid: _root_.scala.Option[_root_.java.util.UUID] = None,
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: _root_.scala.Option[String] = None,
      applicationKey: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.bryzek.apidoc.api.v0.models.Watch]]

    /**
     * Returns information about a specific watch.
     */
    def getByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Watch]

    /**
     * Quick check if a user is watching a specific application.
     */
    def getCheck(
      userGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
      organizationKey: String,
      applicationKey: String
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean]

    /**
     * Create a new watch.
     */
    def post(
      watchForm: com.bryzek.apidoc.api.v0.models.WatchForm
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.bryzek.apidoc.api.v0.models.Watch]

    def deleteByGuid(
      guid: _root_.java.util.UUID
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import com.bryzek.apidoc.api.v0.models.json._
    import com.bryzek.apidoc.common.v0.models.json._
    import com.bryzek.apidoc.generator.v0.models.json._
    import com.bryzek.apidoc.spec.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.com.bryzek.apidoc.api.v0.Client.parseJson("Seq[com.bryzek.apidoc.api.v0.models.Error]", response, _.validate[Seq[com.bryzek.apidoc.api.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

  }

}