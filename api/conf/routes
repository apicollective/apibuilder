# Generated by API Builder - https://www.apibuilder.io
# Service version: 0.14.52
# apibuilder 0.14.3 app.apibuilder.io/apicollective/apibuilder-api/0.14.52/play_2_x_routes

GET        /attributes                                               controllers.Attributes.get(guid: _root_.scala.Option[_root_.java.util.UUID], name: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /attributes/:name                                         controllers.Attributes.getByName(name: String)
POST       /attributes                                               controllers.Attributes.post()
DELETE     /attributes/:name                                         controllers.Attributes.deleteByName(name: String)
GET        /authentications/session/:id                              controllers.Authentications.getSessionById(id: String)
GET        /changes                                                  controllers.Changes.get(org_key: _root_.scala.Option[String], application_key: _root_.scala.Option[String], from: _root_.scala.Option[String], to: _root_.scala.Option[String], type: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
POST       /domains/:orgKey                                          controllers.Domains.post(orgKey: String)
DELETE     /domains/:orgKey/:name                                    controllers.Domains.deleteByName(orgKey: String, name: String)
POST       /email_verification_confirmations                         controllers.EmailVerificationConfirmationForms.post()
GET        /generator_services                                       controllers.GeneratorServices.get(guid: _root_.scala.Option[_root_.java.util.UUID], uri: _root_.scala.Option[String], generator_key: _root_.scala.Option[String], limit: Long ?= 100L, offset: Long ?= 0L)
GET        /generator_services/:guid                                 controllers.GeneratorServices.getByGuid(guid: _root_.java.util.UUID)
POST       /generator_services                                       controllers.GeneratorServices.post()
DELETE     /generator_services/:guid                                 controllers.GeneratorServices.deleteByGuid(guid: _root_.java.util.UUID)
GET        /generators                                               controllers.GeneratorWithServices.get(guid: _root_.scala.Option[_root_.java.util.UUID], service_guid: _root_.scala.Option[_root_.java.util.UUID], service_uri: _root_.scala.Option[String], attribute_name: _root_.scala.Option[String], key: _root_.scala.Option[String], limit: Long ?= 100L, offset: Long ?= 0L)
GET        /generators/:key                                          controllers.GeneratorWithServices.getByKey(key: String)
GET        /_internal_/healthcheck                                   controllers.Healthchecks.getHealthcheck()
GET        /_internal_/migrate                                       controllers.Healthchecks.getMigrate()
GET        /items                                                    controllers.Items.get(q: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /items/:guid                                              controllers.Items.getByGuid(guid: _root_.java.util.UUID)
GET        /memberships                                              controllers.Memberships.get(org_guid: _root_.scala.Option[_root_.java.util.UUID], org_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], role: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /memberships/:guid                                        controllers.Memberships.getByGuid(guid: _root_.java.util.UUID)
DELETE     /memberships/:guid                                        controllers.Memberships.deleteByGuid(guid: _root_.java.util.UUID)
GET        /membership_requests                                      controllers.MembershipRequests.get(org_guid: _root_.scala.Option[_root_.java.util.UUID], org_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], role: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
POST       /membership_requests                                      controllers.MembershipRequests.post()
POST       /membership_requests/:guid/accept                         controllers.MembershipRequests.postAcceptByGuid(guid: _root_.java.util.UUID)
POST       /membership_requests/:guid/decline                        controllers.MembershipRequests.postDeclineByGuid(guid: _root_.java.util.UUID)
GET        /organizations                                            controllers.Organizations.get(guid: _root_.scala.Option[_root_.java.util.UUID], user_guid: _root_.scala.Option[_root_.java.util.UUID], key: _root_.scala.Option[String], name: _root_.scala.Option[String], namespace: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /organizations/:key                                       controllers.Organizations.getByKey(key: String)
POST       /organizations                                            controllers.Organizations.post()
PUT        /organizations/:key                                       controllers.Organizations.putByKey(key: String)
DELETE     /organizations/:key                                       controllers.Organizations.deleteByKey(key: String)
GET        /organizations/:key/attributes                            controllers.Organizations.getAttributesByKey(key: String, name: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /organizations/:key/attributes/:name                      controllers.Organizations.getAttributesByKeyAndName(key: String, name: String)
PUT        /organizations/:key/attributes/:name                      controllers.Organizations.putAttributesByKeyAndName(key: String, name: String)
DELETE     /organizations/:key/attributes/:name                      controllers.Organizations.deleteAttributesByKeyAndName(key: String, name: String)
POST       /password_resets                                          controllers.PasswordResets.post()
POST       /password_reset_requests                                  controllers.PasswordResetRequests.post()
GET        /subscriptions                                            controllers.Subscriptions.get(guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: _root_.scala.Option[String], user_guid: _root_.scala.Option[_root_.java.util.UUID], publication: _root_.scala.Option[io.apibuilder.api.v0.models.Publication], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /subscriptions/:guid                                      controllers.Subscriptions.getByGuid(guid: _root_.java.util.UUID)
POST       /subscriptions                                            controllers.Subscriptions.post()
DELETE     /subscriptions/:guid                                      controllers.Subscriptions.deleteByGuid(guid: _root_.java.util.UUID)
GET        /tokens/users/:user_guid                                  controllers.Tokens.getUsersByUserGuid(user_guid: _root_.java.util.UUID, guid: _root_.scala.Option[_root_.java.util.UUID], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /tokens/:guid/cleartext                                   controllers.Tokens.getCleartextByGuid(guid: _root_.java.util.UUID)
POST       /tokens                                                   controllers.Tokens.post()
DELETE     /tokens/:guid                                             controllers.Tokens.deleteByGuid(guid: _root_.java.util.UUID)
GET        /users                                                    controllers.Users.get(guid: _root_.scala.Option[_root_.java.util.UUID], email: _root_.scala.Option[String], nickname: _root_.scala.Option[String], token: _root_.scala.Option[String])
GET        /users/:guid                                              controllers.Users.getByGuid(guid: _root_.java.util.UUID)
POST       /users/authenticate                                       controllers.Users.postAuthenticate()
POST       /users/authenticate_github                                controllers.Users.postAuthenticateGithub()
POST       /users                                                    controllers.Users.post()
PUT        /users/:guid                                              controllers.Users.putByGuid(guid: _root_.java.util.UUID)
POST       /validations                                              controllers.Validations.post()
GET        /watches                                                  controllers.Watches.get(guid: _root_.scala.Option[_root_.java.util.UUID], user_guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: _root_.scala.Option[String], application_key: _root_.scala.Option[String], limit: Long ?= 25L, offset: Long ?= 0L)
GET        /watches/:guid                                            controllers.Watches.getByGuid(guid: _root_.java.util.UUID)
GET        /watches/check                                            controllers.Watches.getCheck(user_guid: _root_.scala.Option[_root_.java.util.UUID], organization_key: String, application_key: String)
POST       /watches                                                  controllers.Watches.post()
DELETE     /watches/:guid                                            controllers.Watches.deleteByGuid(guid: _root_.java.util.UUID)
GET        /:orgKey/metadata/:applicationKey/versions                controllers.Applications.getMetadataAndVersionsByApplicationKey(orgKey: String, applicationKey: String, limit: Long ?= 25L, offset: Long ?= 0L)
GET        /:orgKey/metadata/:applicationKey/versions/latest.txt     controllers.Applications.getMetadataAndVersionsAndLatestTxtByApplicationKey(orgKey: String, applicationKey: String)
GET        /:orgKey                                                  controllers.Applications.get(orgKey: String, name: _root_.scala.Option[String], guid: _root_.scala.Option[_root_.java.util.UUID], key: _root_.scala.Option[String], has_version: _root_.scala.Option[Boolean], limit: Long ?= 25L, offset: Long ?= 0L, sort_by: _root_.scala.Option[io.apibuilder.api.v0.models.AppSortBy], order: _root_.scala.Option[io.apibuilder.api.v0.models.SortOrder])
POST       /:orgKey                                                  controllers.Applications.post(orgKey: String)
PUT        /:orgKey/:applicationKey                                  controllers.Applications.putByApplicationKey(orgKey: String, applicationKey: String)
DELETE     /:orgKey/:applicationKey                                  controllers.Applications.deleteByApplicationKey(orgKey: String, applicationKey: String)
POST       /:orgKey/:applicationKey/move                             controllers.Applications.postMoveByApplicationKey(orgKey: String, applicationKey: String)
GET        /:orgKey/:applicationKey/:version/:generatorKey           controllers.Code.get(orgKey: String, applicationKey: String, version: String, generatorKey: String)
GET        /:orgKey/:applicationKey                                  controllers.Versions.getByApplicationKey(orgKey: String, applicationKey: String, limit: Long ?= 25L, offset: Long ?= 0L)
GET        /:orgKey/:applicationKey/:version                         controllers.Versions.getByApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)
POST       /:orgKey/:version                                         controllers.Versions.postByVersion(orgKey: String, version: String)
PUT        /:orgKey/:applicationKey/:version                         controllers.Versions.putByApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)
DELETE     /:orgKey/:applicationKey/:version                         controllers.Versions.deleteByApplicationKeyAndVersion(orgKey: String, applicationKey: String, version: String)
GET        /:orgKey/:applicationKey/:version/example/:type_name      controllers.Versions.getExampleByApplicationKeyAndVersionAndTypeName(orgKey: String, applicationKey: String, version: String, type_name: String, sub_type_name: _root_.scala.Option[String], optional_fields: _root_.scala.Option[Boolean])