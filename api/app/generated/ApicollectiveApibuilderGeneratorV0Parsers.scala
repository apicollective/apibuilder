/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.24
 * apibuilder:0.12.38 https://app.apibuilder.io/apicollective/apibuilder-generator/0.12.24/anorm_2_x_parsers
 */
import anorm._

package io.apibuilder.generator.v0.anorm.parsers {

  import io.apibuilder.generator.v0.anorm.conversions.Standard._

  import io.apibuilder.generator.v0.anorm.conversions.Types._
  import io.apibuilder.spec.v0.anorm.conversions.Types._

  object Attribute {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      value = s"$prefix${sep}value"
    )

    def parser(
      name: String = "name",
      value: String = "value"
    ): RowParser[io.apibuilder.generator.v0.models.Attribute] = {
      SqlParser.str(name) ~
      SqlParser.str(value) map {
        case name ~ value => {
          io.apibuilder.generator.v0.models.Attribute(
            name = name,
            value = value
          )
        }
      }
    }

  }

  object Error {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      code = s"$prefix${sep}code",
      message = s"$prefix${sep}message"
    )

    def parser(
      code: String = "code",
      message: String = "message"
    ): RowParser[io.apibuilder.generator.v0.models.Error] = {
      SqlParser.str(code) ~
      SqlParser.str(message) map {
        case code ~ message => {
          io.apibuilder.generator.v0.models.Error(
            code = code,
            message = message
          )
        }
      }
    }

  }

  object File {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      dir = s"$prefix${sep}dir",
      contents = s"$prefix${sep}contents"
    )

    def parser(
      name: String = "name",
      dir: String = "dir",
      contents: String = "contents"
    ): RowParser[io.apibuilder.generator.v0.models.File] = {
      SqlParser.str(name) ~
      SqlParser.str(dir).? ~
      SqlParser.str(contents) map {
        case name ~ dir ~ contents => {
          io.apibuilder.generator.v0.models.File(
            name = name,
            dir = dir,
            contents = contents
          )
        }
      }
    }

  }

  object Generator {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      key = s"$prefix${sep}key",
      name = s"$prefix${sep}name",
      language = s"$prefix${sep}language",
      description = s"$prefix${sep}description",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      key: String = "key",
      name: String = "name",
      language: String = "language",
      description: String = "description",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.generator.v0.models.Generator] = {
      SqlParser.str(key) ~
      SqlParser.str(name) ~
      SqlParser.str(language).? ~
      SqlParser.str(description).? ~
      SqlParser.get[Seq[String]](attributes) map {
        case key ~ name ~ language ~ description ~ attributes => {
          io.apibuilder.generator.v0.models.Generator(
            key = key,
            name = name,
            language = language,
            description = description,
            attributes = attributes
          )
        }
      }
    }

  }

  object Healthcheck {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      status = s"$prefix${sep}status"
    )

    def parser(
      status: String = "status"
    ): RowParser[io.apibuilder.generator.v0.models.Healthcheck] = {
      SqlParser.str(status) map {
        case status => {
          io.apibuilder.generator.v0.models.Healthcheck(
            status = status
          )
        }
      }
    }

  }

  object Invocation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      source = s"$prefix${sep}source",
      files = s"$prefix${sep}files"
    )

    def parser(
      source: String = "source",
      files: String = "files"
    ): RowParser[io.apibuilder.generator.v0.models.Invocation] = {
      SqlParser.str(source) ~
      SqlParser.get[Seq[io.apibuilder.generator.v0.models.File]](files) map {
        case source ~ files => {
          io.apibuilder.generator.v0.models.Invocation(
            source = source,
            files = files
          )
        }
      }
    }

  }

  object InvocationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      servicePrefix = s"$prefix${sep}service",
      attributes = s"$prefix${sep}attributes",
      userAgent = s"$prefix${sep}user_agent"
    )

    def parser(
      servicePrefix: String = "service",
      attributes: String = "attributes",
      userAgent: String = "user_agent"
    ): RowParser[io.apibuilder.generator.v0.models.InvocationForm] = {
      io.apibuilder.spec.v0.anorm.parsers.Service.parserWithPrefix(servicePrefix) ~
      SqlParser.get[Seq[io.apibuilder.generator.v0.models.Attribute]](attributes) ~
      SqlParser.str(userAgent).? map {
        case service ~ attributes ~ userAgent => {
          io.apibuilder.generator.v0.models.InvocationForm(
            service = service,
            attributes = attributes,
            userAgent = userAgent
          )
        }
      }
    }

  }

}