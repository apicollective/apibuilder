/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.24
 * apibuilder:0.12.38 https://app.apibuilder.io/apicollective/apibuilder-internal/0.12.24/anorm_2_x_parsers
 */
package io.apibuilder.internal.v0.anorm.conversions {

  import anorm.{Column, MetaDataItem, TypeDoesNotMatch}
  import play.api.libs.json.{JsArray, JsObject, JsValue}
  import scala.util.{Failure, Success, Try}

  /**
    * Conversions to collections of objects using JSON.
    */
  object Util {

    def parser[T](
      f: play.api.libs.json.JsValue => T
    ) = anorm.Column.nonNull { (value, meta) =>
      val MetaDataItem(columnName, nullable, clazz) = meta
      value match {
        case json: org.postgresql.util.PGobject => parseJson(f, columnName.qualified, json.getValue)
        case json: java.lang.String => parseJson(f, columnName.qualified, json)
        case _=> {
          Left(
            TypeDoesNotMatch(
              s"Column[${columnName.qualified}] error converting $value to Json. Expected instance of type[org.postgresql.util.PGobject] and not[${value.asInstanceOf[AnyRef].getClass}]"
            )
          )
        }


      }
    }

    private[this] def parseJson[T](f: play.api.libs.json.JsValue => T, columnName: String, value: String) = {
      Try {
        f(
          play.api.libs.json.Json.parse(value)
        )
      } match {
        case Success(result) => Right(result)
        case Failure(ex) => Left(
          TypeDoesNotMatch(
            s"Column[$columnName] error parsing json $value: $ex"
          )
        )
      }
    }

  }

  object Types {
    import io.apibuilder.internal.v0.models.json._
    implicit val columnToSeqApibuilderinternalTask: Column[Seq[_root_.io.apibuilder.internal.v0.models.Task]] = Util.parser { _.as[Seq[_root_.io.apibuilder.internal.v0.models.Task]] }
    implicit val columnToMapApibuilderinternalTask: Column[Map[String, _root_.io.apibuilder.internal.v0.models.Task]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.internal.v0.models.Task]] }
    implicit val columnToSeqApibuilderinternalTaskDataDiffVersion: Column[Seq[_root_.io.apibuilder.internal.v0.models.TaskDataDiffVersion]] = Util.parser { _.as[Seq[_root_.io.apibuilder.internal.v0.models.TaskDataDiffVersion]] }
    implicit val columnToMapApibuilderinternalTaskDataDiffVersion: Column[Map[String, _root_.io.apibuilder.internal.v0.models.TaskDataDiffVersion]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.internal.v0.models.TaskDataDiffVersion]] }
    implicit val columnToSeqApibuilderinternalTaskDataIndexApplication: Column[Seq[_root_.io.apibuilder.internal.v0.models.TaskDataIndexApplication]] = Util.parser { _.as[Seq[_root_.io.apibuilder.internal.v0.models.TaskDataIndexApplication]] }
    implicit val columnToMapApibuilderinternalTaskDataIndexApplication: Column[Map[String, _root_.io.apibuilder.internal.v0.models.TaskDataIndexApplication]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.internal.v0.models.TaskDataIndexApplication]] }
    implicit val columnToSeqApibuilderinternalTaskData: Column[Seq[_root_.io.apibuilder.internal.v0.models.TaskData]] = Util.parser { _.as[Seq[_root_.io.apibuilder.internal.v0.models.TaskData]] }
    implicit val columnToMapApibuilderinternalTaskData: Column[Map[String, _root_.io.apibuilder.internal.v0.models.TaskData]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.internal.v0.models.TaskData]] }
  }

  object Standard {
    implicit val columnToJsObject: Column[play.api.libs.json.JsObject] = Util.parser { _.as[play.api.libs.json.JsObject] }
    implicit val columnToSeqBoolean: Column[Seq[Boolean]] = Util.parser { _.as[Seq[Boolean]] }
    implicit val columnToMapBoolean: Column[Map[String, Boolean]] = Util.parser { _.as[Map[String, Boolean]] }
    implicit val columnToSeqDouble: Column[Seq[Double]] = Util.parser { _.as[Seq[Double]] }
    implicit val columnToMapDouble: Column[Map[String, Double]] = Util.parser { _.as[Map[String, Double]] }
    implicit val columnToSeqInt: Column[Seq[Int]] = Util.parser { _.as[Seq[Int]] }
    implicit val columnToMapInt: Column[Map[String, Int]] = Util.parser { _.as[Map[String, Int]] }
    implicit val columnToSeqLong: Column[Seq[Long]] = Util.parser { _.as[Seq[Long]] }
    implicit val columnToMapLong: Column[Map[String, Long]] = Util.parser { _.as[Map[String, Long]] }
    implicit val columnToSeqLocalDate: Column[Seq[_root_.org.joda.time.LocalDate]] = Util.parser { _.as[Seq[_root_.org.joda.time.LocalDate]] }
    implicit val columnToMapLocalDate: Column[Map[String, _root_.org.joda.time.LocalDate]] = Util.parser { _.as[Map[String, _root_.org.joda.time.LocalDate]] }
    implicit val columnToSeqDateTime: Column[Seq[_root_.org.joda.time.DateTime]] = Util.parser { _.as[Seq[_root_.org.joda.time.DateTime]] }
    implicit val columnToMapDateTime: Column[Map[String, _root_.org.joda.time.DateTime]] = Util.parser { _.as[Map[String, _root_.org.joda.time.DateTime]] }
    implicit val columnToSeqBigDecimal: Column[Seq[BigDecimal]] = Util.parser { _.as[Seq[BigDecimal]] }
    implicit val columnToMapBigDecimal: Column[Map[String, BigDecimal]] = Util.parser { _.as[Map[String, BigDecimal]] }
    implicit val columnToSeqJsObject: Column[Seq[_root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsObject]] }
    implicit val columnToMapJsObject: Column[Map[String, _root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsObject]] }
    implicit val columnToSeqString: Column[Seq[String]] = Util.parser { _.as[Seq[String]] }
    implicit val columnToMapString: Column[Map[String, String]] = Util.parser { _.as[Map[String, String]] }
    implicit val columnToSeqUUID: Column[Seq[_root_.java.util.UUID]] = Util.parser { _.as[Seq[_root_.java.util.UUID]] }
    implicit val columnToMapUUID: Column[Map[String, _root_.java.util.UUID]] = Util.parser { _.as[Map[String, _root_.java.util.UUID]] }
  }

}