/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.58
 * apibuilder:0.12.52 https://app.apibuilder.io/apicollective/apibuilder-api/0.12.58/anorm_2_x_parsers
 */
package io.apibuilder.api.v0.anorm.conversions {

  import anorm.{Column, MetaDataItem, TypeDoesNotMatch}
  import play.api.libs.json.{JsArray, JsObject, JsValue}
  import scala.util.{Failure, Success, Try}

  /**
    * Conversions to collections of objects using JSON.
    */
  object Util {

    def parser[T](
      f: play.api.libs.json.JsValue => T
    ) = anorm.Column.nonNull { (value, meta) =>
      val MetaDataItem(columnName, nullable, clazz) = meta
      value match {
        case json: org.postgresql.util.PGobject => parseJson(f, columnName.qualified, json.getValue)
        case json: java.lang.String => parseJson(f, columnName.qualified, json)
        case _=> {
          Left(
            TypeDoesNotMatch(
              s"Column[${columnName.qualified}] error converting $value to Json. Expected instance of type[org.postgresql.util.PGobject] and not[${value.asInstanceOf[AnyRef].getClass}]"
            )
          )
        }


      }
    }

    private[this] def parseJson[T](f: play.api.libs.json.JsValue => T, columnName: String, value: String) = {
      Try {
        f(
          play.api.libs.json.Json.parse(value)
        )
      } match {
        case Success(result) => Right(result)
        case Failure(ex) => Left(
          TypeDoesNotMatch(
            s"Column[$columnName] error parsing json $value: $ex"
          )
        )
      }
    }

  }

  object Types {
    import io.apibuilder.api.v0.models.json._
    implicit val columnToSeqApibuilderapiOriginalType: Column[Seq[_root_.io.apibuilder.api.v0.models.OriginalType]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.OriginalType]] }
    implicit val columnToMapApibuilderapiOriginalType: Column[Map[String, _root_.io.apibuilder.api.v0.models.OriginalType]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.OriginalType]] }
    implicit val columnToSeqApibuilderapiPublication: Column[Seq[_root_.io.apibuilder.api.v0.models.Publication]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Publication]] }
    implicit val columnToMapApibuilderapiPublication: Column[Map[String, _root_.io.apibuilder.api.v0.models.Publication]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Publication]] }
    implicit val columnToSeqApibuilderapiVisibility: Column[Seq[_root_.io.apibuilder.api.v0.models.Visibility]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Visibility]] }
    implicit val columnToMapApibuilderapiVisibility: Column[Map[String, _root_.io.apibuilder.api.v0.models.Visibility]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Visibility]] }
    implicit val columnToSeqApibuilderapiApplication: Column[Seq[_root_.io.apibuilder.api.v0.models.Application]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Application]] }
    implicit val columnToMapApibuilderapiApplication: Column[Map[String, _root_.io.apibuilder.api.v0.models.Application]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Application]] }
    implicit val columnToSeqApibuilderapiApplicationForm: Column[Seq[_root_.io.apibuilder.api.v0.models.ApplicationForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ApplicationForm]] }
    implicit val columnToMapApibuilderapiApplicationForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationForm]] }
    implicit val columnToSeqApibuilderapiApplicationMetadata: Column[Seq[_root_.io.apibuilder.api.v0.models.ApplicationMetadata]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ApplicationMetadata]] }
    implicit val columnToMapApibuilderapiApplicationMetadata: Column[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationMetadata]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationMetadata]] }
    implicit val columnToSeqApibuilderapiApplicationMetadataVersion: Column[Seq[_root_.io.apibuilder.api.v0.models.ApplicationMetadataVersion]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ApplicationMetadataVersion]] }
    implicit val columnToMapApibuilderapiApplicationMetadataVersion: Column[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationMetadataVersion]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationMetadataVersion]] }
    implicit val columnToSeqApibuilderapiApplicationSummary: Column[Seq[_root_.io.apibuilder.api.v0.models.ApplicationSummary]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ApplicationSummary]] }
    implicit val columnToMapApibuilderapiApplicationSummary: Column[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationSummary]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ApplicationSummary]] }
    implicit val columnToSeqApibuilderapiAttribute: Column[Seq[_root_.io.apibuilder.api.v0.models.Attribute]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Attribute]] }
    implicit val columnToMapApibuilderapiAttribute: Column[Map[String, _root_.io.apibuilder.api.v0.models.Attribute]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Attribute]] }
    implicit val columnToSeqApibuilderapiAttributeForm: Column[Seq[_root_.io.apibuilder.api.v0.models.AttributeForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.AttributeForm]] }
    implicit val columnToMapApibuilderapiAttributeForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.AttributeForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.AttributeForm]] }
    implicit val columnToSeqApibuilderapiAttributeSummary: Column[Seq[_root_.io.apibuilder.api.v0.models.AttributeSummary]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.AttributeSummary]] }
    implicit val columnToMapApibuilderapiAttributeSummary: Column[Map[String, _root_.io.apibuilder.api.v0.models.AttributeSummary]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.AttributeSummary]] }
    implicit val columnToSeqApibuilderapiAttributeValue: Column[Seq[_root_.io.apibuilder.api.v0.models.AttributeValue]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.AttributeValue]] }
    implicit val columnToMapApibuilderapiAttributeValue: Column[Map[String, _root_.io.apibuilder.api.v0.models.AttributeValue]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.AttributeValue]] }
    implicit val columnToSeqApibuilderapiAttributeValueForm: Column[Seq[_root_.io.apibuilder.api.v0.models.AttributeValueForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.AttributeValueForm]] }
    implicit val columnToMapApibuilderapiAttributeValueForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.AttributeValueForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.AttributeValueForm]] }
    implicit val columnToSeqApibuilderapiAuthentication: Column[Seq[_root_.io.apibuilder.api.v0.models.Authentication]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Authentication]] }
    implicit val columnToMapApibuilderapiAuthentication: Column[Map[String, _root_.io.apibuilder.api.v0.models.Authentication]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Authentication]] }
    implicit val columnToSeqApibuilderapiChange: Column[Seq[_root_.io.apibuilder.api.v0.models.Change]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Change]] }
    implicit val columnToMapApibuilderapiChange: Column[Map[String, _root_.io.apibuilder.api.v0.models.Change]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Change]] }
    implicit val columnToSeqApibuilderapiChangeVersion: Column[Seq[_root_.io.apibuilder.api.v0.models.ChangeVersion]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ChangeVersion]] }
    implicit val columnToMapApibuilderapiChangeVersion: Column[Map[String, _root_.io.apibuilder.api.v0.models.ChangeVersion]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ChangeVersion]] }
    implicit val columnToSeqApibuilderapiCleartextToken: Column[Seq[_root_.io.apibuilder.api.v0.models.CleartextToken]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.CleartextToken]] }
    implicit val columnToMapApibuilderapiCleartextToken: Column[Map[String, _root_.io.apibuilder.api.v0.models.CleartextToken]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.CleartextToken]] }
    implicit val columnToSeqApibuilderapiCode: Column[Seq[_root_.io.apibuilder.api.v0.models.Code]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Code]] }
    implicit val columnToMapApibuilderapiCode: Column[Map[String, _root_.io.apibuilder.api.v0.models.Code]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Code]] }
    implicit val columnToSeqApibuilderapiDiffBreaking: Column[Seq[_root_.io.apibuilder.api.v0.models.DiffBreaking]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.DiffBreaking]] }
    implicit val columnToMapApibuilderapiDiffBreaking: Column[Map[String, _root_.io.apibuilder.api.v0.models.DiffBreaking]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.DiffBreaking]] }
    implicit val columnToSeqApibuilderapiDiffNonBreaking: Column[Seq[_root_.io.apibuilder.api.v0.models.DiffNonBreaking]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.DiffNonBreaking]] }
    implicit val columnToMapApibuilderapiDiffNonBreaking: Column[Map[String, _root_.io.apibuilder.api.v0.models.DiffNonBreaking]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.DiffNonBreaking]] }
    implicit val columnToSeqApibuilderapiDomain: Column[Seq[_root_.io.apibuilder.api.v0.models.Domain]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Domain]] }
    implicit val columnToMapApibuilderapiDomain: Column[Map[String, _root_.io.apibuilder.api.v0.models.Domain]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Domain]] }
    implicit val columnToSeqApibuilderapiEmailVerificationConfirmationForm: Column[Seq[_root_.io.apibuilder.api.v0.models.EmailVerificationConfirmationForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.EmailVerificationConfirmationForm]] }
    implicit val columnToMapApibuilderapiEmailVerificationConfirmationForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.EmailVerificationConfirmationForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.EmailVerificationConfirmationForm]] }
    implicit val columnToSeqApibuilderapiError: Column[Seq[_root_.io.apibuilder.api.v0.models.Error]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Error]] }
    implicit val columnToMapApibuilderapiError: Column[Map[String, _root_.io.apibuilder.api.v0.models.Error]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Error]] }
    implicit val columnToSeqApibuilderapiGeneratorForm: Column[Seq[_root_.io.apibuilder.api.v0.models.GeneratorForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.GeneratorForm]] }
    implicit val columnToMapApibuilderapiGeneratorForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorForm]] }
    implicit val columnToSeqApibuilderapiGeneratorService: Column[Seq[_root_.io.apibuilder.api.v0.models.GeneratorService]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.GeneratorService]] }
    implicit val columnToMapApibuilderapiGeneratorService: Column[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorService]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorService]] }
    implicit val columnToSeqApibuilderapiGeneratorServiceForm: Column[Seq[_root_.io.apibuilder.api.v0.models.GeneratorServiceForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.GeneratorServiceForm]] }
    implicit val columnToMapApibuilderapiGeneratorServiceForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorServiceForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorServiceForm]] }
    implicit val columnToSeqApibuilderapiGeneratorWithService: Column[Seq[_root_.io.apibuilder.api.v0.models.GeneratorWithService]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.GeneratorWithService]] }
    implicit val columnToMapApibuilderapiGeneratorWithService: Column[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorWithService]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.GeneratorWithService]] }
    implicit val columnToSeqApibuilderapiItem: Column[Seq[_root_.io.apibuilder.api.v0.models.Item]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Item]] }
    implicit val columnToMapApibuilderapiItem: Column[Map[String, _root_.io.apibuilder.api.v0.models.Item]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Item]] }
    implicit val columnToSeqApibuilderapiMembership: Column[Seq[_root_.io.apibuilder.api.v0.models.Membership]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Membership]] }
    implicit val columnToMapApibuilderapiMembership: Column[Map[String, _root_.io.apibuilder.api.v0.models.Membership]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Membership]] }
    implicit val columnToSeqApibuilderapiMembershipRequest: Column[Seq[_root_.io.apibuilder.api.v0.models.MembershipRequest]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.MembershipRequest]] }
    implicit val columnToMapApibuilderapiMembershipRequest: Column[Map[String, _root_.io.apibuilder.api.v0.models.MembershipRequest]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.MembershipRequest]] }
    implicit val columnToSeqApibuilderapiMoveForm: Column[Seq[_root_.io.apibuilder.api.v0.models.MoveForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.MoveForm]] }
    implicit val columnToMapApibuilderapiMoveForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.MoveForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.MoveForm]] }
    implicit val columnToSeqApibuilderapiOrganization: Column[Seq[_root_.io.apibuilder.api.v0.models.Organization]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Organization]] }
    implicit val columnToMapApibuilderapiOrganization: Column[Map[String, _root_.io.apibuilder.api.v0.models.Organization]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Organization]] }
    implicit val columnToSeqApibuilderapiOrganizationForm: Column[Seq[_root_.io.apibuilder.api.v0.models.OrganizationForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.OrganizationForm]] }
    implicit val columnToMapApibuilderapiOrganizationForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.OrganizationForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.OrganizationForm]] }
    implicit val columnToSeqApibuilderapiOriginal: Column[Seq[_root_.io.apibuilder.api.v0.models.Original]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Original]] }
    implicit val columnToMapApibuilderapiOriginal: Column[Map[String, _root_.io.apibuilder.api.v0.models.Original]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Original]] }
    implicit val columnToSeqApibuilderapiOriginalForm: Column[Seq[_root_.io.apibuilder.api.v0.models.OriginalForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.OriginalForm]] }
    implicit val columnToMapApibuilderapiOriginalForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.OriginalForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.OriginalForm]] }
    implicit val columnToSeqApibuilderapiPasswordReset: Column[Seq[_root_.io.apibuilder.api.v0.models.PasswordReset]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.PasswordReset]] }
    implicit val columnToMapApibuilderapiPasswordReset: Column[Map[String, _root_.io.apibuilder.api.v0.models.PasswordReset]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.PasswordReset]] }
    implicit val columnToSeqApibuilderapiPasswordResetRequest: Column[Seq[_root_.io.apibuilder.api.v0.models.PasswordResetRequest]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.PasswordResetRequest]] }
    implicit val columnToMapApibuilderapiPasswordResetRequest: Column[Map[String, _root_.io.apibuilder.api.v0.models.PasswordResetRequest]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.PasswordResetRequest]] }
    implicit val columnToSeqApibuilderapiSession: Column[Seq[_root_.io.apibuilder.api.v0.models.Session]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Session]] }
    implicit val columnToMapApibuilderapiSession: Column[Map[String, _root_.io.apibuilder.api.v0.models.Session]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Session]] }
    implicit val columnToSeqApibuilderapiSubscription: Column[Seq[_root_.io.apibuilder.api.v0.models.Subscription]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Subscription]] }
    implicit val columnToMapApibuilderapiSubscription: Column[Map[String, _root_.io.apibuilder.api.v0.models.Subscription]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Subscription]] }
    implicit val columnToSeqApibuilderapiSubscriptionForm: Column[Seq[_root_.io.apibuilder.api.v0.models.SubscriptionForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.SubscriptionForm]] }
    implicit val columnToMapApibuilderapiSubscriptionForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.SubscriptionForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.SubscriptionForm]] }
    implicit val columnToSeqApibuilderapiToken: Column[Seq[_root_.io.apibuilder.api.v0.models.Token]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Token]] }
    implicit val columnToMapApibuilderapiToken: Column[Map[String, _root_.io.apibuilder.api.v0.models.Token]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Token]] }
    implicit val columnToSeqApibuilderapiTokenForm: Column[Seq[_root_.io.apibuilder.api.v0.models.TokenForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.TokenForm]] }
    implicit val columnToMapApibuilderapiTokenForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.TokenForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.TokenForm]] }
    implicit val columnToSeqApibuilderapiUser: Column[Seq[_root_.io.apibuilder.api.v0.models.User]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.User]] }
    implicit val columnToMapApibuilderapiUser: Column[Map[String, _root_.io.apibuilder.api.v0.models.User]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.User]] }
    implicit val columnToSeqApibuilderapiUserForm: Column[Seq[_root_.io.apibuilder.api.v0.models.UserForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.UserForm]] }
    implicit val columnToMapApibuilderapiUserForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.UserForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.UserForm]] }
    implicit val columnToSeqApibuilderapiUserSummary: Column[Seq[_root_.io.apibuilder.api.v0.models.UserSummary]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.UserSummary]] }
    implicit val columnToMapApibuilderapiUserSummary: Column[Map[String, _root_.io.apibuilder.api.v0.models.UserSummary]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.UserSummary]] }
    implicit val columnToSeqApibuilderapiUserUpdateForm: Column[Seq[_root_.io.apibuilder.api.v0.models.UserUpdateForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.UserUpdateForm]] }
    implicit val columnToMapApibuilderapiUserUpdateForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.UserUpdateForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.UserUpdateForm]] }
    implicit val columnToSeqApibuilderapiValidation: Column[Seq[_root_.io.apibuilder.api.v0.models.Validation]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Validation]] }
    implicit val columnToMapApibuilderapiValidation: Column[Map[String, _root_.io.apibuilder.api.v0.models.Validation]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Validation]] }
    implicit val columnToSeqApibuilderapiVersion: Column[Seq[_root_.io.apibuilder.api.v0.models.Version]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Version]] }
    implicit val columnToMapApibuilderapiVersion: Column[Map[String, _root_.io.apibuilder.api.v0.models.Version]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Version]] }
    implicit val columnToSeqApibuilderapiVersionForm: Column[Seq[_root_.io.apibuilder.api.v0.models.VersionForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.VersionForm]] }
    implicit val columnToMapApibuilderapiVersionForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.VersionForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.VersionForm]] }
    implicit val columnToSeqApibuilderapiWatch: Column[Seq[_root_.io.apibuilder.api.v0.models.Watch]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Watch]] }
    implicit val columnToMapApibuilderapiWatch: Column[Map[String, _root_.io.apibuilder.api.v0.models.Watch]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Watch]] }
    implicit val columnToSeqApibuilderapiWatchForm: Column[Seq[_root_.io.apibuilder.api.v0.models.WatchForm]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.WatchForm]] }
    implicit val columnToMapApibuilderapiWatchForm: Column[Map[String, _root_.io.apibuilder.api.v0.models.WatchForm]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.WatchForm]] }
    implicit val columnToSeqApibuilderapiDiff: Column[Seq[_root_.io.apibuilder.api.v0.models.Diff]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.Diff]] }
    implicit val columnToMapApibuilderapiDiff: Column[Map[String, _root_.io.apibuilder.api.v0.models.Diff]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.Diff]] }
    implicit val columnToSeqApibuilderapiItemDetail: Column[Seq[_root_.io.apibuilder.api.v0.models.ItemDetail]] = Util.parser { _.as[Seq[_root_.io.apibuilder.api.v0.models.ItemDetail]] }
    implicit val columnToMapApibuilderapiItemDetail: Column[Map[String, _root_.io.apibuilder.api.v0.models.ItemDetail]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.api.v0.models.ItemDetail]] }
  }

  object Standard {
    implicit val columnToJsObject: Column[play.api.libs.json.JsObject] = Util.parser { _.as[play.api.libs.json.JsObject] }
    implicit val columnToSeqBoolean: Column[Seq[Boolean]] = Util.parser { _.as[Seq[Boolean]] }
    implicit val columnToMapBoolean: Column[Map[String, Boolean]] = Util.parser { _.as[Map[String, Boolean]] }
    implicit val columnToSeqDouble: Column[Seq[Double]] = Util.parser { _.as[Seq[Double]] }
    implicit val columnToMapDouble: Column[Map[String, Double]] = Util.parser { _.as[Map[String, Double]] }
    implicit val columnToSeqInt: Column[Seq[Int]] = Util.parser { _.as[Seq[Int]] }
    implicit val columnToMapInt: Column[Map[String, Int]] = Util.parser { _.as[Map[String, Int]] }
    implicit val columnToSeqLong: Column[Seq[Long]] = Util.parser { _.as[Seq[Long]] }
    implicit val columnToMapLong: Column[Map[String, Long]] = Util.parser { _.as[Map[String, Long]] }
    implicit val columnToSeqLocalDate: Column[Seq[_root_.org.joda.time.LocalDate]] = Util.parser { _.as[Seq[_root_.org.joda.time.LocalDate]] }
    implicit val columnToMapLocalDate: Column[Map[String, _root_.org.joda.time.LocalDate]] = Util.parser { _.as[Map[String, _root_.org.joda.time.LocalDate]] }
    implicit val columnToSeqDateTime: Column[Seq[_root_.org.joda.time.DateTime]] = Util.parser { _.as[Seq[_root_.org.joda.time.DateTime]] }
    implicit val columnToMapDateTime: Column[Map[String, _root_.org.joda.time.DateTime]] = Util.parser { _.as[Map[String, _root_.org.joda.time.DateTime]] }
    implicit val columnToSeqBigDecimal: Column[Seq[BigDecimal]] = Util.parser { _.as[Seq[BigDecimal]] }
    implicit val columnToMapBigDecimal: Column[Map[String, BigDecimal]] = Util.parser { _.as[Map[String, BigDecimal]] }
    implicit val columnToSeqJsObject: Column[Seq[_root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsObject]] }
    implicit val columnToMapJsObject: Column[Map[String, _root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsObject]] }
    implicit val columnToSeqString: Column[Seq[String]] = Util.parser { _.as[Seq[String]] }
    implicit val columnToMapString: Column[Map[String, String]] = Util.parser { _.as[Map[String, String]] }
    implicit val columnToSeqUUID: Column[Seq[_root_.java.util.UUID]] = Util.parser { _.as[Seq[_root_.java.util.UUID]] }
    implicit val columnToMapUUID: Column[Map[String, _root_.java.util.UUID]] = Util.parser { _.as[Map[String, _root_.java.util.UUID]] }
  }

}