/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.80
 * apibuilder:0.12.61 https://app.apibuilder.io/apicollective/apibuilder-spec/0.12.80/anorm_2_x_parsers
 */
import anorm._

package io.apibuilder.spec.v0.anorm.parsers {

  import io.apibuilder.spec.v0.anorm.conversions.Standard._

  import io.apibuilder.spec.v0.anorm.conversions.Types._

  object Method {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "method"): RowParser[io.apibuilder.spec.v0.models.Method] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.spec.v0.models.Method(value)
      }
    }

  }

  object ParameterLocation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "parameter_location"): RowParser[io.apibuilder.spec.v0.models.ParameterLocation] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.spec.v0.models.ParameterLocation(value)
      }
    }

  }

  object ResponseCodeOption {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "response_code_option"): RowParser[io.apibuilder.spec.v0.models.ResponseCodeOption] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.spec.v0.models.ResponseCodeOption(value)
      }
    }

  }

  object Apidoc {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      version = s"$prefix${sep}version"
    )

    def parser(
      version: String = "version"
    ): RowParser[io.apibuilder.spec.v0.models.Apidoc] = {
      SqlParser.str(version) map {
        case version => {
          io.apibuilder.spec.v0.models.Apidoc(
            version = version
          )
        }
      }
    }

  }

  object Application {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      key = s"$prefix${sep}key"
    )

    def parser(
      key: String = "key"
    ): RowParser[io.apibuilder.spec.v0.models.Application] = {
      SqlParser.str(key) map {
        case key => {
          io.apibuilder.spec.v0.models.Application(
            key = key
          )
        }
      }
    }

  }

  object Attribute {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      value = s"$prefix${sep}value",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation"
    )

    def parser(
      name: String = "name",
      value: String = "value",
      description: String = "description",
      deprecationPrefix: String = "deprecation"
    ): RowParser[io.apibuilder.spec.v0.models.Attribute] = {
      SqlParser.str(name) ~
      SqlParser.get[_root_.play.api.libs.json.JsObject](value) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? map {
        case name ~ value ~ description ~ deprecation => {
          io.apibuilder.spec.v0.models.Attribute(
            name = name,
            value = value,
            description = description,
            deprecation = deprecation
          )
        }
      }
    }

  }

  object Body {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      `type` = s"$prefix${sep}type",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      `type`: String = "type",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Body] = {
      SqlParser.str(`type`) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case typeInstance ~ description ~ deprecation ~ attributes => {
          io.apibuilder.spec.v0.models.Body(
            `type` = typeInstance,
            description = description,
            deprecation = deprecation,
            attributes = attributes
          )
        }
      }
    }

  }

  object Contact {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      url = s"$prefix${sep}url",
      email = s"$prefix${sep}email"
    )

    def parser(
      name: String = "name",
      url: String = "url",
      email: String = "email"
    ): RowParser[io.apibuilder.spec.v0.models.Contact] = {
      SqlParser.str(name).? ~
      SqlParser.str(url).? ~
      SqlParser.str(email).? map {
        case name ~ url ~ email => {
          io.apibuilder.spec.v0.models.Contact(
            name = name,
            url = url,
            email = email
          )
        }
      }
    }

  }

  object Deprecation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      description = s"$prefix${sep}description"
    )

    def parser(
      description: String = "description"
    ): RowParser[io.apibuilder.spec.v0.models.Deprecation] = {
      SqlParser.str(description).? map {
        case description => {
          io.apibuilder.spec.v0.models.Deprecation(
            description = description
          )
        }
      }
    }

  }

  object Enum {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      plural = s"$prefix${sep}plural",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      values = s"$prefix${sep}values",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      plural: String = "plural",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      values: String = "values",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Enum] = {
      SqlParser.str(name) ~
      SqlParser.str(plural) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.EnumValue]](values) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ plural ~ description ~ deprecation ~ values ~ attributes => {
          io.apibuilder.spec.v0.models.Enum(
            name = name,
            plural = plural,
            description = description,
            deprecation = deprecation,
            values = values,
            attributes = attributes
          )
        }
      }
    }

  }

  object EnumValue {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.EnumValue] = {
      SqlParser.str(name) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ description ~ deprecation ~ attributes => {
          io.apibuilder.spec.v0.models.EnumValue(
            name = name,
            description = description,
            deprecation = deprecation,
            attributes = attributes
          )
        }
      }
    }

  }

  object Field {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      `type` = s"$prefix${sep}type",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      default = s"$prefix${sep}default",
      required = s"$prefix${sep}required",
      minimum = s"$prefix${sep}minimum",
      maximum = s"$prefix${sep}maximum",
      example = s"$prefix${sep}example",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      `type`: String = "type",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      default: String = "default",
      required: String = "required",
      minimum: String = "minimum",
      maximum: String = "maximum",
      example: String = "example",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Field] = {
      SqlParser.str(name) ~
      SqlParser.str(`type`) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.str(default).? ~
      SqlParser.bool(required) ~
      SqlParser.long(minimum).? ~
      SqlParser.long(maximum).? ~
      SqlParser.str(example).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ typeInstance ~ description ~ deprecation ~ default ~ required ~ minimum ~ maximum ~ example ~ attributes => {
          io.apibuilder.spec.v0.models.Field(
            name = name,
            `type` = typeInstance,
            description = description,
            deprecation = deprecation,
            default = default,
            required = required,
            minimum = minimum,
            maximum = maximum,
            example = example,
            attributes = attributes
          )
        }
      }
    }

  }

  object Header {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      `type` = s"$prefix${sep}type",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      required = s"$prefix${sep}required",
      default = s"$prefix${sep}default",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      `type`: String = "type",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      required: String = "required",
      default: String = "default",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Header] = {
      SqlParser.str(name) ~
      SqlParser.str(`type`) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.bool(required) ~
      SqlParser.str(default).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ typeInstance ~ description ~ deprecation ~ required ~ default ~ attributes => {
          io.apibuilder.spec.v0.models.Header(
            name = name,
            `type` = typeInstance,
            description = description,
            deprecation = deprecation,
            required = required,
            default = default,
            attributes = attributes
          )
        }
      }
    }

  }

  object Import {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      uri = s"$prefix${sep}uri",
      namespace = s"$prefix${sep}namespace",
      organizationPrefix = s"$prefix${sep}organization",
      applicationPrefix = s"$prefix${sep}application",
      version = s"$prefix${sep}version",
      enums = s"$prefix${sep}enums",
      unions = s"$prefix${sep}unions",
      models = s"$prefix${sep}models"
    )

    def parser(
      uri: String = "uri",
      namespace: String = "namespace",
      organizationPrefix: String = "organization",
      applicationPrefix: String = "application",
      version: String = "version",
      enums: String = "enums",
      unions: String = "unions",
      models: String = "models"
    ): RowParser[io.apibuilder.spec.v0.models.Import] = {
      SqlParser.str(uri) ~
      SqlParser.str(namespace) ~
      io.apibuilder.spec.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.spec.v0.anorm.parsers.Application.parserWithPrefix(applicationPrefix) ~
      SqlParser.str(version) ~
      SqlParser.get[Seq[String]](enums) ~
      SqlParser.get[Seq[String]](unions) ~
      SqlParser.get[Seq[String]](models) map {
        case uri ~ namespace ~ organization ~ application ~ version ~ enums ~ unions ~ models => {
          io.apibuilder.spec.v0.models.Import(
            uri = uri,
            namespace = namespace,
            organization = organization,
            application = application,
            version = version,
            enums = enums,
            unions = unions,
            models = models
          )
        }
      }
    }

  }

  object Info {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      licensePrefix = s"$prefix${sep}license",
      contactPrefix = s"$prefix${sep}contact"
    )

    def parser(
      licensePrefix: String = "license",
      contactPrefix: String = "contact"
    ): RowParser[io.apibuilder.spec.v0.models.Info] = {
      io.apibuilder.spec.v0.anorm.parsers.License.parserWithPrefix(licensePrefix).? ~
      io.apibuilder.spec.v0.anorm.parsers.Contact.parserWithPrefix(contactPrefix).? map {
        case license ~ contact => {
          io.apibuilder.spec.v0.models.Info(
            license = license,
            contact = contact
          )
        }
      }
    }

  }

  object License {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      url = s"$prefix${sep}url"
    )

    def parser(
      name: String = "name",
      url: String = "url"
    ): RowParser[io.apibuilder.spec.v0.models.License] = {
      SqlParser.str(name) ~
      SqlParser.str(url).? map {
        case name ~ url => {
          io.apibuilder.spec.v0.models.License(
            name = name,
            url = url
          )
        }
      }
    }

  }

  object Model {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      plural = s"$prefix${sep}plural",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      fields = s"$prefix${sep}fields",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      plural: String = "plural",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      fields: String = "fields",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Model] = {
      SqlParser.str(name) ~
      SqlParser.str(plural) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Field]](fields) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ plural ~ description ~ deprecation ~ fields ~ attributes => {
          io.apibuilder.spec.v0.models.Model(
            name = name,
            plural = plural,
            description = description,
            deprecation = deprecation,
            fields = fields,
            attributes = attributes
          )
        }
      }
    }

  }

  object Operation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      method = s"$prefix${sep}method",
      path = s"$prefix${sep}path",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      bodyPrefix = s"$prefix${sep}body",
      parameters = s"$prefix${sep}parameters",
      responses = s"$prefix${sep}responses",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      method: String = "method",
      path: String = "path",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      bodyPrefix: String = "body",
      parameters: String = "parameters",
      responses: String = "responses",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Operation] = {
      io.apibuilder.spec.v0.anorm.parsers.Method.parser(method) ~
      SqlParser.str(path) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      io.apibuilder.spec.v0.anorm.parsers.Body.parserWithPrefix(bodyPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Parameter]](parameters) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Response]](responses) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case method ~ path ~ description ~ deprecation ~ body ~ parameters ~ responses ~ attributes => {
          io.apibuilder.spec.v0.models.Operation(
            method = method,
            path = path,
            description = description,
            deprecation = deprecation,
            body = body,
            parameters = parameters,
            responses = responses,
            attributes = attributes
          )
        }
      }
    }

  }

  object Organization {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      key = s"$prefix${sep}key"
    )

    def parser(
      key: String = "key"
    ): RowParser[io.apibuilder.spec.v0.models.Organization] = {
      SqlParser.str(key) map {
        case key => {
          io.apibuilder.spec.v0.models.Organization(
            key = key
          )
        }
      }
    }

  }

  object Parameter {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      `type` = s"$prefix${sep}type",
      location = s"$prefix${sep}location",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      required = s"$prefix${sep}required",
      default = s"$prefix${sep}default",
      minimum = s"$prefix${sep}minimum",
      maximum = s"$prefix${sep}maximum",
      example = s"$prefix${sep}example"
    )

    def parser(
      name: String = "name",
      `type`: String = "type",
      location: String = "location",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      required: String = "required",
      default: String = "default",
      minimum: String = "minimum",
      maximum: String = "maximum",
      example: String = "example"
    ): RowParser[io.apibuilder.spec.v0.models.Parameter] = {
      SqlParser.str(name) ~
      SqlParser.str(`type`) ~
      io.apibuilder.spec.v0.anorm.parsers.ParameterLocation.parser(location) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.bool(required) ~
      SqlParser.str(default).? ~
      SqlParser.long(minimum).? ~
      SqlParser.long(maximum).? ~
      SqlParser.str(example).? map {
        case name ~ typeInstance ~ location ~ description ~ deprecation ~ required ~ default ~ minimum ~ maximum ~ example => {
          io.apibuilder.spec.v0.models.Parameter(
            name = name,
            `type` = typeInstance,
            location = location,
            description = description,
            deprecation = deprecation,
            required = required,
            default = default,
            minimum = minimum,
            maximum = maximum,
            example = example
          )
        }
      }
    }

  }

  object Resource {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      `type` = s"$prefix${sep}type",
      plural = s"$prefix${sep}plural",
      path = s"$prefix${sep}path",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      operations = s"$prefix${sep}operations",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      `type`: String = "type",
      plural: String = "plural",
      path: String = "path",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      operations: String = "operations",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Resource] = {
      SqlParser.str(`type`) ~
      SqlParser.str(plural) ~
      SqlParser.str(path).? ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Operation]](operations) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case typeInstance ~ plural ~ path ~ description ~ deprecation ~ operations ~ attributes => {
          io.apibuilder.spec.v0.models.Resource(
            `type` = typeInstance,
            plural = plural,
            path = path,
            description = description,
            deprecation = deprecation,
            operations = operations,
            attributes = attributes
          )
        }
      }
    }

  }

  object Response {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      codePrefix = s"$prefix${sep}code",
      `type` = s"$prefix${sep}type",
      headers = s"$prefix${sep}headers",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      codePrefix: String = "code",
      `type`: String = "type",
      headers: String = "headers",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Response] = ???

  }

  object Service {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      apidocPrefix = s"$prefix${sep}apidoc",
      name = s"$prefix${sep}name",
      organizationPrefix = s"$prefix${sep}organization",
      applicationPrefix = s"$prefix${sep}application",
      namespace = s"$prefix${sep}namespace",
      version = s"$prefix${sep}version",
      baseUrl = s"$prefix${sep}base_url",
      description = s"$prefix${sep}description",
      infoPrefix = s"$prefix${sep}info",
      headers = s"$prefix${sep}headers",
      imports = s"$prefix${sep}imports",
      enums = s"$prefix${sep}enums",
      unions = s"$prefix${sep}unions",
      models = s"$prefix${sep}models",
      resources = s"$prefix${sep}resources",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      apidocPrefix: String = "apidoc",
      name: String = "name",
      organizationPrefix: String = "organization",
      applicationPrefix: String = "application",
      namespace: String = "namespace",
      version: String = "version",
      baseUrl: String = "base_url",
      description: String = "description",
      infoPrefix: String = "info",
      headers: String = "headers",
      imports: String = "imports",
      enums: String = "enums",
      unions: String = "unions",
      models: String = "models",
      resources: String = "resources",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Service] = {
      io.apibuilder.spec.v0.anorm.parsers.Apidoc.parserWithPrefix(apidocPrefix) ~
      SqlParser.str(name) ~
      io.apibuilder.spec.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.spec.v0.anorm.parsers.Application.parserWithPrefix(applicationPrefix) ~
      SqlParser.str(namespace) ~
      SqlParser.str(version) ~
      SqlParser.str(baseUrl).? ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Info.parserWithPrefix(infoPrefix) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Header]](headers) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Import]](imports) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Enum]](enums) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Union]](unions) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Model]](models) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Resource]](resources) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case apidoc ~ name ~ organization ~ application ~ namespace ~ version ~ baseUrl ~ description ~ info ~ headers ~ imports ~ enums ~ unions ~ models ~ resources ~ attributes => {
          io.apibuilder.spec.v0.models.Service(
            apidoc = apidoc,
            name = name,
            organization = organization,
            application = application,
            namespace = namespace,
            version = version,
            baseUrl = baseUrl,
            description = description,
            info = info,
            headers = headers,
            imports = imports,
            enums = enums,
            unions = unions,
            models = models,
            resources = resources,
            attributes = attributes
          )
        }
      }
    }

  }

  object Union {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      plural = s"$prefix${sep}plural",
      discriminator = s"$prefix${sep}discriminator",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      types = s"$prefix${sep}types",
      attributes = s"$prefix${sep}attributes"
    )

    def parser(
      name: String = "name",
      plural: String = "plural",
      discriminator: String = "discriminator",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      types: String = "types",
      attributes: String = "attributes"
    ): RowParser[io.apibuilder.spec.v0.models.Union] = {
      SqlParser.str(name) ~
      SqlParser.str(plural) ~
      SqlParser.str(discriminator).? ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.UnionType]](types) ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) map {
        case name ~ plural ~ discriminator ~ description ~ deprecation ~ types ~ attributes => {
          io.apibuilder.spec.v0.models.Union(
            name = name,
            plural = plural,
            discriminator = discriminator,
            description = description,
            deprecation = deprecation,
            types = types,
            attributes = attributes
          )
        }
      }
    }

  }

  object UnionType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      `type` = s"$prefix${sep}type",
      description = s"$prefix${sep}description",
      deprecationPrefix = s"$prefix${sep}deprecation",
      attributes = s"$prefix${sep}attributes",
      default = s"$prefix${sep}default"
    )

    def parser(
      `type`: String = "type",
      description: String = "description",
      deprecationPrefix: String = "deprecation",
      attributes: String = "attributes",
      default: String = "default"
    ): RowParser[io.apibuilder.spec.v0.models.UnionType] = {
      SqlParser.str(`type`) ~
      SqlParser.str(description).? ~
      io.apibuilder.spec.v0.anorm.parsers.Deprecation.parserWithPrefix(deprecationPrefix).? ~
      SqlParser.get[Seq[io.apibuilder.spec.v0.models.Attribute]](attributes) ~
      SqlParser.bool(default).? map {
        case typeInstance ~ description ~ deprecation ~ attributes ~ default => {
          io.apibuilder.spec.v0.models.UnionType(
            `type` = typeInstance,
            description = description,
            deprecation = deprecation,
            attributes = attributes,
            default = default
          )
        }
      }
    }

  }

  object ResponseCode {

    def parserWithPrefix(prefix: String, sep: String = "_") = ???
    def parser() = ???

  }

}
