/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.58
 * apibuilder:0.12.52 https://app.apibuilder.io/apicollective/apibuilder-api/0.12.58/anorm_2_x_parsers
 */
import anorm._

package io.apibuilder.api.v0.anorm.parsers {

  import io.apibuilder.api.v0.anorm.conversions.Standard._

  import io.apibuilder.api.v0.anorm.conversions.Types._
  import io.apibuilder.common.v0.anorm.conversions.Types._
  import io.apibuilder.generator.v0.anorm.conversions.Types._
  import io.apibuilder.spec.v0.anorm.conversions.Types._

  object OriginalType {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "original_type"): RowParser[io.apibuilder.api.v0.models.OriginalType] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.api.v0.models.OriginalType(value)
      }
    }

  }

  object Publication {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "publication"): RowParser[io.apibuilder.api.v0.models.Publication] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.api.v0.models.Publication(value)
      }
    }

  }

  object Visibility {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(s"$prefix${sep}name")

    def parser(name: String = "visibility"): RowParser[io.apibuilder.api.v0.models.Visibility] = {
      SqlParser.str(name) map {
        case value => io.apibuilder.api.v0.models.Visibility(value)
      }
    }

  }

  object Application {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      organizationPrefix = s"$prefix${sep}organization",
      name = s"$prefix${sep}name",
      key = s"$prefix${sep}key",
      visibility = s"$prefix${sep}visibility",
      description = s"$prefix${sep}description",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      organizationPrefix: String = "organization",
      name: String = "name",
      key: String = "key",
      visibility: String = "visibility",
      description: String = "description",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Application] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(name) ~
      SqlParser.str(key) ~
      io.apibuilder.api.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.str(description).? ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ organization ~ name ~ key ~ visibility ~ description ~ audit => {
          io.apibuilder.api.v0.models.Application(
            guid = guid,
            organization = organization,
            name = name,
            key = key,
            visibility = visibility,
            description = description,
            audit = audit
          )
        }
      }
    }

  }

  object ApplicationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      key = s"$prefix${sep}key",
      description = s"$prefix${sep}description",
      visibility = s"$prefix${sep}visibility"
    )

    def parser(
      name: String = "name",
      key: String = "key",
      description: String = "description",
      visibility: String = "visibility"
    ): RowParser[io.apibuilder.api.v0.models.ApplicationForm] = {
      SqlParser.str(name) ~
      SqlParser.str(key).? ~
      SqlParser.str(description).? ~
      io.apibuilder.api.v0.anorm.parsers.Visibility.parser(visibility) map {
        case name ~ key ~ description ~ visibility => {
          io.apibuilder.api.v0.models.ApplicationForm(
            name = name,
            key = key,
            description = description,
            visibility = visibility
          )
        }
      }
    }

  }

  object ApplicationMetadata {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      key = s"$prefix${sep}key"
    )

    def parser(
      guid: String = "guid",
      key: String = "key"
    ): RowParser[io.apibuilder.api.v0.models.ApplicationMetadata] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(key) map {
        case guid ~ key => {
          io.apibuilder.api.v0.models.ApplicationMetadata(
            guid = guid,
            key = key
          )
        }
      }
    }

  }

  object ApplicationMetadataVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      version = s"$prefix${sep}version"
    )

    def parser(
      version: String = "version"
    ): RowParser[io.apibuilder.api.v0.models.ApplicationMetadataVersion] = {
      SqlParser.str(version) map {
        case version => {
          io.apibuilder.api.v0.models.ApplicationMetadataVersion(
            version = version
          )
        }
      }
    }

  }

  object ApplicationSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      organizationPrefix = s"$prefix${sep}organization",
      key = s"$prefix${sep}key"
    )

    def parser(
      guid: String = "guid",
      organizationPrefix: String = "organization",
      key: String = "key"
    ): RowParser[io.apibuilder.api.v0.models.ApplicationSummary] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(key) map {
        case guid ~ organization ~ key => {
          io.apibuilder.api.v0.models.ApplicationSummary(
            guid = guid,
            organization = organization,
            key = key
          )
        }
      }
    }

  }

  object Attribute {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      name = s"$prefix${sep}name",
      description = s"$prefix${sep}description",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      name: String = "name",
      description: String = "description",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Attribute] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(name) ~
      SqlParser.str(description).? ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ name ~ description ~ audit => {
          io.apibuilder.api.v0.models.Attribute(
            guid = guid,
            name = name,
            description = description,
            audit = audit
          )
        }
      }
    }

  }

  object AttributeForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      description = s"$prefix${sep}description"
    )

    def parser(
      name: String = "name",
      description: String = "description"
    ): RowParser[io.apibuilder.api.v0.models.AttributeForm] = {
      SqlParser.str(name) ~
      SqlParser.str(description).? map {
        case name ~ description => {
          io.apibuilder.api.v0.models.AttributeForm(
            name = name,
            description = description
          )
        }
      }
    }

  }

  object AttributeSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      name = s"$prefix${sep}name"
    )

    def parser(
      guid: String = "guid",
      name: String = "name"
    ): RowParser[io.apibuilder.api.v0.models.AttributeSummary] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(name) map {
        case guid ~ name => {
          io.apibuilder.api.v0.models.AttributeSummary(
            guid = guid,
            name = name
          )
        }
      }
    }

  }

  object AttributeValue {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      attributePrefix = s"$prefix${sep}attribute",
      value = s"$prefix${sep}value",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      attributePrefix: String = "attribute",
      value: String = "value",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.AttributeValue] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.AttributeSummary.parserWithPrefix(attributePrefix) ~
      SqlParser.str(value) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ attribute ~ value ~ audit => {
          io.apibuilder.api.v0.models.AttributeValue(
            guid = guid,
            attribute = attribute,
            value = value,
            audit = audit
          )
        }
      }
    }

  }

  object AttributeValueForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      value = s"$prefix${sep}value"
    )

    def parser(
      value: String = "value"
    ): RowParser[io.apibuilder.api.v0.models.AttributeValueForm] = {
      SqlParser.str(value) map {
        case value => {
          io.apibuilder.api.v0.models.AttributeValueForm(
            value = value
          )
        }
      }
    }

  }

  object Authentication {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userPrefix = s"$prefix${sep}user",
      sessionPrefix = s"$prefix${sep}session"
    )

    def parser(
      userPrefix: String = "user",
      sessionPrefix: String = "session"
    ): RowParser[io.apibuilder.api.v0.models.Authentication] = {
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Session.parserWithPrefix(sessionPrefix) map {
        case user ~ session => {
          io.apibuilder.api.v0.models.Authentication(
            user = user,
            session = session
          )
        }
      }
    }

  }

  object Change {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      organizationPrefix = s"$prefix${sep}organization",
      applicationPrefix = s"$prefix${sep}application",
      fromVersionPrefix = s"$prefix${sep}from_version",
      toVersionPrefix = s"$prefix${sep}to_version",
      diffPrefix = s"$prefix${sep}diff",
      changedAt = s"$prefix${sep}changed_at",
      changedByPrefix = s"$prefix${sep}changed_by",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      organizationPrefix: String = "organization",
      applicationPrefix: String = "application",
      fromVersionPrefix: String = "from_version",
      toVersionPrefix: String = "to_version",
      diffPrefix: String = "diff",
      changedAt: String = "changed_at",
      changedByPrefix: String = "changed_by",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Change] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(applicationPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.ChangeVersion.parserWithPrefix(fromVersionPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.ChangeVersion.parserWithPrefix(toVersionPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Diff.parserWithPrefix(diffPrefix) ~
      SqlParser.get[_root_.org.joda.time.DateTime](changedAt) ~
      io.apibuilder.api.v0.anorm.parsers.UserSummary.parserWithPrefix(changedByPrefix) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ organization ~ application ~ fromVersion ~ toVersion ~ diff ~ changedAt ~ changedBy ~ audit => {
          io.apibuilder.api.v0.models.Change(
            guid = guid,
            organization = organization,
            application = application,
            fromVersion = fromVersion,
            toVersion = toVersion,
            diff = diff,
            changedAt = changedAt,
            changedBy = changedBy,
            audit = audit
          )
        }
      }
    }

  }

  object ChangeVersion {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      version = s"$prefix${sep}version"
    )

    def parser(
      guid: String = "guid",
      version: String = "version"
    ): RowParser[io.apibuilder.api.v0.models.ChangeVersion] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(version) map {
        case guid ~ version => {
          io.apibuilder.api.v0.models.ChangeVersion(
            guid = guid,
            version = version
          )
        }
      }
    }

  }

  object CleartextToken {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      token = s"$prefix${sep}token"
    )

    def parser(
      token: String = "token"
    ): RowParser[io.apibuilder.api.v0.models.CleartextToken] = {
      SqlParser.str(token) map {
        case token => {
          io.apibuilder.api.v0.models.CleartextToken(
            token = token
          )
        }
      }
    }

  }

  object Code {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      generatorPrefix = s"$prefix${sep}generator",
      source = s"$prefix${sep}source",
      files = s"$prefix${sep}files"
    )

    def parser(
      generatorPrefix: String = "generator",
      source: String = "source",
      files: String = "files"
    ): RowParser[io.apibuilder.api.v0.models.Code] = {
      io.apibuilder.api.v0.anorm.parsers.GeneratorWithService.parserWithPrefix(generatorPrefix) ~
      SqlParser.str(source) ~
      SqlParser.get[Seq[io.apibuilder.generator.v0.models.File]](files) map {
        case generator ~ source ~ files => {
          io.apibuilder.api.v0.models.Code(
            generator = generator,
            source = source,
            files = files
          )
        }
      }
    }

  }

  object DiffBreaking {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      description = s"$prefix${sep}description"
    )

    def parser(
      description: String = "description"
    ): RowParser[io.apibuilder.api.v0.models.DiffBreaking] = {
      SqlParser.str(description) map {
        case description => {
          io.apibuilder.api.v0.models.DiffBreaking(
            description = description
          )
        }
      }
    }

  }

  object DiffNonBreaking {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      description = s"$prefix${sep}description"
    )

    def parser(
      description: String = "description"
    ): RowParser[io.apibuilder.api.v0.models.DiffNonBreaking] = {
      SqlParser.str(description) map {
        case description => {
          io.apibuilder.api.v0.models.DiffNonBreaking(
            description = description
          )
        }
      }
    }

  }

  object Domain {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name"
    )

    def parser(
      name: String = "name"
    ): RowParser[io.apibuilder.api.v0.models.Domain] = {
      SqlParser.str(name) map {
        case name => {
          io.apibuilder.api.v0.models.Domain(
            name = name
          )
        }
      }
    }

  }

  object EmailVerificationConfirmationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      token = s"$prefix${sep}token"
    )

    def parser(
      token: String = "token"
    ): RowParser[io.apibuilder.api.v0.models.EmailVerificationConfirmationForm] = {
      SqlParser.str(token) map {
        case token => {
          io.apibuilder.api.v0.models.EmailVerificationConfirmationForm(
            token = token
          )
        }
      }
    }

  }

  object Error {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      code = s"$prefix${sep}code",
      message = s"$prefix${sep}message"
    )

    def parser(
      code: String = "code",
      message: String = "message"
    ): RowParser[io.apibuilder.api.v0.models.Error] = {
      SqlParser.str(code) ~
      SqlParser.str(message) map {
        case code ~ message => {
          io.apibuilder.api.v0.models.Error(
            code = code,
            message = message
          )
        }
      }
    }

  }

  object GeneratorForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      serviceGuid = s"$prefix${sep}service_guid",
      generatorPrefix = s"$prefix${sep}generator"
    )

    def parser(
      serviceGuid: String = "service_guid",
      generatorPrefix: String = "generator"
    ): RowParser[io.apibuilder.api.v0.models.GeneratorForm] = {
      SqlParser.get[_root_.java.util.UUID](serviceGuid) ~
      io.apibuilder.generator.v0.anorm.parsers.Generator.parserWithPrefix(generatorPrefix) map {
        case serviceGuid ~ generator => {
          io.apibuilder.api.v0.models.GeneratorForm(
            serviceGuid = serviceGuid,
            generator = generator
          )
        }
      }
    }

  }

  object GeneratorService {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      uri = s"$prefix${sep}uri",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      uri: String = "uri",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.GeneratorService] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(uri) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ uri ~ audit => {
          io.apibuilder.api.v0.models.GeneratorService(
            guid = guid,
            uri = uri,
            audit = audit
          )
        }
      }
    }

  }

  object GeneratorServiceForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      uri = s"$prefix${sep}uri"
    )

    def parser(
      uri: String = "uri"
    ): RowParser[io.apibuilder.api.v0.models.GeneratorServiceForm] = {
      SqlParser.str(uri) map {
        case uri => {
          io.apibuilder.api.v0.models.GeneratorServiceForm(
            uri = uri
          )
        }
      }
    }

  }

  object GeneratorWithService {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      servicePrefix = s"$prefix${sep}service",
      generatorPrefix = s"$prefix${sep}generator"
    )

    def parser(
      servicePrefix: String = "service",
      generatorPrefix: String = "generator"
    ): RowParser[io.apibuilder.api.v0.models.GeneratorWithService] = {
      io.apibuilder.api.v0.anorm.parsers.GeneratorService.parserWithPrefix(servicePrefix) ~
      io.apibuilder.generator.v0.anorm.parsers.Generator.parserWithPrefix(generatorPrefix) map {
        case service ~ generator => {
          io.apibuilder.api.v0.models.GeneratorWithService(
            service = service,
            generator = generator
          )
        }
      }
    }

  }

  object Item {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      detailPrefix = s"$prefix${sep}detail",
      label = s"$prefix${sep}label",
      description = s"$prefix${sep}description"
    )

    def parser(
      guid: String = "guid",
      detailPrefix: String = "detail",
      label: String = "label",
      description: String = "description"
    ): RowParser[io.apibuilder.api.v0.models.Item] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.ItemDetail.parserWithPrefix(detailPrefix) ~
      SqlParser.str(label) ~
      SqlParser.str(description).? map {
        case guid ~ detail ~ label ~ description => {
          io.apibuilder.api.v0.models.Item(
            guid = guid,
            detail = detail,
            label = label,
            description = description
          )
        }
      }
    }

  }

  object Membership {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      userPrefix = s"$prefix${sep}user",
      organizationPrefix = s"$prefix${sep}organization",
      role = s"$prefix${sep}role",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      userPrefix: String = "user",
      organizationPrefix: String = "organization",
      role: String = "role",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Membership] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(role) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ user ~ organization ~ role ~ audit => {
          io.apibuilder.api.v0.models.Membership(
            guid = guid,
            user = user,
            organization = organization,
            role = role,
            audit = audit
          )
        }
      }
    }

  }

  object MembershipRequest {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      userPrefix = s"$prefix${sep}user",
      organizationPrefix = s"$prefix${sep}organization",
      role = s"$prefix${sep}role",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      userPrefix: String = "user",
      organizationPrefix: String = "organization",
      role: String = "role",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.MembershipRequest] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      SqlParser.str(role) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ user ~ organization ~ role ~ audit => {
          io.apibuilder.api.v0.models.MembershipRequest(
            guid = guid,
            user = user,
            organization = organization,
            role = role,
            audit = audit
          )
        }
      }
    }

  }

  object MoveForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      orgKey = s"$prefix${sep}org_key"
    )

    def parser(
      orgKey: String = "org_key"
    ): RowParser[io.apibuilder.api.v0.models.MoveForm] = {
      SqlParser.str(orgKey) map {
        case orgKey => {
          io.apibuilder.api.v0.models.MoveForm(
            orgKey = orgKey
          )
        }
      }
    }

  }

  object Organization {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      key = s"$prefix${sep}key",
      name = s"$prefix${sep}name",
      namespace = s"$prefix${sep}namespace",
      visibility = s"$prefix${sep}visibility",
      domains = s"$prefix${sep}domains",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      key: String = "key",
      name: String = "name",
      namespace: String = "namespace",
      visibility: String = "visibility",
      domains: String = "domains",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Organization] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(key) ~
      SqlParser.str(name) ~
      SqlParser.str(namespace) ~
      io.apibuilder.api.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.get[Seq[io.apibuilder.api.v0.models.Domain]](domains) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ key ~ name ~ namespace ~ visibility ~ domains ~ audit => {
          io.apibuilder.api.v0.models.Organization(
            guid = guid,
            key = key,
            name = name,
            namespace = namespace,
            visibility = visibility,
            domains = domains,
            audit = audit
          )
        }
      }
    }

  }

  object OrganizationForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      name = s"$prefix${sep}name",
      key = s"$prefix${sep}key",
      namespace = s"$prefix${sep}namespace",
      visibility = s"$prefix${sep}visibility",
      domains = s"$prefix${sep}domains"
    )

    def parser(
      name: String = "name",
      key: String = "key",
      namespace: String = "namespace",
      visibility: String = "visibility",
      domains: String = "domains"
    ): RowParser[io.apibuilder.api.v0.models.OrganizationForm] = {
      SqlParser.str(name) ~
      SqlParser.str(key).? ~
      SqlParser.str(namespace) ~
      io.apibuilder.api.v0.anorm.parsers.Visibility.parser(visibility) ~
      SqlParser.get[Seq[String]](domains).? map {
        case name ~ key ~ namespace ~ visibility ~ domains => {
          io.apibuilder.api.v0.models.OrganizationForm(
            name = name,
            key = key,
            namespace = namespace,
            visibility = visibility,
            domains = domains
          )
        }
      }
    }

  }

  object Original {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      `type` = s"$prefix${sep}type",
      data = s"$prefix${sep}data"
    )

    def parser(
      `type`: String = "type",
      data: String = "data"
    ): RowParser[io.apibuilder.api.v0.models.Original] = {
      io.apibuilder.api.v0.anorm.parsers.OriginalType.parser(`type`) ~
      SqlParser.str(data) map {
        case typeInstance ~ data => {
          io.apibuilder.api.v0.models.Original(
            `type` = typeInstance,
            data = data
          )
        }
      }
    }

  }

  object OriginalForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      `type` = s"$prefix${sep}type",
      data = s"$prefix${sep}data"
    )

    def parser(
      `type`: String = "type",
      data: String = "data"
    ): RowParser[io.apibuilder.api.v0.models.OriginalForm] = {
      io.apibuilder.api.v0.anorm.parsers.OriginalType.parser(`type`).? ~
      SqlParser.str(data) map {
        case typeInstance ~ data => {
          io.apibuilder.api.v0.models.OriginalForm(
            `type` = typeInstance,
            data = data
          )
        }
      }
    }

  }

  object PasswordReset {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      token = s"$prefix${sep}token",
      password = s"$prefix${sep}password"
    )

    def parser(
      token: String = "token",
      password: String = "password"
    ): RowParser[io.apibuilder.api.v0.models.PasswordReset] = {
      SqlParser.str(token) ~
      SqlParser.str(password) map {
        case token ~ password => {
          io.apibuilder.api.v0.models.PasswordReset(
            token = token,
            password = password
          )
        }
      }
    }

  }

  object PasswordResetRequest {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      email = s"$prefix${sep}email"
    )

    def parser(
      email: String = "email"
    ): RowParser[io.apibuilder.api.v0.models.PasswordResetRequest] = {
      SqlParser.str(email) map {
        case email => {
          io.apibuilder.api.v0.models.PasswordResetRequest(
            email = email
          )
        }
      }
    }

  }

  object Session {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      id = s"$prefix${sep}id",
      expiresAt = s"$prefix${sep}expires_at"
    )

    def parser(
      id: String = "id",
      expiresAt: String = "expires_at"
    ): RowParser[io.apibuilder.api.v0.models.Session] = {
      SqlParser.str(id) ~
      SqlParser.get[_root_.org.joda.time.DateTime](expiresAt) map {
        case id ~ expiresAt => {
          io.apibuilder.api.v0.models.Session(
            id = id,
            expiresAt = expiresAt
          )
        }
      }
    }

  }

  object Subscription {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      organizationPrefix = s"$prefix${sep}organization",
      userPrefix = s"$prefix${sep}user",
      publication = s"$prefix${sep}publication",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      organizationPrefix: String = "organization",
      userPrefix: String = "user",
      publication: String = "publication",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Subscription] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Publication.parser(publication) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ organization ~ user ~ publication ~ audit => {
          io.apibuilder.api.v0.models.Subscription(
            guid = guid,
            organization = organization,
            user = user,
            publication = publication,
            audit = audit
          )
        }
      }
    }

  }

  object SubscriptionForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      organizationKey = s"$prefix${sep}organization_key",
      userGuid = s"$prefix${sep}user_guid",
      publication = s"$prefix${sep}publication"
    )

    def parser(
      organizationKey: String = "organization_key",
      userGuid: String = "user_guid",
      publication: String = "publication"
    ): RowParser[io.apibuilder.api.v0.models.SubscriptionForm] = {
      SqlParser.str(organizationKey) ~
      SqlParser.get[_root_.java.util.UUID](userGuid) ~
      io.apibuilder.api.v0.anorm.parsers.Publication.parser(publication) map {
        case organizationKey ~ userGuid ~ publication => {
          io.apibuilder.api.v0.models.SubscriptionForm(
            organizationKey = organizationKey,
            userGuid = userGuid,
            publication = publication
          )
        }
      }
    }

  }

  object Token {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      userPrefix = s"$prefix${sep}user",
      maskedToken = s"$prefix${sep}masked_token",
      description = s"$prefix${sep}description",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      userPrefix: String = "user",
      maskedToken: String = "masked_token",
      description: String = "description",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Token] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      SqlParser.str(maskedToken) ~
      SqlParser.str(description).? ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ user ~ maskedToken ~ description ~ audit => {
          io.apibuilder.api.v0.models.Token(
            guid = guid,
            user = user,
            maskedToken = maskedToken,
            description = description,
            audit = audit
          )
        }
      }
    }

  }

  object TokenForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userGuid = s"$prefix${sep}user_guid",
      description = s"$prefix${sep}description"
    )

    def parser(
      userGuid: String = "user_guid",
      description: String = "description"
    ): RowParser[io.apibuilder.api.v0.models.TokenForm] = {
      SqlParser.get[_root_.java.util.UUID](userGuid) ~
      SqlParser.str(description).? map {
        case userGuid ~ description => {
          io.apibuilder.api.v0.models.TokenForm(
            userGuid = userGuid,
            description = description
          )
        }
      }
    }

  }

  object User {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      email = s"$prefix${sep}email",
      nickname = s"$prefix${sep}nickname",
      name = s"$prefix${sep}name",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      email: String = "email",
      nickname: String = "nickname",
      name: String = "name",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.User] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(email) ~
      SqlParser.str(nickname) ~
      SqlParser.str(name).? ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ email ~ nickname ~ name ~ audit => {
          io.apibuilder.api.v0.models.User(
            guid = guid,
            email = email,
            nickname = nickname,
            name = name,
            audit = audit
          )
        }
      }
    }

  }

  object UserForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      email = s"$prefix${sep}email",
      password = s"$prefix${sep}password",
      nickname = s"$prefix${sep}nickname",
      name = s"$prefix${sep}name"
    )

    def parser(
      email: String = "email",
      password: String = "password",
      nickname: String = "nickname",
      name: String = "name"
    ): RowParser[io.apibuilder.api.v0.models.UserForm] = {
      SqlParser.str(email) ~
      SqlParser.str(password) ~
      SqlParser.str(nickname).? ~
      SqlParser.str(name).? map {
        case email ~ password ~ nickname ~ name => {
          io.apibuilder.api.v0.models.UserForm(
            email = email,
            password = password,
            nickname = nickname,
            name = name
          )
        }
      }
    }

  }

  object UserSummary {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      nickname = s"$prefix${sep}nickname"
    )

    def parser(
      guid: String = "guid",
      nickname: String = "nickname"
    ): RowParser[io.apibuilder.api.v0.models.UserSummary] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      SqlParser.str(nickname) map {
        case guid ~ nickname => {
          io.apibuilder.api.v0.models.UserSummary(
            guid = guid,
            nickname = nickname
          )
        }
      }
    }

  }

  object UserUpdateForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      email = s"$prefix${sep}email",
      nickname = s"$prefix${sep}nickname",
      name = s"$prefix${sep}name"
    )

    def parser(
      email: String = "email",
      nickname: String = "nickname",
      name: String = "name"
    ): RowParser[io.apibuilder.api.v0.models.UserUpdateForm] = {
      SqlParser.str(email) ~
      SqlParser.str(nickname) ~
      SqlParser.str(name).? map {
        case email ~ nickname ~ name => {
          io.apibuilder.api.v0.models.UserUpdateForm(
            email = email,
            nickname = nickname,
            name = name
          )
        }
      }
    }

  }

  object Validation {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      valid = s"$prefix${sep}valid",
      errors = s"$prefix${sep}errors"
    )

    def parser(
      valid: String = "valid",
      errors: String = "errors"
    ): RowParser[io.apibuilder.api.v0.models.Validation] = {
      SqlParser.bool(valid) ~
      SqlParser.get[Seq[String]](errors) map {
        case valid ~ errors => {
          io.apibuilder.api.v0.models.Validation(
            valid = valid,
            errors = errors
          )
        }
      }
    }

  }

  object Version {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      organizationPrefix = s"$prefix${sep}organization",
      applicationPrefix = s"$prefix${sep}application",
      version = s"$prefix${sep}version",
      originalPrefix = s"$prefix${sep}original",
      servicePrefix = s"$prefix${sep}service",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      organizationPrefix: String = "organization",
      applicationPrefix: String = "application",
      version: String = "version",
      originalPrefix: String = "original",
      servicePrefix: String = "service",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Version] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.common.v0.anorm.parsers.Reference.parserWithPrefix(applicationPrefix) ~
      SqlParser.str(version) ~
      io.apibuilder.api.v0.anorm.parsers.Original.parserWithPrefix(originalPrefix).? ~
      io.apibuilder.spec.v0.anorm.parsers.Service.parserWithPrefix(servicePrefix) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ organization ~ application ~ version ~ original ~ service ~ audit => {
          io.apibuilder.api.v0.models.Version(
            guid = guid,
            organization = organization,
            application = application,
            version = version,
            original = original,
            service = service,
            audit = audit
          )
        }
      }
    }

  }

  object VersionForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      originalFormPrefix = s"$prefix${sep}original_form",
      visibility = s"$prefix${sep}visibility"
    )

    def parser(
      originalFormPrefix: String = "original_form",
      visibility: String = "visibility"
    ): RowParser[io.apibuilder.api.v0.models.VersionForm] = {
      io.apibuilder.api.v0.anorm.parsers.OriginalForm.parserWithPrefix(originalFormPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Visibility.parser(visibility).? map {
        case originalForm ~ visibility => {
          io.apibuilder.api.v0.models.VersionForm(
            originalForm = originalForm,
            visibility = visibility
          )
        }
      }
    }

  }

  object Watch {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      guid = s"$prefix${sep}guid",
      userPrefix = s"$prefix${sep}user",
      organizationPrefix = s"$prefix${sep}organization",
      applicationPrefix = s"$prefix${sep}application",
      auditPrefix = s"$prefix${sep}audit"
    )

    def parser(
      guid: String = "guid",
      userPrefix: String = "user",
      organizationPrefix: String = "organization",
      applicationPrefix: String = "application",
      auditPrefix: String = "audit"
    ): RowParser[io.apibuilder.api.v0.models.Watch] = {
      SqlParser.get[_root_.java.util.UUID](guid) ~
      io.apibuilder.api.v0.anorm.parsers.User.parserWithPrefix(userPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Organization.parserWithPrefix(organizationPrefix) ~
      io.apibuilder.api.v0.anorm.parsers.Application.parserWithPrefix(applicationPrefix) ~
      io.apibuilder.common.v0.anorm.parsers.Audit.parserWithPrefix(auditPrefix) map {
        case guid ~ user ~ organization ~ application ~ audit => {
          io.apibuilder.api.v0.models.Watch(
            guid = guid,
            user = user,
            organization = organization,
            application = application,
            audit = audit
          )
        }
      }
    }

  }

  object WatchForm {

    def parserWithPrefix(prefix: String, sep: String = "_") = parser(
      userGuid = s"$prefix${sep}user_guid",
      organizationKey = s"$prefix${sep}organization_key",
      applicationKey = s"$prefix${sep}application_key"
    )

    def parser(
      userGuid: String = "user_guid",
      organizationKey: String = "organization_key",
      applicationKey: String = "application_key"
    ): RowParser[io.apibuilder.api.v0.models.WatchForm] = {
      SqlParser.get[_root_.java.util.UUID](userGuid) ~
      SqlParser.str(organizationKey) ~
      SqlParser.str(applicationKey) map {
        case userGuid ~ organizationKey ~ applicationKey => {
          io.apibuilder.api.v0.models.WatchForm(
            userGuid = userGuid,
            organizationKey = organizationKey,
            applicationKey = applicationKey
          )
        }
      }
    }

  }

  object Diff {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.apibuilder.api.v0.anorm.parsers.DiffBreaking.parserWithPrefix(prefix, sep) |
      io.apibuilder.api.v0.anorm.parsers.DiffNonBreaking.parserWithPrefix(prefix, sep)
    }

    def parser() = {
      io.apibuilder.api.v0.anorm.parsers.DiffBreaking.parser() |
      io.apibuilder.api.v0.anorm.parsers.DiffNonBreaking.parser()
    }

  }

  object ItemDetail {

    def parserWithPrefix(prefix: String, sep: String = "_") = {
      io.apibuilder.api.v0.anorm.parsers.ApplicationSummary.parserWithPrefix(prefix, sep)
    }

    def parser() = {
      io.apibuilder.api.v0.anorm.parsers.ApplicationSummary.parser()
    }

  }

}