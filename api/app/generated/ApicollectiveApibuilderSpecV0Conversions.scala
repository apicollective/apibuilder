/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.12.24
 * apibuilder:0.12.38 https://app.apibuilder.io/apicollective/apibuilder-spec/0.12.24/anorm_2_x_parsers
 */
package io.apibuilder.spec.v0.anorm.conversions {

  import anorm.{Column, MetaDataItem, TypeDoesNotMatch}
  import play.api.libs.json.{JsArray, JsObject, JsValue}
  import scala.util.{Failure, Success, Try}

  /**
    * Conversions to collections of objects using JSON.
    */
  object Util {

    def parser[T](
      f: play.api.libs.json.JsValue => T
    ) = anorm.Column.nonNull { (value, meta) =>
      val MetaDataItem(columnName, nullable, clazz) = meta
      value match {
        case json: org.postgresql.util.PGobject => parseJson(f, columnName.qualified, json.getValue)
        case json: java.lang.String => parseJson(f, columnName.qualified, json)
        case _=> {
          Left(
            TypeDoesNotMatch(
              s"Column[${columnName.qualified}] error converting $value to Json. Expected instance of type[org.postgresql.util.PGobject] and not[${value.asInstanceOf[AnyRef].getClass}]"
            )
          )
        }


      }
    }

    private[this] def parseJson[T](f: play.api.libs.json.JsValue => T, columnName: String, value: String) = {
      Try {
        f(
          play.api.libs.json.Json.parse(value)
        )
      } match {
        case Success(result) => Right(result)
        case Failure(ex) => Left(
          TypeDoesNotMatch(
            s"Column[$columnName] error parsing json $value: $ex"
          )
        )
      }
    }

  }

  object Types {
    import io.apibuilder.spec.v0.models.json._
    implicit val columnToSeqApibuilderspecMethod: Column[Seq[_root_.io.apibuilder.spec.v0.models.Method]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Method]] }
    implicit val columnToMapApibuilderspecMethod: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Method]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Method]] }
    implicit val columnToSeqApibuilderspecParameterLocation: Column[Seq[_root_.io.apibuilder.spec.v0.models.ParameterLocation]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.ParameterLocation]] }
    implicit val columnToMapApibuilderspecParameterLocation: Column[Map[String, _root_.io.apibuilder.spec.v0.models.ParameterLocation]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.ParameterLocation]] }
    implicit val columnToSeqApibuilderspecResponseCodeOption: Column[Seq[_root_.io.apibuilder.spec.v0.models.ResponseCodeOption]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.ResponseCodeOption]] }
    implicit val columnToMapApibuilderspecResponseCodeOption: Column[Map[String, _root_.io.apibuilder.spec.v0.models.ResponseCodeOption]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.ResponseCodeOption]] }
    implicit val columnToSeqApibuilderspecApidoc: Column[Seq[_root_.io.apibuilder.spec.v0.models.Apidoc]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Apidoc]] }
    implicit val columnToMapApibuilderspecApidoc: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Apidoc]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Apidoc]] }
    implicit val columnToSeqApibuilderspecApplication: Column[Seq[_root_.io.apibuilder.spec.v0.models.Application]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Application]] }
    implicit val columnToMapApibuilderspecApplication: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Application]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Application]] }
    implicit val columnToSeqApibuilderspecAttribute: Column[Seq[_root_.io.apibuilder.spec.v0.models.Attribute]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Attribute]] }
    implicit val columnToMapApibuilderspecAttribute: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Attribute]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Attribute]] }
    implicit val columnToSeqApibuilderspecBody: Column[Seq[_root_.io.apibuilder.spec.v0.models.Body]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Body]] }
    implicit val columnToMapApibuilderspecBody: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Body]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Body]] }
    implicit val columnToSeqApibuilderspecContact: Column[Seq[_root_.io.apibuilder.spec.v0.models.Contact]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Contact]] }
    implicit val columnToMapApibuilderspecContact: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Contact]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Contact]] }
    implicit val columnToSeqApibuilderspecDeprecation: Column[Seq[_root_.io.apibuilder.spec.v0.models.Deprecation]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Deprecation]] }
    implicit val columnToMapApibuilderspecDeprecation: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Deprecation]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Deprecation]] }
    implicit val columnToSeqApibuilderspecEnum: Column[Seq[_root_.io.apibuilder.spec.v0.models.Enum]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Enum]] }
    implicit val columnToMapApibuilderspecEnum: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Enum]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Enum]] }
    implicit val columnToSeqApibuilderspecEnumValue: Column[Seq[_root_.io.apibuilder.spec.v0.models.EnumValue]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.EnumValue]] }
    implicit val columnToMapApibuilderspecEnumValue: Column[Map[String, _root_.io.apibuilder.spec.v0.models.EnumValue]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.EnumValue]] }
    implicit val columnToSeqApibuilderspecField: Column[Seq[_root_.io.apibuilder.spec.v0.models.Field]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Field]] }
    implicit val columnToMapApibuilderspecField: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Field]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Field]] }
    implicit val columnToSeqApibuilderspecHeader: Column[Seq[_root_.io.apibuilder.spec.v0.models.Header]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Header]] }
    implicit val columnToMapApibuilderspecHeader: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Header]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Header]] }
    implicit val columnToSeqApibuilderspecImport: Column[Seq[_root_.io.apibuilder.spec.v0.models.Import]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Import]] }
    implicit val columnToMapApibuilderspecImport: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Import]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Import]] }
    implicit val columnToSeqApibuilderspecInfo: Column[Seq[_root_.io.apibuilder.spec.v0.models.Info]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Info]] }
    implicit val columnToMapApibuilderspecInfo: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Info]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Info]] }
    implicit val columnToSeqApibuilderspecLicense: Column[Seq[_root_.io.apibuilder.spec.v0.models.License]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.License]] }
    implicit val columnToMapApibuilderspecLicense: Column[Map[String, _root_.io.apibuilder.spec.v0.models.License]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.License]] }
    implicit val columnToSeqApibuilderspecModel: Column[Seq[_root_.io.apibuilder.spec.v0.models.Model]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Model]] }
    implicit val columnToMapApibuilderspecModel: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Model]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Model]] }
    implicit val columnToSeqApibuilderspecOperation: Column[Seq[_root_.io.apibuilder.spec.v0.models.Operation]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Operation]] }
    implicit val columnToMapApibuilderspecOperation: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Operation]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Operation]] }
    implicit val columnToSeqApibuilderspecOrganization: Column[Seq[_root_.io.apibuilder.spec.v0.models.Organization]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Organization]] }
    implicit val columnToMapApibuilderspecOrganization: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Organization]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Organization]] }
    implicit val columnToSeqApibuilderspecParameter: Column[Seq[_root_.io.apibuilder.spec.v0.models.Parameter]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Parameter]] }
    implicit val columnToMapApibuilderspecParameter: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Parameter]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Parameter]] }
    implicit val columnToSeqApibuilderspecResource: Column[Seq[_root_.io.apibuilder.spec.v0.models.Resource]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Resource]] }
    implicit val columnToMapApibuilderspecResource: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Resource]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Resource]] }
    implicit val columnToSeqApibuilderspecResponse: Column[Seq[_root_.io.apibuilder.spec.v0.models.Response]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Response]] }
    implicit val columnToMapApibuilderspecResponse: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Response]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Response]] }
    implicit val columnToSeqApibuilderspecService: Column[Seq[_root_.io.apibuilder.spec.v0.models.Service]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Service]] }
    implicit val columnToMapApibuilderspecService: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Service]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Service]] }
    implicit val columnToSeqApibuilderspecUnion: Column[Seq[_root_.io.apibuilder.spec.v0.models.Union]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.Union]] }
    implicit val columnToMapApibuilderspecUnion: Column[Map[String, _root_.io.apibuilder.spec.v0.models.Union]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.Union]] }
    implicit val columnToSeqApibuilderspecUnionType: Column[Seq[_root_.io.apibuilder.spec.v0.models.UnionType]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.UnionType]] }
    implicit val columnToMapApibuilderspecUnionType: Column[Map[String, _root_.io.apibuilder.spec.v0.models.UnionType]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.UnionType]] }
    implicit val columnToSeqApibuilderspecResponseCode: Column[Seq[_root_.io.apibuilder.spec.v0.models.ResponseCode]] = Util.parser { _.as[Seq[_root_.io.apibuilder.spec.v0.models.ResponseCode]] }
    implicit val columnToMapApibuilderspecResponseCode: Column[Map[String, _root_.io.apibuilder.spec.v0.models.ResponseCode]] = Util.parser { _.as[Map[String, _root_.io.apibuilder.spec.v0.models.ResponseCode]] }
  }

  object Standard {
    implicit val columnToJsObject: Column[play.api.libs.json.JsObject] = Util.parser { _.as[play.api.libs.json.JsObject] }
    implicit val columnToSeqBoolean: Column[Seq[Boolean]] = Util.parser { _.as[Seq[Boolean]] }
    implicit val columnToMapBoolean: Column[Map[String, Boolean]] = Util.parser { _.as[Map[String, Boolean]] }
    implicit val columnToSeqDouble: Column[Seq[Double]] = Util.parser { _.as[Seq[Double]] }
    implicit val columnToMapDouble: Column[Map[String, Double]] = Util.parser { _.as[Map[String, Double]] }
    implicit val columnToSeqInt: Column[Seq[Int]] = Util.parser { _.as[Seq[Int]] }
    implicit val columnToMapInt: Column[Map[String, Int]] = Util.parser { _.as[Map[String, Int]] }
    implicit val columnToSeqLong: Column[Seq[Long]] = Util.parser { _.as[Seq[Long]] }
    implicit val columnToMapLong: Column[Map[String, Long]] = Util.parser { _.as[Map[String, Long]] }
    implicit val columnToSeqLocalDate: Column[Seq[_root_.org.joda.time.LocalDate]] = Util.parser { _.as[Seq[_root_.org.joda.time.LocalDate]] }
    implicit val columnToMapLocalDate: Column[Map[String, _root_.org.joda.time.LocalDate]] = Util.parser { _.as[Map[String, _root_.org.joda.time.LocalDate]] }
    implicit val columnToSeqDateTime: Column[Seq[_root_.org.joda.time.DateTime]] = Util.parser { _.as[Seq[_root_.org.joda.time.DateTime]] }
    implicit val columnToMapDateTime: Column[Map[String, _root_.org.joda.time.DateTime]] = Util.parser { _.as[Map[String, _root_.org.joda.time.DateTime]] }
    implicit val columnToSeqBigDecimal: Column[Seq[BigDecimal]] = Util.parser { _.as[Seq[BigDecimal]] }
    implicit val columnToMapBigDecimal: Column[Map[String, BigDecimal]] = Util.parser { _.as[Map[String, BigDecimal]] }
    implicit val columnToSeqJsObject: Column[Seq[_root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Seq[_root_.play.api.libs.json.JsObject]] }
    implicit val columnToMapJsObject: Column[Map[String, _root_.play.api.libs.json.JsObject]] = Util.parser { _.as[Map[String, _root_.play.api.libs.json.JsObject]] }
    implicit val columnToSeqString: Column[Seq[String]] = Util.parser { _.as[Seq[String]] }
    implicit val columnToMapString: Column[Map[String, String]] = Util.parser { _.as[Map[String, String]] }
    implicit val columnToSeqUUID: Column[Seq[_root_.java.util.UUID]] = Util.parser { _.as[Seq[_root_.java.util.UUID]] }
    implicit val columnToMapUUID: Column[Map[String, _root_.java.util.UUID]] = Util.parser { _.as[Map[String, _root_.java.util.UUID]] }
  }

}