{
    "name": "apidoc",
    "description": "Host API documentation for REST services, facilitating the design of good resource first APIs.",
    "base_url": "http://api.apidoc.me",

    "headers": [
      { "name": "X-Api-Doc", "type": "string", "description": "Example of an explicit header", "default": "www.apidoc.me" }
    ],

    "enums": {
	"visibility": {
	    "description": "Controls who is able to view this version",
	    "values": [
		{ "name": "organization", "description": "Any member of the organization can view this service" },
		{ "name": "public", "description": "Anybody, including non logged in users, can view this service" }
	    ]
	}
    },

    "models": {

	"healthcheck": {
	    "fields": [
                { "name": "status", "type": "string", "example": "healthy" }
	    ]
	},

	"validation": {
	    "description": "Used only to validate json files - used as a resource where http status code defines success",
	    "fields": [
                { "name": "valid", "type": "boolean", "description": "If true, the json schema is valid. If false, there is at least one validation error." },
		{ "name": "errors", "type": "[string]", "required": false, "description": "Contains any validation errors that result from parsing the json document. If empty, the document is valid." }
	    ]
	},

        "user": {
            "description": "A user is a top level person interacting with the api doc server.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this user." },
                { "name": "email", "type": "string" },
                { "name": "name", "type": "string", "required": false }
            ]
        },

        "organization": {
            "description": "An organization is used to group a set of services together.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this organization." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the organization name." },
                { "name": "name", "type": "string", "description": "The name of this organization." },
                { "name": "domains", "type": "[domain]", "required": false },
                { "name": "metadata", "type": "organization_metadata", "required": false }
            ]
        },

        "domain": {
            "description": "Represents a single domain name (e.g. www.apidoc.me). When a new user registers and confirms their email, we automatically associate that user with a member of the organization associated with their domain. For example, if you confirm your account with an email address of foo@gilt.com, we will automatically add you as a member to the organization with domain gilt.com.",
            "fields": [
                { "name": "name", "type": "string", "description": "The domain name", "example": "www.apidoc.me" }
            ]
        },

        "organization_metadata": {
            "description": "Supplemental (non-required) information about an organization",
            "fields": [
                { "name": "visibility", "type": "visibility", "description": "Public organizations will be listed in apidoc directory. Organizations with visibility organization will only be visible to members of that org.", "required": false, "default": "organization" },
                { "name": "package_name", "type": "string", "description": "The package name when used by code generators (e.g. scala package name for the clients)", "required": false }
            ]
        },

        "membership": {
            "description": "A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership." },
                { "name": "user", "type": "user" },
                { "name": "organization", "type": "organization" },
                { "name": "role", "type": "string", "description": "The role this user plays for this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "membership_request": {
            "description": "A membership request represents a user requesting to join an organization with a specific role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership request." },
                { "name": "user", "type": "user" },
                { "name": "organization", "type": "organization" },
                { "name": "role", "type": "string", "description": "The requested role for membership to this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "service": {
            "description": "A service has a name and multiple versions of an API (Interface).",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this service." },
                { "name": "name", "type": "string", "description": "The unique name for this service." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the service name." },
                { "name": "visibility", "type": "visibility", "description": "Controls who is able to view this service" },
                { "name": "description", "type": "string", "required": false }
            ]
        },

        "version": {
            "description": "Represents a unique version of the service.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this version." },
                { "name": "version", "type": "string", "description": "The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.", "example": "1.0.0" },
                { "name": "json", "type": "string", "description": "JSON description of the service." }
            ]
        },

        "target": {
            "description": "The target platform for code generation.",
            "fields": [
                { "name": "key", "type": "string" },
                { "name": "name", "type": "string" },
                { "name": "description", "type": "string", "required": false }
            ]
        },

        "code": {
            "description": "Generated source code.",
            "plural": "code",
            "fields": [
                { "name": "targetKey", "type": "string" },
                { "name": "source", "type": "string", "description": "The actual source code." }
            ]
        },

        "error": {
            "fields": [
                { "name": "code", "type": "string", "description": "Machine readable code for this specific error message" },
                { "name": "message", "type": "string", "description": "Description of the error" }
            ]
        }

    },

    "resources": {

	"healthcheck": {
	    "path": "/_internal_/healthcheck",
            "operations": [
                {
                    "method": "GET",
                    "responses": {
                        "200": { "type": "healthcheck" }
                    }
                }
	    ]
	},

	"validation": {
	    "description": "Public resource that can accept JSON input and returns a validation object describing any validation errors.",
	    "operations": [
		{ 
		    "method": "POST",
                    "parameters": [
                        { "name": "json", "type": "string", "required": false }
		    ],
                    "responses": {
                        "200": { "type": "validation" }
                    }
		}
	    ]
	},

	"user": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "description": "Find user with this guid. Exact match", "required": false },
                        { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false },
                        { "name": "token", "type": "string", "description": "Find the user with this API token. Exact match", "required": false }
                    ],
                    "responses": {
                        "200": { "type": "[user]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about the user with this guid.",
                    "path": "/:guid",
                    "responses": {
                        "200": { "type": "user" }
                    }
                },

		{
		    "method": "POST",
		    "path": "/authenticate",
		    "description": "Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.",
		    "parameters": [
			{ "name": "email", "type": "string" },
			{ "name": "password", "type": "string" }
		    ],
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
		    }
		},

                {
                    "method": "POST",
                    "description": "Create a new user.",
                    "parameters": [
                        { "name": "email", "type": "string" },
                        { "name": "name", "type": "string", "required": false },
                        { "name": "password", "type": "string" }
                    ],
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
                    "path": "/:guid",
                    "description": "Updates information about the user with the specified guid.",
                    "parameters": [
                        { "name": "email", "type": "string" },
                        { "name": "name", "type": "string", "required": false }
                    ],
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
                    }
                }
            ]
        },

        "organization": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all organizations. Results are always paginated.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "required": false, "description": "Finds the organization with this guid, if any" },
			{ "name": "user_guid", "type": "uuid", "required": false, "description": "If specified, restricts to organizations that this user is specifically a member of (e.g. will exclude public organizations with which the user does not have a direct membership)." },

                        { "name": "key", "type": "string", "description": "Find organizations with this key. Case in-sensitive. Exact match", "required": false },
                        { "name": "name", "type": "string", "description": "Find organizations with this name. Case in-sensitive. Exact match", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[organization]" }
                    }
                },

                {
                    "method": "GET",
                    "path": "/:key",
                    "description": "Returns the organization with this key.",
                    "responses": {
                        "200": { "type": "organization" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new organization.",
                    "parameters": [
                        { "name": "name", "type": "string" }
                    ],
                    "responses": {
                        "200": { "type": "organization" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
                    "path": "/:key",
                    "description": "Deletes an organization and all of its associated services."
                }
            ]
        },

        "organization_metadata": {
	    "path": "/organizations/:key/metadata",
	    "operations": [
		{
		    "method": "PUT",
		    "description": "Update metadata for this organization",
		    "body": { "type": "organization_metadata" },
                    "responses": {
                        "200": { "type": "organization_metadata" },
                        "409": { "type": "[error]" }
                    }
                }
	    ]
	},

	"domain": {
            "path": "/domains/:orgKey",
	    "operations": [
		{
		    "method": "POST",
		    "description": "Add a domain to this organization",
		    "body": { "type": "domain" },
                    "responses": {
                        "200": { "type": "domain" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "DELETE",
		    "description": "Remove this domain from this organization",
		    "path": "/:name"
                }
	    ]
	},

        "membership": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all memberships. Results are always paginated.",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid", "required": false },
                        { "name": "org_key", "type": "string", "required": false },
                        { "name": "user_guid", "type": "uuid", "required": false },
                        { "name": "role", "type": "string", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[membership]" }
                    }
                },

                {
                    "method": "GET",
                    "path": "/:guid",
		    "responses": {
			"200": { "type": "membership" }
		    }
                },

                {
                    "method": "DELETE",
                    "path": "/:guid"
                }
            ]
        },

        "membership_request": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all membership requests. Results are always paginated.",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid", "required": false },
                        { "name": "org_key", "type": "string", "required": false },
                        { "name": "user_guid", "type": "uuid", "required": false },
                        { "name": "role", "type": "string", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[membership_request]" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a membership request",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid" },
                        { "name": "user_guid", "type": "uuid" },
                        { "name": "role", "type": "string" }
                    ],
                    "responses": {
                        "200": { "type": "membership_request" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "POST",
                    "path": "/:guid/accept",
                    "description": "Accepts this membership request. User will become a member of the specified organization.",
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "POST",
                    "path": "/:guid/decline",
                    "description": "Declines this membership request. User will NOT become a member of the specified organization.",
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }

                }

            ]
        },

        "service": {
            "path": "/:orgKey",
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all services. Results are always paginated.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to search services" },
                        { "name": "name", "type": "string", "required": false, "description": "The name of a service. Case in-sensitive. Exact match", "required": false },
                        { "name": "key", "type": "string", "required": false, "description": "The key of a service. Case in-sensitive. Exact match", "required": false },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[service]" }
                    }
                },

                {
                    "method": "PUT",
                    "description": "Updates a service.",
                    "path": "/:serviceKey",
                    "parameters": [
                        { "name": "name", "type": "string" },
                        { "name": "description", "type": "string", "required": false },
                        { "name": "visibility", "type": "visibility" }
		    ]
                },

                {
                    "method": "DELETE",
                    "description": "Deletes a specific service and its associated versions.",
                    "path": "/:serviceKey"
                }

            ]
        },

        "code": {
	    "path": "/:orgKey/:serviceKey/:version/:targetKey",

            "operations": [
                {
                    "method": "GET",
                    "description": "Generate code for a specific version of a service.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to generate code" },
                        { "name": "serviceKey", "type": "string", "description": "The service key for which to generate code" },
                        { "name": "version", "type": "string", "description": "The version of this service. Can be 'latest'" },
                        { "name": "targetKey", "type": "string", "description": "The target key for which to generate code" }
		    ],
                    "responses": {
                        "200": { "type": "code" },
                        "409": { "type": "[error]", "description": "If the target or version are invalid." }
                    }
                }
            ]
        },

        "target": {
            "path": "/targets/:orgKey",

            "operations": [
                {
                    "method": "GET",
                    "description": "List all targets of this org.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to search targets" }
                    ],
                    "responses": {
                        "200": { "type": "[target]" }
                    }
                }
            ]
        },

        "version": {
            "path": "/:orgKey/:serviceKey",

            "operations": [
                {
                    "method": "GET",
                    "description": "Search all versions of this service. Results are always paginated.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to search versions" },
                        { "name": "serviceKey", "type": "string", "description": "The service key for which to search versions" },
                        { "name": "limit", "type": "integer", "default": 25, "description": "The number of records to return", "maximum": 100 },
                        { "name": "offset", "type": "integer", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[version]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Retrieve a specific version of a service.",
                    "path": "/:version",
                    "responses": {
                        "200": { "type": "version" }
                    }
                },

                {
                    "method": "PUT",
                    "description": "Create or update the service with the specified version.",
                    "path": "/:version",
                    "parameters": [
                        { "name": "json", "type": "string", "description": "The actual full contents of the json schema" },
                        { "name": "visibility", "type": "visibility", "description": "The visibility of this service.", "default": "organization" }
		    ],
                    "responses": {
                        "200": { "type": "version" }
                    }
                },

                {
                    "method": "DELETE",
                    "description": "Deletes a specific version.",
                    "path": "/:version"
                }

            ]
        }

    }

}
